{"version":3,"file":"JsStorage.js","sourceRoot":"","sources":["../Script/Business/CommonLogic.ts","../Script/Business/UtilityLogic.ts","../Script/Model/Column.ts","../Script/Model/Table.ts","../Script/Model/DataBase.ts","../Script/Business/WebSqlLogic.ts","../Script/Business/IndexDb/CreateDbLogic.ts","../Script/Business/IndexDb/DeleteLogic.ts","../Script/Business/IndexDb/DropDbLogic.ts","../Script/Business/IndexDb/InsertLogic.ts","../Script/Business/IndexDb/OpenDbLogic.ts","../Script/Business/IndexDb/SelectLogic.ts","../Script/Business/IndexDb/UpdateLogic.ts","../Script/Business/IndexDb/MainLogic.ts","../Script/Business/MainLogic.ts","../Script/index.ts","../Script/Business/DbHelperLogic.ts","../Script/Business/FilesCollection.ts"],"names":[],"mappings":"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","sourcesContent":["module JsStorage {\r\n\r\n    export enum DBType {\r\n        IndexedDb,\r\n        WebSql\r\n    };\r\n\r\n    export enum ErrorType {\r\n        UndefinedColumn,\r\n        UndefinedValue,\r\n        UndefinedColumnName,\r\n        UndefinedColumnValue,\r\n        NotArray,\r\n        NoValueSupplied,\r\n        ColumnNotExist\r\n    }\r\n\r\n    export interface ISelect {\r\n        From: string,\r\n        Where: any,\r\n        Wheres:any,\r\n        FromMany\r\n    }\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any\r\n    }\r\n\r\n    export interface IUpdate {\r\n        In: string,\r\n\r\n        /**\r\n         * A Json Object containing the update values\r\n         * \r\n         * @type {*}\r\n         * @memberOf IUpdate\r\n         */\r\n        Set: any,\r\n        Where: any\r\n    }\r\n\r\n    export interface IInsert {\r\n        Into: string,\r\n        Values: Array<IValue>\r\n    }\r\n\r\n    export interface IValue {\r\n        Column: string,\r\n        Value: string\r\n    }\r\n\r\n    export interface ICondition {\r\n        Column: string,\r\n        Value: string,\r\n        Op: string\r\n    }\r\n\r\n}","module JsStorage {\r\n    export module Business {\r\n        export interface IError {\r\n            Name: string,\r\n            Value: string\r\n        }\r\n        export class UtilityLogic {\r\n            static getError(errorType: ErrorType, logError: boolean = false, errorDetail: any) {\r\n                var Error: IError = {\r\n                    Name: ErrorType[errorType],\r\n                    Value: ''\r\n                };\r\n                switch (errorType) {\r\n                    case ErrorType.NotArray: Error.Value = \"Supplied value is not an array\"; break;\r\n                    case ErrorType.UndefinedColumn: Error.Value = \"Column is undefined in Where\"; break;\r\n                    case ErrorType.UndefinedValue: Error.Value = \"Value is undefined in Where\"; break;\r\n                    case ErrorType.UndefinedColumnName: Error.Value = \"column name is undefined\"; break;\r\n                    case ErrorType.UndefinedColumnValue: Error.Value = \"column value is undefined\"; break;\r\n                    case ErrorType.NoValueSupplied: Error.Value = \"no value supplied\"; break;\r\n                    case ErrorType.ColumnNotExist: Error.Value = \"column :\" + errorDetail['ColumnName'] + \" does not exist\";\r\n                        break;\r\n                    default: console.warn('the error type is not defined');\r\n                }\r\n                if (logError) {\r\n                    var ErrorDesc = {\r\n                        Detail: Error\r\n                    }\r\n                    console.warn(\"Error occured : - \" + ErrorDesc);\r\n                }\r\n                return Error;\r\n            }\r\n\r\n            static convertObjectintoLowerCase(obj: any) {\r\n\r\n                var keys = Object.keys(obj);\r\n                var n = keys.length;\r\n                while (n--) {\r\n                    var key = keys[n];\r\n                    obj[key.toLowerCase()] = obj[key]\r\n                    delete obj[key]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n        }\r\n        export class Column implements IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n\r\n            constructor(key: IColumn, tableName: string) {\r\n                if (key.Name != null) {\r\n                    this.Name = key.Name;\r\n                }\r\n                else {\r\n                    throw \"Column Name is not defined for table:\" + tableName;\r\n                }\r\n                this.AutoIncrement = key.AutoIncrement != null ? key.AutoIncrement : false;\r\n                this.PrimaryKey = key.PrimaryKey != null ? key.PrimaryKey : false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface ITable {\r\n            Name: string;\r\n            Columns: Array<IColumn>;\r\n            Version: number;\r\n        }\r\n        export class Table {\r\n            Name: string = \"\";\r\n            Columns: Array<Column> = [];\r\n            Version: number;\r\n\r\n            //internal Members\r\n            RequireDelete: boolean = false;\r\n            RequireCreation: boolean = false;\r\n            PrimaryKey: string = \"\";\r\n\r\n            constructor(table: ITable, dbName: string) {\r\n                this.Name = table.Name.toLowerCase();\r\n                this.Version = table.Version == undefined ? 1 : table.Version;\r\n                var That = this;\r\n                table.Columns.forEach(function (item) {\r\n                    That.Columns.push(new Column(item, table.Name));\r\n                })\r\n\r\n                this.setRequireDelete(dbName);\r\n                this.setDbVersion(dbName);\r\n                this.setPrimaryKey();\r\n            }\r\n\r\n            //private methods\r\n\r\n            private setPrimaryKey() {\r\n                //this.Key = new Column();//\r\n                var That = this;\r\n                this.Columns.forEach(function (item) {\r\n                    if (item.PrimaryKey && That.PrimaryKey.length == 0) {\r\n                        That.PrimaryKey = item.Name;\r\n                        localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"true\");\r\n                    }\r\n                    else if (item.PrimaryKey && That.PrimaryKey.length > 0) {\r\n                        localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"\");\r\n                        throw \"Multiple primary key are not allowed\";\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            private setRequireDelete(dbName: string) {\r\n                var TableVersion = localStorage.getItem(\"JsStorage_\" + dbName + \"_\" + this.Name);\r\n                if (TableVersion == null || localStorage.getItem('JsStorage_Db_Version') == null) {\r\n                    this.RequireCreation = true;\r\n                }\r\n                else if (TableVersion != this.Version.toString()) {\r\n                    this.RequireDelete = true;\r\n                }\r\n                this.Version = this.Version == null ? 1 : this.Version;\r\n\r\n            }\r\n\r\n            private setDbVersion(dbName: string) {\r\n                if (this.Version == null) {\r\n                    localStorage.setItem(dbName + 'Db_Version', '1');\r\n                }\r\n                else if (this.Version > Number(localStorage.getItem(dbName + 'Db_Version'))) {\r\n                    localStorage.setItem(dbName + 'Db_Version', this.Version.toString());\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface IDataBase {\r\n            Name: string;\r\n            Tables: Array<ITable>;\r\n        }\r\n        export class DataBase {\r\n            Name: string;\r\n            Tables: Array<Table> = [];\r\n\r\n            constructor(dataBase: IDataBase) {\r\n                this.Name = dataBase.Name.toLowerCase();\r\n                var That = this;\r\n                dataBase.Tables.forEach(function (item) {\r\n                    That.Tables.push(new Table(item, That.Name));\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export class WebSqlLogic {\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class CreateDbLogic {\r\n                constructor(objMain: Main, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        DbVersion = Number(localStorage.getItem(ActiveDataBase.Name + 'Db_Version')),\r\n                        DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion);\r\n\r\n                    DbRequest.onerror = function (event) {\r\n                        if (onError != null) {\r\n                            onError((event as any).target.error);\r\n                        }\r\n                    };\r\n\r\n                    DbRequest.onsuccess = function (event) {\r\n                        objMain.Status.ConStatus = ConnectionStatus.Connected;\r\n                        DbConnection = DbRequest.result;\r\n                        DbConnection.onclose = function () {\r\n                            objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                            objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                        }\r\n\r\n                        DbConnection.onerror = function (e) {\r\n\r\n                        }\r\n\r\n                        DbConnection.onabort = function (e) {\r\n                            objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                            objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                        }\r\n\r\n                        if (onSuccess != null) {\r\n                            onSuccess(objMain);\r\n                        }\r\n                    };\r\n\r\n                    DbRequest.onupgradeneeded = function (event) {\r\n                        var db = (<any>event).target.result;\r\n                        ActiveDataBase.Tables.forEach(function (item) {\r\n                            if (item.RequireDelete) {\r\n                                // Delete the old datastore.    \r\n                                if (db.objectStoreNames.contains(item.Name)) {\r\n                                    db.deleteObjectStore(item.Name);\r\n                                }\r\n                                createObjectStore(db, item);\r\n                            }\r\n                            else if (item.RequireCreation) {\r\n                                createObjectStore(db, item);\r\n                            }\r\n                        })\r\n\r\n                    }\r\n\r\n                    var createObjectStore = function (dbConnection, item: Table) {\r\n                        try {\r\n                            if (item.PrimaryKey.length > 0) {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    keyPath: item.PrimaryKey\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    if (!column.PrimaryKey) {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    autoIncrement: true\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                })\r\n                            }\r\n                            //setting the table version\r\n                            localStorage.setItem(\"JsStorage_\" + ActiveDataBase.Name + \"_\" + item.Name, item.Version.toString());\r\n                        }\r\n                        catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class DeleteLogic {\r\n                constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        Transaction: IDBTransaction = DbConnection.transaction([query.From], \"readwrite\"),\r\n                        ObjectStore: IDBObjectStore = Transaction.objectStore(query.From),\r\n                        ErrorOccured: boolean = false,\r\n                        ErrorCount = 0,\r\n                        RowAffected = 0,\r\n                        onSuceessRequest = function (rowsAffected) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(rowsAffected);\r\n                            }\r\n                        },\r\n\r\n                        onErrorGetRequest = function (e) {\r\n                            if (onError != null) {\r\n                                onError((e as any).target.error);\r\n                            }\r\n                        };\r\n\r\n                    if (query.Where == undefined) {\r\n                        var CursorOpenRequest = ObjectStore.openCursor();\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.delete();\r\n                                ++RowAffected;\r\n                                (Cursor as any).continue();\r\n                            }\r\n                            else {\r\n                                onSuceessRequest(RowAffected);\r\n                            }\r\n\r\n                        }\r\n                        CursorOpenRequest.onerror = onErrorGetRequest;\r\n                    }\r\n                    else {\r\n                        var Column,\r\n                            ExecutionNo = 0,\r\n                            ConditionLength = Object.keys(query.Where).length;\r\n                        for (Column in query.Where) {\r\n                            if (!ErrorOccured) {\r\n                                if (ObjectStore.keyPath != null && ObjectStore.keyPath == Column) {\r\n                                    var DeleteRequest = ObjectStore.delete(query.Where[Column]);\r\n                                    DeleteRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorGetRequest(e);\r\n                                    };\r\n                                    DeleteRequest.onsuccess = function (event) {\r\n                                        var Result = (<any>event).target.result;\r\n                                        ++ExecutionNo; ++RowAffected;\r\n                                        if (ExecutionNo == query.Where.length) {\r\n                                            onSuceessRequest(RowAffected);\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                                else if (ObjectStore.indexNames.contains(Column)) {\r\n                                    var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column])),\r\n                                        ExecutionNo = 0;\r\n\r\n                                    CursorOpenRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorGetRequest(e);\r\n                                    };\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n\r\n                                        if (Cursor) {\r\n                                            Cursor.delete();\r\n                                            ++RowAffected;\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            ++ExecutionNo;\r\n                                            if (ExecutionNo == query.Where.length) {\r\n                                                onSuceessRequest(RowAffected);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class DropDbLogic {\r\n\r\n                constructor(name: string, onSuccess: Function, onError: Function) {\r\n                    var DbDropRequest = window.indexedDB.deleteDatabase(name);\r\n                    DbDropRequest.onsuccess = function () {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n                    DbDropRequest.onerror = function (e) {\r\n                        if (onError != null) {\r\n                            onError((event as any).target.error);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class InsertLogic {\r\n                constructor(tableName: string, values, onSuccess: Function, onError: Function) {\r\n                    try {\r\n                        tableName = tableName.toLowerCase();\r\n                        var TotalRowsAffected = 0,\r\n                            Store: IDBObjectStore = DbConnection.transaction([tableName], \"readwrite\").objectStore(tableName);\r\n                        values.forEach(function (value) {\r\n                            var AddResult = Store.add(value);\r\n                            AddResult.onerror = function (e) {\r\n                                if (onError != null) {\r\n                                    onError((e as any).target.error, TotalRowsAffected);\r\n                                }\r\n                            }\r\n                            AddResult.onsuccess = function (e) {\r\n                                ++TotalRowsAffected\r\n                                if (values.length == TotalRowsAffected) {\r\n                                    if (onSuccess != null) {\r\n                                        onSuccess(TotalRowsAffected);\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    catch (ex) {\r\n                        console.error(ex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class OpenDbLogic {\r\n\r\n                constructor(objMain: Main, onSuccess: Function, onError: Function) {\r\n                    if (objMain.Status.ConStatus != ConnectionStatus.Connected) {\r\n                        if (ActiveDataBase.Name.length > 0) {\r\n                            var DbVersion = Number(localStorage.getItem(ActiveDataBase.Name + 'Db_Version')),\r\n                                DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion),\r\n                                That = this;\r\n                            DbRequest.onerror = function (event) {\r\n                                if (onError != null) {\r\n                                    onError((event as any).target.error);\r\n                                }\r\n                            };\r\n\r\n                            DbRequest.onsuccess = function (event) {\r\n                                objMain.Status.ConStatus = ConnectionStatus.Connected;\r\n                                DbConnection = DbRequest.result;\r\n                                DbConnection.onclose = function () {\r\n                                    objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                                    objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                                }\r\n\r\n                                DbConnection.onerror = function (e) {\r\n\r\n                                }\r\n\r\n                                DbConnection.onabort = function (e) {\r\n                                    objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                                    objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                                }\r\n\r\n                                if (onSuccess != null) {\r\n                                    onSuccess(objMain);\r\n                                }\r\n                            };\r\n                        }\r\n                        else {\r\n                            if (onError != null) {\r\n                                onError(<IError>{\r\n                                    Name: \"DbNotFound\",\r\n                                    Value: \"DataBase name is not found, please first initiate the db using createDb\"\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class SelectLogic {\r\n                constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        ErrorOccured: boolean = false,\r\n                        ErrorCount = 0,\r\n                        Results = [],\r\n                        Transaction: IDBTransaction = DbConnection.transaction([query.From], \"readonly\"),\r\n                        ObjectStore: IDBObjectStore = Transaction.objectStore(query.From),\r\n                        onSuceessRequest = function () {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(Results);\r\n                            }\r\n                        },\r\n\r\n                        onErrorRequest = function (e) {\r\n                            if (ErrorCount == 1) {\r\n                                if (onError != null) {\r\n                                    onError((e as any).target.error);\r\n                                }\r\n                            }\r\n                        };\r\n                    if (query.Where == undefined) {\r\n                        var CursorOpenRequest = ObjectStore.openCursor();\r\n\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Results.push(Cursor.value);\r\n                                (Cursor as any).continue();\r\n                            }\r\n                            else {\r\n                                if (onSuccess != null) {\r\n                                    onSuceessRequest();\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        CursorOpenRequest.onerror = onErrorRequest;\r\n                    }\r\n                    else {\r\n                        var Column,\r\n                            ExecutionNo = 0,\r\n                            ConditionLength = Object.keys(query.Where).length,\r\n                            Results = [],\r\n                            OnSuccessGetRequest = function () {\r\n                                ++ExecutionNo;\r\n                                if (ExecutionNo == ConditionLength) {\r\n                                    onSuceessRequest();\r\n                                }\r\n                            };\r\n                        for (Column in query.Where) {\r\n                            if (!ErrorOccured) {\r\n                                if (ObjectStore.keyPath != null && ObjectStore.keyPath == Column) {//(That.isPrimaryKey(query.From, condition)) {\r\n                                    var GetRequest = ObjectStore.get(query.Where[Column]);\r\n                                    GetRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorRequest(e);\r\n                                    }\r\n                                    GetRequest.onsuccess = OnSuccessGetRequest;\r\n\r\n                                }\r\n                                else if (ObjectStore.indexNames.contains(Column)) {\r\n                                    var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column]));\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                        if (Cursor) {\r\n                                            Results.push(Cursor);\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            OnSuccessGetRequest();\r\n                                        }\r\n                                    }\r\n                                    CursorOpenRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorRequest(e);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                private getPrimaryKey(tablename: string) {\r\n                    var PrimaryKeyColumn = \"\";\r\n                    ActiveDataBase.Tables.every(function (table) {\r\n                        if (table.Name == tablename) {\r\n                            table.Columns.every(function (column) {\r\n                                if (column.PrimaryKey) {\r\n                                    PrimaryKeyColumn = column.Name;\r\n                                    return true;\r\n                                }\r\n                                return false;\r\n                            })\r\n                        }\r\n                        return false;\r\n                    })\r\n                    return PrimaryKeyColumn;\r\n                }\r\n\r\n                private isWhereValid(condition: ICondition) {\r\n                    if (condition.Column == undefined) {\r\n                        return ErrorType.UndefinedColumn;\r\n                    }\r\n                    else if (condition.Value == undefined) {\r\n                        return ErrorType.UndefinedValue;\r\n                    }\r\n                    return null;\r\n\r\n                }\r\n\r\n                private IsWhereValid(tablename: string, isprimaryKey: boolean, condition: any) {\r\n\r\n                    if (condition.Column == undefined) {\r\n                        return ErrorType.UndefinedColumn;\r\n                    }\r\n                    else if (condition.Value == undefined) {\r\n                        return ErrorType.UndefinedValue;\r\n                    }\r\n                    return null;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class UpdateLogic {\r\n                constructor(query: IUpdate, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        ErrorOccured: boolean = false,\r\n                        ErrorCount = 0,\r\n                        RowAffected = 0,\r\n                        Transaction: IDBTransaction = DbConnection.transaction([query.In], \"readwrite\"),\r\n                        ObjectStore: IDBObjectStore = Transaction.objectStore(query.In),\r\n                        onSuceessRequest = function (rowsAffected) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(rowsAffected);\r\n                            }\r\n                        },\r\n\r\n                        onErrorGetRequest = function (e) {\r\n                            if (ErrorCount == 1) {\r\n                                if (onError != null) {\r\n                                    onError((e as any).target.error);\r\n                                }\r\n                            }\r\n                        };\r\n                    if (query.Where == undefined) {\r\n                        var CursorOpenRequest = ObjectStore.openCursor();\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                for (var key in query.Set) {\r\n                                    Cursor.value[key] = query.Set[key];\r\n                                }\r\n                                Cursor.update(Cursor.value);\r\n                                ++RowAffected;\r\n                                (Cursor as any).continue();\r\n                            }\r\n                            else {\r\n                                onSuceessRequest(RowAffected);\r\n                            }\r\n\r\n                        }\r\n                        CursorOpenRequest.onerror = onErrorGetRequest;\r\n                    }\r\n                    else {\r\n                        var Column,\r\n                            ExecutionNo = 0,\r\n                            ConditionLength = Object.keys(query.Where).length;\r\n                        for (Column in query.Where) {\r\n                            if (!ErrorOccured) {\r\n                                if (ObjectStore.keyPath != null && ObjectStore.keyPath == Column) {\r\n                                    var GetRequest = ObjectStore.get(query.Where[Column]);\r\n\r\n                                    GetRequest.onerror = function (event) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorGetRequest(event);\r\n                                    };\r\n\r\n                                    GetRequest.onsuccess = function (event) {\r\n                                        var Result = (<any>event).target.result;\r\n                                        ++ExecutionNo;\r\n                                        if (Result != undefined) {\r\n                                            for (var key in query.Set) {\r\n                                                Result[key] = query.Set[key];\r\n                                            }\r\n                                            var UpdateRequest = ObjectStore.put(Result);\r\n                                            UpdateRequest.onsuccess = function (e) {\r\n                                                ++RowAffected;\r\n                                                if (ExecutionNo == ConditionLength) {\r\n                                                    onSuceessRequest(RowAffected);\r\n                                                }\r\n                                            }\r\n                                            UpdateRequest.onerror = function (e) {\r\n                                                ErrorOccured = true; ++ErrorCount;\r\n                                                onErrorGetRequest(e);\r\n                                            }\r\n                                        }\r\n\r\n                                    };\r\n\r\n                                }\r\n                                else {\r\n                                    if (ObjectStore.indexNames.contains(Column)) {\r\n                                        var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column]));\r\n                                        CursorOpenRequest.onsuccess = function (e) {\r\n                                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                            if (Cursor) {\r\n                                                for (var key in query.Set) {\r\n                                                    Cursor.value[key] = query.Set[key];\r\n                                                }\r\n                                                Cursor.update(Cursor.value);\r\n                                                ++RowAffected;\r\n                                                Cursor.continue();\r\n                                            }\r\n                                            else {\r\n                                                ++ExecutionNo;\r\n                                                if (ExecutionNo == query.Where.length) {\r\n                                                    onSuceessRequest(RowAffected);\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n\r\n                                        CursorOpenRequest.onerror = function (e) {\r\n                                            ErrorOccured = true; ++ErrorCount;\r\n                                            onErrorGetRequest(e);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","import Table = JsStorage.Model.Table;\r\nimport Column = JsStorage.Model.Column;\r\nmodule JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export var DbConnection,\r\n                ActiveDataBase: DataBase;\r\n            export class MainLogic {\r\n\r\n\r\n                constructor(dataBase: DataBase) {\r\n                    ActiveDataBase = dataBase\r\n                }\r\n\r\n                openDb = function (objMain: Main, onSuccess: Function, onError: Function) {\r\n                    var ObjOpenDb = new OpenDbLogic(objMain, onSuccess, onError);\r\n                }\r\n\r\n                public closeDb = function (objMain: Main) {\r\n                    if (objMain.Status.ConStatus == ConnectionStatus.Connected) {\r\n                        DbConnection.close();\r\n                    }\r\n                }\r\n\r\n                public dropDb = function (name: string, onSuccess: Function, onError: Function) {\r\n                    var ObjDropDb = new DropDbLogic(name, onSuccess, onError);\r\n                }\r\n\r\n                public update = function (query: IUpdate, onSuccess: Function, onError: Function) {\r\n                    var ObjUpdate = new UpdateLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public insert = function (tableName: string, values, onSuccess: Function, onError: Function) {\r\n                    var ObjInsert = new InsertLogic(tableName, values, onSuccess, onError);\r\n                }\r\n\r\n                public delete = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                    var ObjDelete = new DeleteLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public select = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n                    new SelectLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public createDb = function (objMain: Main, onSuccess: Function, onError: Function) {\r\n                    new CreateDbLogic(objMain, onSuccess, onError);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","import DataBase = JsStorage.Model.DataBase;\r\nimport IDataBase = JsStorage.Model.IDataBase;\r\nmodule JsStorage {\r\n    export enum ConnectionStatus {\r\n        Connected = 1,\r\n        Closed = 2,\r\n        NotStarted = 3\r\n    }\r\n    export interface JsStorageStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n    export class Main {\r\n        DbType: DBType;\r\n        IndexDbObj: Business.IndexDb.MainLogic;\r\n        WebSqlObj: Business.WebSqlLogic;\r\n        Status: JsStorageStatus = <JsStorageStatus>{\r\n            ConStatus: ConnectionStatus.NotStarted,\r\n            LastError: \"\"\r\n        };\r\n        constructor() {\r\n            this.setDbType();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IDataBase} dataBase \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * @returns \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        createDb(dataBase: IDataBase, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                var Db = new DataBase(dataBase)\r\n                this.IndexDbObj = new Business.IndexDb.MainLogic(Db);\r\n                var DbVersion = Number(localStorage.getItem(dataBase.Name + 'Db_Version'));\r\n                this.IndexDbObj.createDb(this, onSuccess, onError);\r\n            }\r\n            else {\r\n                this.WebSqlObj = new Business.WebSqlLogic();\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        openDb(onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.openDb(this, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        closeDb(onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.closeDb(this);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        dropDb(name: string, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.dropDb(name.toLowerCase(), onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IQuery} query \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        select(query: ISelect, onSuccess: Function, onError: Function) {\r\n            query.From = query.From.toLowerCase();\r\n            if (this.Status.ConStatus == ConnectionStatus.Connected) {\r\n                query.From = query.From.toLowerCase();\r\n                if (this.DbType == DBType.IndexedDb) {\r\n                    this.IndexDbObj.select(query, onSuccess, onError);\r\n                }\r\n                else {\r\n\r\n                }\r\n            }\r\n            else if (this.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.select(query, onSuccess, onError);\r\n                }, 200);\r\n            }\r\n            else if (this.Status.ConStatus == ConnectionStatus.Closed) {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {string} table \r\n         * @param {any} value \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        insert(query: IInsert, onSuccess: Function, onError: Function) {\r\n            if (!Array.isArray(query.Values)) {\r\n                throw \"Value should be array :- supplied value is not array\";\r\n            }\r\n            else if (query.Values.length > 0) {\r\n                query.Into = query.Into.toLowerCase();\r\n                if (this.DbType == DBType.IndexedDb) {\r\n                    this.IndexDbObj.insert(query.Into, query.Values, onSuccess, onError);\r\n                }\r\n                else {\r\n\r\n                }\r\n            }\r\n            else {\r\n                if (onError != null) {\r\n                    onError(Business.UtilityLogic.getError(ErrorType.NoValueSupplied, true, null));\r\n                }\r\n            }\r\n        }\r\n\r\n        update(query: IUpdate, onSuccess: Function, onError: Function) {\r\n\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.update(query, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        delete(query: IDelete, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.delete(query, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n            * determine and set the DataBase Type\r\n            * \r\n            * \r\n            * @memberOf MainLogic\r\n            */\r\n        private setDbType = function () {\r\n            (window as any).indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                this.DbType = DBType.IndexedDb;\r\n                (window as any).IDBTransaction = (window as any).IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction;\r\n                (window as any).IDBKeyRange = (window as any).IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange\r\n            }\r\n            else if ((window as any).openDatabase) {\r\n                this.DbType = DBType.WebSql;\r\n            }\r\n            else {\r\n                throw 'Browser does not support Db Implementation';\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","\r\n/// <reference path=\"Business/CommonLogic.ts\" />\r\n/// <reference path=\"Business/UtilityLogic.ts\" />\r\n/// <reference path=\"Model/Column.ts\" />\r\n/// <reference path=\"Model/Table.ts\" />\r\n/// <reference path=\"Model/DataBase.ts\" />\r\n/// <reference path=\"Business/WebSqlLogic.ts\" />\r\n\r\n/// <reference path=\"Business/IndexDb/CreateDbLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/DeleteLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/DropDbLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/InsertLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/OpenDbLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/SelectLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/UpdateLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/MainLogic.ts\" />\r\n\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n","module JsStorage {\r\n    export module Business {\r\n        export class DbHelperLogic {\r\n            and() {\r\n                return this;\r\n            }\r\n            or() {\r\n                return this;\r\n            }\r\n\r\n           \r\n        }\r\n    }\r\n}","/// <reference path=\"CommonLogic.ts\" />\r\n"]}