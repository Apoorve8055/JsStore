{"version":3,"file":"JsStorage.js","sourceRoot":"","sources":["../Script/Business/CommonLogic.ts","../Script/Business/UtilityLogic.ts","../Script/Model/Column.ts","../Script/Model/Table.ts","../Script/Model/DataBase.ts","../Script/Business/WebSqlLogic.ts","../Script/Business/GateLogic.ts","../Script/Business/IndexDb/CreateDbLogic.ts","../Script/Business/IndexDb/DeleteLogic.ts","../Script/Business/IndexDb/DropDbLogic.ts","../Script/Business/IndexDb/InsertLogic.ts","../Script/Business/IndexDb/OpenDbLogic.ts","../Script/Business/IndexDb/BaseSelectLogic.ts","../Script/Business/IndexDb/SelectJoinLogic.ts","../Script/Business/IndexDb/SelectLogic.ts","../Script/Business/IndexDb/UpdateLogic.ts","../Script/Business/IndexDb/MainLogic.ts","../Script/Business/MainLogic.ts","../Script/index.ts","../Script/Business/DbHelperLogic.ts","../Script/Business/IndexDb/ClearLogic.ts"],"names":[],"mappings":"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","sourcesContent":["module JsStorage {\r\n\r\n    export enum DBType {\r\n        IndexedDb,\r\n        WebSql\r\n    };\r\n\r\n    export enum ErrorType {\r\n        UndefinedColumn,\r\n        UndefinedValue,\r\n        UndefinedColumnName,\r\n        UndefinedColumnValue,\r\n        NotArray,\r\n        NoValueSupplied,\r\n        ColumnNotExist,\r\n        InvalidOp\r\n    }\r\n\r\n    export interface ISelect {\r\n        From: any,\r\n        Where: any,\r\n        WhereIn: Array<IWhereIn>,\r\n        FromMany,\r\n        Skip: number,\r\n        Limit: number\r\n    }\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any\r\n    }\r\n\r\n    export interface IWhereIn {\r\n        Column: string,\r\n        Value,\r\n        Start,\r\n        Op,\r\n        End\r\n    }\r\n\r\n    export interface IUpdate {\r\n        In: string,\r\n\r\n        /**\r\n         * A Json Object containing the update values\r\n         * \r\n         * @type {*}\r\n         * @memberOf IUpdate\r\n         */\r\n        Set: any,\r\n        Where: any\r\n    }\r\n\r\n    export interface IInsert {\r\n        Into: string,\r\n        Values: Array<IValue>\r\n    }\r\n\r\n    export interface IValue {\r\n        Column: string,\r\n        Value: string\r\n    }\r\n\r\n    export interface ICondition {\r\n        Column: string,\r\n        Value: string,\r\n        Op: string\r\n    }\r\n\r\n    export interface ITableJoin {\r\n        Column: string,\r\n        Table: string\r\n    }\r\n\r\n    export interface IJoin {\r\n        Table1: ITableJoin,\r\n        Join: string, //inner,left,right,outer\r\n        Table2: ITableJoin,\r\n        Relation: string\r\n    }\r\n\r\n}","module JsStorage {\r\n    export module Business {\r\n        export interface IError {\r\n            Name: string,\r\n            Value: string\r\n        }\r\n        export class UtilityLogic {\r\n            static getError(errorType: ErrorType, logError: boolean = false, errorDetail: any) {\r\n                var Error: IError = {\r\n                    Name: ErrorType[errorType],\r\n                    Value: ''\r\n                };\r\n                switch (errorType) {\r\n                    case ErrorType.NotArray: Error.Value = \"Supplied value is not an array\"; break;\r\n                    case ErrorType.UndefinedColumn: Error.Value = \"Column is undefined in Where\"; break;\r\n                    case ErrorType.UndefinedValue: Error.Value = \"Value is undefined in Where\"; break;\r\n                    case ErrorType.UndefinedColumnName: Error.Value = \"column name is undefined\"; break;\r\n                    case ErrorType.UndefinedColumnValue: Error.Value = \"column value is undefined\"; break;\r\n                    case ErrorType.NoValueSupplied: Error.Value = \"no value supplied\"; break;\r\n                    case ErrorType.InvalidOp: Error.Value = \"Invalid Op Value : \" + errorDetail['Op']; break;\r\n                    case ErrorType.ColumnNotExist: Error.Value = \"column :\" + errorDetail['ColumnName'] + \" does not exist\";\r\n                        break;\r\n                    default: console.warn('the error type is not defined');\r\n                }\r\n                if (logError) {\r\n                    console.warn(\"JsStorage Error : - \" + Error.Value);\r\n                }\r\n                return Error;\r\n            }\r\n\r\n            static convertObjectintoLowerCase(obj: any) {\r\n\r\n                var keys = Object.keys(obj);\r\n                var n = keys.length;\r\n                while (n--) {\r\n                    var key = keys[n];\r\n                    obj[key.toLowerCase()] = obj[key]\r\n                    delete obj[key]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n            Unique: boolean;\r\n        }\r\n        \r\n        export class Column implements IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n            Unique: boolean;\r\n            constructor(key: IColumn, tableName: string) {\r\n                if (key.Name != null) {\r\n                    this.Name = key.Name;\r\n                }\r\n                else {\r\n                    throw \"Column Name is not defined for table:\" + tableName;\r\n                }\r\n                this.AutoIncrement = key.AutoIncrement != null ? key.AutoIncrement : false;\r\n                this.PrimaryKey = key.PrimaryKey != null ? key.PrimaryKey : false;\r\n                this.Unique = key.Unique != null ? key.Unique : false;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface ITable {\r\n            Name: string;\r\n            Columns: Array<IColumn>;\r\n            Version: number;\r\n        }\r\n        export class Table {\r\n            Name: string = \"\";\r\n            Columns: Array<Column> = [];\r\n            Version: number;\r\n\r\n            //internal Members\r\n            RequireDelete: boolean = false;\r\n            RequireCreation: boolean = false;\r\n            PrimaryKey: string = \"\";\r\n\r\n            constructor(table: ITable, dbName: string) {\r\n                this.Name = table.Name.toLowerCase();\r\n                this.Version = table.Version == undefined ? 1 : table.Version;\r\n                var That = this;\r\n                table.Columns.forEach(function (item) {\r\n                    That.Columns.push(new Column(item, table.Name));\r\n                })\r\n\r\n                this.setRequireDelete(dbName);\r\n                this.setDbVersion(dbName);\r\n                this.setPrimaryKey();\r\n            }\r\n\r\n            //private methods\r\n\r\n            private setPrimaryKey() {\r\n                //this.Key = new Column();//\r\n                var That = this;\r\n                this.Columns.forEach(function (item) {\r\n                    if (item.PrimaryKey && That.PrimaryKey.length == 0) {\r\n                        That.PrimaryKey = item.Name;\r\n                        localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"true\");\r\n                    }\r\n                    else if (item.PrimaryKey && That.PrimaryKey.length > 0) {\r\n                        localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"\");\r\n                        throw \"Multiple primary key are not allowed\";\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            private setRequireDelete(dbName: string) {\r\n                var TableVersion = localStorage.getItem(\"JsStorage_\" + dbName + \"_\" + this.Name);\r\n                if (TableVersion == null || localStorage.getItem('JsStorage_Db_Version') == null) {\r\n                    this.RequireCreation = true;\r\n                }\r\n                else if (TableVersion != this.Version.toString()) {\r\n                    this.RequireDelete = true;\r\n                }\r\n                this.Version = this.Version == null ? 1 : this.Version;\r\n\r\n            }\r\n\r\n            private setDbVersion(dbName: string) {\r\n                if (this.Version == null) {\r\n                    localStorage.setItem(dbName + 'Db_Version', '1');\r\n                }\r\n                else if (this.Version > Number(localStorage.getItem(dbName + 'Db_Version'))) {\r\n                    localStorage.setItem(dbName + 'Db_Version', this.Version.toString());\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface IDataBase {\r\n            Name: string;\r\n            Tables: Array<ITable>;\r\n        }\r\n        export class DataBase {\r\n            Name: string;\r\n            Tables: Array<Table> = [];\r\n\r\n            constructor(dataBase: IDataBase) {\r\n                this.Name = dataBase.Name.toLowerCase();\r\n                var That = this;\r\n                dataBase.Tables.forEach(function (item) {\r\n                    That.Tables.push(new Table(item, That.Name));\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export class WebSqlLogic {\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export class GateLogic {\r\n            Results = [];\r\n            doAnd = function (data1, data2, query: IJoin) {\r\n                query.Relation = (query.Relation == undefined) ? '=' : query.Relation;\r\n                switch (query.Relation) {\r\n                    case '=': if (data1[query.Table1.Column] == data2[query.Table2.Column]) {\r\n                        this.Results.push([query.Table1.Table] = data1, [query.Table2.Table] = data1)\r\n                    } break;\r\n                    default:\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class CreateDbLogic {\r\n                constructor(objMain: Main, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        DbVersion = Number(localStorage.getItem(ActiveDataBase.Name + 'Db_Version')),\r\n                        DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion);\r\n\r\n                    DbRequest.onerror = function (event) {\r\n                        if (onError != null) {\r\n                            onError((event as any).target.error);\r\n                        }\r\n                    };\r\n\r\n                    DbRequest.onsuccess = function (event) {\r\n                        objMain.Status.ConStatus = ConnectionStatus.Connected;\r\n                        DbConnection = DbRequest.result;\r\n                        DbConnection.onclose = function () {\r\n                            objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                            objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                        }\r\n\r\n                        DbConnection.onerror = function (e) {\r\n\r\n                        }\r\n\r\n                        DbConnection.onabort = function (e) {\r\n                            objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                            objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                        }\r\n\r\n                        if (onSuccess != null) {\r\n                            onSuccess(objMain);\r\n                        }\r\n                    };\r\n\r\n                    DbRequest.onupgradeneeded = function (event) {\r\n                        var db = (<any>event).target.result;\r\n                        ActiveDataBase.Tables.forEach(function (item) {\r\n                            if (item.RequireDelete) {\r\n                                // Delete the old datastore.    \r\n                                if (db.objectStoreNames.contains(item.Name)) {\r\n                                    db.deleteObjectStore(item.Name);\r\n                                }\r\n                                createObjectStore(db, item);\r\n                            }\r\n                            else if (item.RequireCreation) {\r\n                                createObjectStore(db, item);\r\n                            }\r\n                        })\r\n\r\n                    }\r\n\r\n                    var createObjectStore = function (dbConnection, item: Table) {\r\n                        try {\r\n                            if (item.PrimaryKey.length > 0) {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    keyPath: item.PrimaryKey\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    if (column.PrimaryKey) {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                    }\r\n                                    else {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    autoIncrement: true\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                })\r\n                            }\r\n                            //setting the table version\r\n                            localStorage.setItem(\"JsStorage_\" + ActiveDataBase.Name + \"_\" + item.Name, item.Version.toString());\r\n                        }\r\n                        catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class DeleteLogic {\r\n                constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        Transaction: IDBTransaction = DbConnection.transaction([query.From], \"readwrite\"),\r\n                        ObjectStore: IDBObjectStore = Transaction.objectStore(query.From),\r\n                        ErrorOccured: boolean = false,\r\n                        ErrorCount = 0,\r\n                        RowAffected = 0,\r\n                        onSuceessRequest = function (rowsAffected) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(rowsAffected);\r\n                            }\r\n                        },\r\n\r\n                        onErrorGetRequest = function (e) {\r\n                            if (onError != null) {\r\n                                onError((e as any).target.error);\r\n                            }\r\n                        };\r\n\r\n                    if (query.Where == undefined) {\r\n                        var CursorOpenRequest = ObjectStore.openCursor();\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.delete();\r\n                                ++RowAffected;\r\n                                (Cursor as any).continue();\r\n                            }\r\n                            else {\r\n                                onSuceessRequest(RowAffected);\r\n                            }\r\n\r\n                        }\r\n                        CursorOpenRequest.onerror = onErrorGetRequest;\r\n                    }\r\n                    else {\r\n                        var Column,\r\n                            ExecutionNo = 0,\r\n                            ConditionLength = Object.keys(query.Where).length;\r\n                        for (Column in query.Where) {\r\n                            if (!ErrorOccured) {\r\n                                if (ObjectStore.indexNames.contains(Column)) {\r\n                                    var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column])),\r\n                                        ExecutionNo = 0;\r\n\r\n                                    CursorOpenRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorGetRequest(e);\r\n                                    };\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n\r\n                                        if (Cursor) {\r\n                                            Cursor.delete();\r\n                                            ++RowAffected;\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            ++ExecutionNo;\r\n                                            if (ExecutionNo == query.Where.length) {\r\n                                                onSuceessRequest(RowAffected);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class DropDbLogic {\r\n\r\n                constructor(name: string, onSuccess: Function, onError: Function) {\r\n                    var DbDropRequest = window.indexedDB.deleteDatabase(name);\r\n                    DbDropRequest.onsuccess = function () {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n                    DbDropRequest.onerror = function (e) {\r\n                        if (onError != null) {\r\n                            onError((event as any).target.error);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class InsertLogic {\r\n                constructor(tableName: string, values, onSuccess: Function, onError: Function) {\r\n                    try {\r\n                        tableName = tableName.toLowerCase();\r\n                        var TotalRowsAffected = 0,\r\n                            Store: IDBObjectStore = DbConnection.transaction([tableName], \"readwrite\").objectStore(tableName);\r\n                        values.forEach(function (value) {\r\n                            var AddResult = Store.add(value);\r\n                            AddResult.onerror = function (e) {\r\n                                if (onError != null) {\r\n                                    onError((e as any).target.error, TotalRowsAffected);\r\n                                }\r\n                            }\r\n                            AddResult.onsuccess = function (e) {\r\n                                ++TotalRowsAffected\r\n                                if (values.length == TotalRowsAffected) {\r\n                                    if (onSuccess != null) {\r\n                                        onSuccess(TotalRowsAffected);\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    catch (ex) {\r\n                        console.error(ex);\r\n                    }\r\n                }\r\n\r\n                \r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class OpenDbLogic {\r\n\r\n                constructor(objMain: Main, onSuccess: Function, onError: Function) {\r\n                    if (objMain.Status.ConStatus != ConnectionStatus.Connected) {\r\n                        if (ActiveDataBase.Name.length > 0) {\r\n                            var DbVersion = Number(localStorage.getItem(ActiveDataBase.Name + 'Db_Version')),\r\n                                DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion),\r\n                                That = this;\r\n                            DbRequest.onerror = function (event) {\r\n                                if (onError != null) {\r\n                                    onError((event as any).target.error);\r\n                                }\r\n                            };\r\n\r\n                            DbRequest.onsuccess = function (event) {\r\n                                objMain.Status.ConStatus = ConnectionStatus.Connected;\r\n                                DbConnection = DbRequest.result;\r\n                                DbConnection.onclose = function () {\r\n                                    objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                                    objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                                }\r\n\r\n                                DbConnection.onerror = function (e) {\r\n\r\n                                }\r\n\r\n                                DbConnection.onabort = function (e) {\r\n                                    objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                                    objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                                }\r\n\r\n                                if (onSuccess != null) {\r\n                                    onSuccess(objMain);\r\n                                }\r\n                            };\r\n                        }\r\n                        else {\r\n                            if (onError != null) {\r\n                                onError(<IError>{\r\n                                    Name: \"DbNotFound\",\r\n                                    Value: \"DataBase name is not found, please first initiate the db using createDb\"\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class BaseSelectLogic extends GateLogic {\r\n                Query: ISelect;\r\n                OnSuccess: Function;\r\n                OnError: Function;\r\n                ErrorOccured: boolean = false;\r\n                ErrorCount = 0;\r\n                Transaction: IDBTransaction;\r\n                ObjectStore: IDBObjectStore;\r\n                SendResultFlag: Boolean = true;\r\n\r\n                public onSuccessRequest = function () {\r\n                    if (this.SendResultFlag && this.OnSuccess != null) {\r\n                        this.OnSuccess(this.Results);\r\n                    }\r\n                }\r\n\r\n                public onErrorRequest = function (e) {\r\n                    if (this.ErrorCount == 1) {\r\n                        if (this.OnError != null) {\r\n                            this.OnError((e as any).target.error);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                private getKeyRange = function (whereIn: IWhereIn) {\r\n                    var KeyRange: IDBKeyRange;\r\n                    switch (this.Query.WhereIn.Op) {\r\n                        case '-': KeyRange = IDBKeyRange.bound(whereIn.Start, whereIn.End); break;\r\n                        case '>': KeyRange = IDBKeyRange.lowerBound(whereIn.Value, true); break;\r\n                        case '>=': KeyRange = IDBKeyRange.lowerBound(whereIn.Value); break;\r\n                        case '<': KeyRange = IDBKeyRange.upperBound(whereIn.Value, true); break;\r\n                        case '<=': KeyRange = IDBKeyRange.upperBound(whereIn.Value); break;\r\n                        default: this.ErrorOccured = true; UtilityLogic.getError(ErrorType.InvalidOp, true, { Op: whereIn.Op });\r\n                    }\r\n                    return KeyRange;\r\n\r\n                }\r\n\r\n                protected executeMultipleWhereInLogic = function (whereInArray: Array<IWhereIn>) {\r\n                    var That = this,\r\n                        WhereIn,\r\n                        ExecutionNo = 0,\r\n                        ConditionLength = Object.keys(this.Query.WhereIn).length,\r\n                        KeyRange: IDBKeyRange,\r\n                        OnSuccessGetRequest = function () {\r\n                            ++ExecutionNo;\r\n                            if (ExecutionNo == ConditionLength) {\r\n                                this.OnSuceessRequest();\r\n                            }\r\n                        };\r\n\r\n                    for (WhereIn in whereInArray) {\r\n                        KeyRange = this.getKeyRange();\r\n                        if (!this.ErrorOccured) {\r\n                            var CursorOpenRequest,\r\n                                OnCursorSuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        That.Results.push(Cursor.value);\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                },\r\n                                OnCursorError = function (e) {\r\n                                    That.ErrorOccured = true; ++That.ErrorCount;\r\n                                    That.OnErrorRequest(e);\r\n                                };\r\n                            if (this.Query.WhereIn.Op == '-') {\r\n                                CursorOpenRequest = this.ObjectStore.openCursor(KeyRange);\r\n                                CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                                CursorOpenRequest.onerror = OnCursorError;\r\n                            }\r\n                            else if (this.ObjectStore.indexNames.contains(WhereIn.Column)) {\r\n                                CursorOpenRequest = this.ObjectStore.index(WhereIn.Column).openCursor(KeyRange);\r\n                                CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                                CursorOpenRequest.onerror = OnCursorError;\r\n                            }\r\n                            else {\r\n                                UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            }\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                protected executeSingleWhereInLogic = function (whereIn: IWhereIn) {\r\n                    var That: SelectLogic = this,\r\n                        KeyRange: IDBKeyRange = this.getKeyRange(whereIn);\r\n\r\n                    if (!this.ErrorOccured) {\r\n                        var CursorOpenRequest,\r\n                            OnCursorSuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    That.Results.push(Cursor.value);\r\n                                    Cursor.continue();\r\n                                }\r\n                                else {\r\n                                    That.onSuccessRequest();\r\n                                }\r\n                            },\r\n                            OnCursorError = function (e) {\r\n                                this.ErrorOccured = true; ++this.ErrorCount;\r\n                                this.OnErrorRequest(e);\r\n                            };\r\n                        if (whereIn.Op == '-') {\r\n                            CursorOpenRequest = this.ObjectStore.openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                            CursorOpenRequest.onerror = OnCursorError;\r\n                        }\r\n                        else if (this.ObjectStore.indexNames.contains(whereIn.Column)) {\r\n                            CursorOpenRequest = this.ObjectStore.index(whereIn.Column).openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                            CursorOpenRequest.onerror = OnCursorError;\r\n                        }\r\n                        else {\r\n                            UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: whereIn.Column });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class SelectJoinLogic extends BaseSelectLogic {\r\n                ObjectStoreForJoin: IDBObjectStore;\r\n                private executeWhereInLogic = function () {\r\n                    if (Array.isArray(this.Query.WhereIn)) {\r\n                        this.executeMultipleWhereInLogic(this.Query.WhereIn);\r\n                    }\r\n                    else {\r\n                        this.executeSingleWhereInLogic(this.Query.WhereIn);\r\n                    }\r\n                }\r\n\r\n                private executeWhereLogic = function () {\r\n                    var Column,\r\n                        SkipRecord = this.Query.Skip,\r\n                        LimitRecord = this.Query.Limit,\r\n                        That: SelectLogic = this,\r\n                        ExecutionNo = 0,\r\n                        ConditionLength = Object.keys(this.Query.Where).length,\r\n                        OnSuccessGetRequest = function () {\r\n                            ++ExecutionNo;\r\n                            if (ExecutionNo == ConditionLength) {\r\n                                That.onSuccessRequest();\r\n                            }\r\n                        };\r\n                    for (Column in this.Query.Where) {\r\n                        if (!this.ErrorOccured) {\r\n                            if (this.ObjectStore.keyPath != null && this.ObjectStore.keyPath == Column) {\r\n                                var GetRequest = this.ObjectStore.get(this.Query.Where[Column]);\r\n                                GetRequest.onerror = function (e) {\r\n                                    That.ErrorOccured = true; ++That.ErrorCount;\r\n                                    That.onErrorRequest(e);\r\n                                }\r\n                                GetRequest.onsuccess = function (e) {\r\n                                    var Result = (<any>e).target.result\r\n                                    if (Result) {\r\n                                        That.Results.push();\r\n                                    }\r\n                                    OnSuccessGetRequest();\r\n                                }\r\n\r\n                            }\r\n                            else if (this.ObjectStore.indexNames.contains(Column)) {\r\n                                var CursorOpenRequest = this.ObjectStore.index(Column).openCursor(IDBKeyRange.only(this.Query.Where[Column]));\r\n                                CursorOpenRequest.onerror = function (e) {\r\n                                    That.ErrorOccured = true; ++this.ErrorCount;\r\n                                    That.onErrorRequest(e);\r\n                                }\r\n                                if (SkipRecord && LimitRecord) {\r\n                                    var RecordSkipped = 0;\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                        if (Cursor) {\r\n                                            if (RecordSkipped == SkipRecord) {\r\n                                                if (That.Results.length != LimitRecord) {\r\n                                                    That.Results.push(Cursor);\r\n                                                    Cursor.continue();\r\n                                                }\r\n                                                else {\r\n                                                    OnSuccessGetRequest();\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                ++RecordSkipped;\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            OnSuccessGetRequest();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if (SkipRecord) { //skip exist\r\n                                    var RecordSkipped = 0;\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                        if (Cursor) {\r\n                                            if (RecordSkipped == SkipRecord) {\r\n                                                That.Results.push(Cursor);\r\n                                            }\r\n                                            else {\r\n                                                ++RecordSkipped;\r\n                                            }\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            OnSuccessGetRequest();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else if (LimitRecord) {\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                        if (Cursor && That.Results.length != LimitRecord) {\r\n                                            That.Results.push(Cursor);\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            OnSuccessGetRequest();\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                        if (Cursor) {\r\n                                            That.Results.push(Cursor);\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            OnSuccessGetRequest();\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n                                UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n                private executeWhereUndefinedLogic = function () {\r\n                    var That: SelectLogic = this,\r\n                        CursorOpenRequest = this.ObjectStore.openCursor();\r\n\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var Cursor = (<any>e).target.result;\r\n                        if (Cursor) {\r\n                            That.Results.push(Cursor.value);\r\n                            (Cursor as any).continue();\r\n                        }\r\n                        else {\r\n                            That.onSuccessRequest();\r\n                        }\r\n                    }\r\n                    CursorOpenRequest.onerror = That.onErrorRequest;\r\n                }\r\n\r\n                constructor(query: ISelect, isArray: boolean, onSuccess: Function, onError: Function) {\r\n                    super();\r\n                    this.Query = query;\r\n                    this.OnSuccess = onSuccess;\r\n                    this.OnError = onError;\r\n                    this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                    this.ObjectStore = this.Transaction.objectStore(query.From);\r\n\r\n                    if (query.WhereIn != undefined) {\r\n                        if (query.Where != undefined) {\r\n                            this.SendResultFlag = false;\r\n                            this.executeWhereLogic();\r\n                        }\r\n                        this.SendResultFlag = true;\r\n                        this.executeWhereInLogic();\r\n\r\n                    }\r\n                    else if (query.Where != undefined) {\r\n                        this.executeWhereLogic();\r\n                    }\r\n                    else {\r\n\r\n                        this.executeWhereUndefinedLogic();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class SelectLogic extends BaseSelectLogic {\r\n\r\n                private executeWhereInLogic = function () {\r\n                    if (Array.isArray(this.Query.WhereIn)) {\r\n                        this.executeMultipleWhereInLogic(this.Query.WhereIn);\r\n                    }\r\n                    else {\r\n                        this.executeSingleWhereInLogic(this.Query.WhereIn);\r\n                    }\r\n                }\r\n\r\n                private executeWhereLogic = function () {\r\n                    var Column,\r\n                        SkipRecord = this.Query.Skip,\r\n                        LimitRecord = this.Query.Limit,\r\n                        That: SelectLogic = this,\r\n                        ConditionLength = 0,\r\n                        OnSuccessGetRequest = function () {\r\n                            --ConditionLength;\r\n                            if (ConditionLength == 0)\r\n                                That.onSuccessRequest();\r\n                        };\r\n\r\n                    var executeInnerWhereLogic = function (column, value) {\r\n\r\n                        if (That.ObjectStore.indexNames.contains(column)) {\r\n                            var CursorOpenRequest = That.ObjectStore.index(column).openCursor(value);\r\n                            CursorOpenRequest.onerror = function (e) {\r\n                                That.ErrorOccured = true; ++That.ErrorCount;\r\n                                That.onErrorRequest(e);\r\n                            }\r\n                            if (SkipRecord && LimitRecord) {\r\n                                var RecordSkipped = 0;\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        if (RecordSkipped == SkipRecord) {\r\n                                            if (That.Results.length != LimitRecord) {\r\n                                                That.Results.push(Cursor);\r\n                                                Cursor.continue();\r\n                                            }\r\n                                            else {\r\n                                                OnSuccessGetRequest();\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            ++RecordSkipped;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (SkipRecord) { //skip exist\r\n                                var RecordSkipped = 0;\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        if (RecordSkipped == SkipRecord) {\r\n                                            That.Results.push(Cursor);\r\n                                        }\r\n                                        else {\r\n                                            ++RecordSkipped;\r\n                                        }\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (LimitRecord) {\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor && That.Results.length != LimitRecord) {\r\n                                        That.Results.push(Cursor.value);\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        if (That.checkForWhereConditionMatch(That.Query.Where, Cursor.value)) {\r\n                                            That.Results.push(Cursor.value);\r\n                                        }\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            return false;\r\n                        }\r\n\r\n                    }\r\n\r\n                    for (Column in this.Query.Where) {\r\n                        if (Array.isArray(this.Query.Where[Column])) {\r\n                            ConditionLength = this.Query.Where[Column].length;\r\n                            for (var i = 0; i < this.Query.Where[Column].length; i++) {\r\n                                var ExecutionStatus = executeInnerWhereLogic(Column, this.Query.Where[Column][i])\r\n                                if (ExecutionStatus == false) {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            executeInnerWhereLogic(Column, this.Query.Where[Column]);\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n                private checkForWhereConditionMatch(where, value) {\r\n                    var TempColumn;\r\n                    for (TempColumn in where) {\r\n                        if (Array.isArray(where[TempColumn])) {\r\n                            var i, Status = true;\r\n                            for (i = 0; i < TempColumn.length; i++) {\r\n                                if (where[TempColumn][i] == value[TempColumn]) {\r\n                                    Status = true;\r\n                                    break;\r\n                                }\r\n                                else {\r\n                                    Status = false;\r\n                                }\r\n                            };\r\n                            if (!Status) {\r\n                                return Status;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (where[TempColumn] != value[TempColumn]) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                private executeWhereUndefinedLogic = function () {\r\n                    var That: SelectLogic = this,\r\n                        CursorOpenRequest = this.ObjectStore.openCursor();\r\n\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var Cursor = (<any>e).target.result;\r\n                        if (Cursor) {\r\n                            That.Results.push(Cursor.value);\r\n                            (Cursor as any).continue();\r\n                        }\r\n                        else {\r\n                            That.onSuccessRequest();\r\n                        }\r\n                    }\r\n                    CursorOpenRequest.onerror = That.onErrorRequest;\r\n                }\r\n\r\n                constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                    super();\r\n                    this.Query = query;\r\n                    this.OnSuccess = onSuccess;\r\n                    this.OnError = onError;\r\n                    this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                    this.ObjectStore = this.Transaction.objectStore(query.From);\r\n\r\n                    if (query.WhereIn != undefined) {\r\n                        if (query.Where != undefined) {\r\n                            this.SendResultFlag = false;\r\n                            this.executeWhereLogic();\r\n                        }\r\n                        this.SendResultFlag = true;\r\n                        this.executeWhereInLogic();\r\n\r\n                    }\r\n                    else if (query.Where != undefined) {\r\n                        this.executeWhereLogic();\r\n                    }\r\n                    else {\r\n\r\n                        this.executeWhereUndefinedLogic();\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class UpdateLogic {\r\n                constructor(query: IUpdate, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        ErrorOccured: boolean = false,\r\n                        ErrorCount = 0,\r\n                        RowAffected = 0,\r\n                        Transaction: IDBTransaction = DbConnection.transaction([query.In], \"readwrite\"),\r\n                        ObjectStore: IDBObjectStore = Transaction.objectStore(query.In),\r\n                        onSuceessRequest = function (rowsAffected) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(rowsAffected);\r\n                            }\r\n                        },\r\n\r\n                        onErrorGetRequest = function (e) {\r\n                            if (ErrorCount == 1) {\r\n                                if (onError != null) {\r\n                                    onError((e as any).target.error);\r\n                                }\r\n                            }\r\n                        };\r\n                    (<any>Transaction).ontimeout = function () {\r\n                        console.log('transaction timed out');\r\n                    }\r\n                    if (query.Where == undefined) {\r\n                        var CursorOpenRequest = ObjectStore.openCursor();\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                for (var key in query.Set) {\r\n                                    Cursor.value[key] = query.Set[key];\r\n                                }\r\n                                Cursor.update(Cursor.value);\r\n                                ++RowAffected;\r\n                                (Cursor as any).continue();\r\n                            }\r\n                            else {\r\n                                onSuceessRequest(RowAffected);\r\n                            }\r\n\r\n                        }\r\n                        CursorOpenRequest.onerror = onErrorGetRequest;\r\n                    }\r\n                    else {\r\n                        var Column,\r\n                            ExecutionNo = 0,\r\n                            ConditionLength = Object.keys(query.Where).length;\r\n                        for (Column in query.Where) {\r\n                            if (!ErrorOccured) {\r\n                                if (ObjectStore.indexNames.contains(Column)) {\r\n                                    var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column]));\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                        if (Cursor) {\r\n                                            for (var key in query.Set) {\r\n                                                Cursor.value[key] = query.Set[key];\r\n                                            }\r\n                                            Cursor.update(Cursor.value);\r\n                                            ++RowAffected;\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            ++ExecutionNo;\r\n                                            if (ExecutionNo == query.Where.length) {\r\n                                                onSuceessRequest(RowAffected);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n\r\n                                    CursorOpenRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorGetRequest(e);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","import Table = JsStorage.Model.Table;\r\nimport Column = JsStorage.Model.Column;\r\nmodule JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export var DbConnection,\r\n                ActiveDataBase: DataBase;\r\n            export class MainLogic {\r\n                constructor(dataBase: DataBase) {\r\n                    ActiveDataBase = dataBase\r\n                }\r\n\r\n                openDb = function (objMain: Main, onSuccess: Function, onError: Function) {\r\n                    var ObjOpenDb = new OpenDbLogic(objMain, onSuccess, onError);\r\n                }\r\n\r\n                public closeDb = function (objMain: Main) {\r\n                    if (objMain.Status.ConStatus == ConnectionStatus.Connected) {\r\n                        DbConnection.close();\r\n                    }\r\n                }\r\n\r\n                public dropDb = function (name: string, onSuccess: Function, onError: Function) {\r\n                    var ObjDropDb = new DropDbLogic(name, onSuccess, onError);\r\n                }\r\n\r\n                public update = function (query: IUpdate, onSuccess: Function, onError: Function) {\r\n                    var ObjUpdate = new UpdateLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public insert = function (tableName: string, values, onSuccess: Function, onError: Function) {\r\n                    var ObjInsert = new InsertLogic(tableName, values, onSuccess, onError);\r\n                }\r\n\r\n                public delete = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                    var ObjDelete = new DeleteLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public select = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n                    if (Array.isArray(query.From)) {\r\n                        new SelectJoinLogic(query, true, onSuccess, onError);\r\n                    }\r\n                    else if (typeof query.From === 'object') {\r\n                        new SelectJoinLogic(query, false, onSuccess, onError);\r\n                    }\r\n                    else {\r\n                        new SelectLogic(query, onSuccess, onError);\r\n                    }\r\n                }\r\n\r\n                public createDb = function (objMain: Main, onSuccess: Function, onError: Function) {\r\n                    new CreateDbLogic(objMain, onSuccess, onError);\r\n                }\r\n\r\n                public clear = function (tableName: string, onSuccess: Function, onError: Function) {\r\n                    new ClearLogic(tableName, onSuccess, onError);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}","import DataBase = JsStorage.Model.DataBase;\r\nimport IDataBase = JsStorage.Model.IDataBase;\r\nmodule JsStorage {\r\n    export enum ConnectionStatus {\r\n        Connected = 1,\r\n        Closed = 2,\r\n        NotStarted = 3\r\n    }\r\n    export interface JsStorageStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n    export class Main {\r\n        DbType: DBType;\r\n        IndexDbObj: Business.IndexDb.MainLogic;\r\n        WebSqlObj: Business.WebSqlLogic;\r\n        Status: JsStorageStatus = <JsStorageStatus>{\r\n            ConStatus: ConnectionStatus.NotStarted,\r\n            LastError: \"\"\r\n        };\r\n        constructor() {\r\n            this.setDbType();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IDataBase} dataBase \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * @returns \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        createDb(dataBase: IDataBase, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                var Db = new DataBase(dataBase)\r\n                this.IndexDbObj = new Business.IndexDb.MainLogic(Db);\r\n                var DbVersion = Number(localStorage.getItem(dataBase.Name + 'Db_Version'));\r\n                this.IndexDbObj.createDb(this, onSuccess, onError);\r\n            }\r\n            else {\r\n                this.WebSqlObj = new Business.WebSqlLogic();\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        openDb(onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.openDb(this, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        closeDb(onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.closeDb(this);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        dropDb(name: string, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.dropDb(name.toLowerCase(), onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IQuery} query \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        select(query: ISelect, onSuccess: Function, onError: Function) {\r\n            query.From = query.From.toLowerCase();\r\n            if (this.Status.ConStatus == ConnectionStatus.Connected) {\r\n                query.From = query.From.toLowerCase();\r\n                if (this.DbType == DBType.IndexedDb) {\r\n                    this.IndexDbObj.select(query, onSuccess, onError);\r\n                }\r\n                else {\r\n\r\n                }\r\n            }\r\n            else if (this.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.select(query, onSuccess, onError);\r\n                }, 200);\r\n            }\r\n            else if (this.Status.ConStatus == ConnectionStatus.Closed) {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {string} table \r\n         * @param {any} value \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        insert(query: IInsert, onSuccess: Function, onError: Function) {\r\n            if (!Array.isArray(query.Values)) {\r\n                throw \"Value should be array :- supplied value is not array\";\r\n            }\r\n            else if (query.Values.length > 0) {\r\n                query.Into = query.Into.toLowerCase();\r\n                if (this.DbType == DBType.IndexedDb) {\r\n                    this.IndexDbObj.insert(query.Into, query.Values, onSuccess, onError);\r\n                }\r\n                else {\r\n\r\n                }\r\n            }\r\n            else {\r\n                if (onError != null) {\r\n                    onError(Business.UtilityLogic.getError(ErrorType.NoValueSupplied, true, null));\r\n                }\r\n            }\r\n        }\r\n\r\n        update(query: IUpdate, onSuccess: Function, onError: Function) {\r\n\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.update(query, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        delete(query: IDelete, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.delete(query, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n            * determine and set the DataBase Type\r\n            * \r\n            * \r\n            * @memberOf MainLogic\r\n            */\r\n        private setDbType = function () {\r\n            (window as any).indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                this.DbType = DBType.IndexedDb;\r\n                (window as any).IDBTransaction = (window as any).IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction;\r\n                (window as any).IDBKeyRange = (window as any).IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange\r\n            }\r\n            else if ((window as any).openDatabase) {\r\n                this.DbType = DBType.WebSql;\r\n            }\r\n            else {\r\n                throw 'Browser does not support Db Implementation';\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","\r\n/// <reference path=\"Business/CommonLogic.ts\" />\r\n/// <reference path=\"Business/UtilityLogic.ts\" />\r\n/// <reference path=\"Model/Column.ts\" />\r\n/// <reference path=\"Model/Table.ts\" />\r\n/// <reference path=\"Model/DataBase.ts\" />\r\n/// <reference path=\"Business/WebSqlLogic.ts\" />\r\n\r\n/// <reference path=\"Business/GateLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/CreateDbLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/DeleteLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/DropDbLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/InsertLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/OpenDbLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/BaseSelectLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/SelectJoinLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/SelectLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/UpdateLogic.ts\" />\r\n/// <reference path=\"Business/IndexDb/MainLogic.ts\" />\r\n\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n","module JsStorage {\r\n    export module Business {\r\n        export class DbHelperLogic {\r\n            and() {\r\n                return this;\r\n            }\r\n            or() {\r\n                return this;\r\n            }\r\n\r\n           \r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export module IndexDb {\r\n            export class ClearLogic {\r\n                constructor(tableName: string, onSuccess: Function, onError: Function) {\r\n                    var ObjectStore: IDBObjectStore = DbConnection.transaction([tableName], \"readwrite\").Transaction.objectStore(tableName)\r\n                        , ClearRequest = ObjectStore.clear();\r\n\r\n                    ClearRequest.onsuccess = function (e) {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n\r\n                    ClearRequest.onerror = function (e) {\r\n                        if (onError != null) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}