{"version":3,"file":"JsStorage.js","sourceRoot":"","sources":["../Script/Business/CommonLogic.ts","../Script/Model/Column.ts","../Script/Model/Table.ts","../Script/Model/DataBase.ts","../Script/Business/WebSqlLogic.ts","../Script/Business/IndexDbLogic.ts","../Script/Business/MainLogic.ts","../Script/index.ts","../Script/Business/DbHelperLogic.ts","../Script/Business/FilesCollection.ts","../Script/Business/UtilityLogic.ts"],"names":[],"mappings":"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","sourcesContent":["module JsStorage {\r\n\r\n    export enum DBType {\r\n        IndexedDb,\r\n        WebSql\r\n    };\r\n\r\n    export interface IQuery {\r\n        Table: string,\r\n        Where: Array<ICondition>\r\n    }\r\n\r\n    export interface IUpdate {\r\n        Table: string,\r\n        Set: Array<IValue>,\r\n        Where: Array<ICondition>\r\n    }\r\n\r\n    export interface IInsert {\r\n        Into:string,\r\n        Values:Array<IValue>\r\n    }\r\n\r\n    export interface IValue {\r\n        Column: string,\r\n        Value: string\r\n    }\r\n\r\n    export interface ICondition {\r\n        Column: string,\r\n        Value: string,\r\n        Op: string\r\n    }\r\n\r\n    export interface IError {\r\n        Name: string,\r\n        Value: string\r\n    }\r\n\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            Primarykey: boolean;\r\n        }\r\n        export class Column implements IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            Primarykey: boolean;\r\n\r\n            constructor(key: IColumn) {\r\n                if (key.Name != null) {\r\n                    this.Name = key.Name\r\n                }\r\n                else {\r\n                    throw \"Column Name is not defined\";\r\n                }\r\n                this.AutoIncrement = this.AutoIncrement == null ? false : this.AutoIncrement;\r\n                this.Primarykey = this.Primarykey == null ? false : this.Primarykey;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface ITable {\r\n            Name: string;\r\n            Columns: Array<IColumn>;\r\n            Version: number;\r\n        }\r\n        export class Table {\r\n            Name: string = \"\";\r\n            Columns: Array<Column> = [];\r\n            Version: number;\r\n\r\n            //internal Members\r\n            RequireDelete: boolean = false;\r\n            RequireCreation: boolean = false;\r\n            PrimaryKey: string = \"\";\r\n\r\n            constructor(table: ITable, dbName: string) {\r\n                this.Name = table.Name.toLowerCase();\r\n                this.Version = table.Version == undefined ? 1 : table.Version;\r\n                var That = this;\r\n                this.Columns.forEach(function (item) {\r\n                    That.Columns.push(new Column(item));\r\n                })\r\n\r\n                this.setRequireDelete();\r\n                this.setDbVersion(dbName);\r\n                this.setPrimaryKey();\r\n            }\r\n\r\n            //private methods\r\n\r\n            private setPrimaryKey() {\r\n                //this.Key = new Column();//\r\n                var That = this;\r\n                this.Columns.forEach(function (item) {\r\n                    if (item.Primarykey && That.PrimaryKey.length == 0) {\r\n                        That.PrimaryKey = item.Name;\r\n                        localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"true\");\r\n                    }\r\n                    else if (item.Primarykey && That.PrimaryKey.length > 0) {\r\n                        localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"\");\r\n                        throw \"Multiple primary key are not allowed\";\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            private setRequireDelete() {\r\n                var TableVersion = localStorage.getItem(\"JsStorage_\" + this.Name);\r\n                if (TableVersion == null || localStorage.getItem('JsStorage_Db_Version') == null) {\r\n                    this.RequireCreation = true;\r\n                }\r\n                else if (TableVersion != this.Version.toString()) {\r\n                    this.RequireDelete = true;\r\n                }\r\n                this.Version = this.Version == null ? 1 : this.Version;\r\n\r\n            }\r\n\r\n            private setDbVersion(dbName: string) {\r\n                if (this.Version == null) {\r\n                    localStorage.setItem(dbName + 'Db_Version', '1');\r\n                }\r\n                else if (this.Version > Number(localStorage.getItem(dbName + 'Db_Version'))) {\r\n                    localStorage.setItem(dbName + 'Db_Version', this.Version.toString());\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Model {\r\n        export interface IDataBase {\r\n            Name: string;\r\n            Tables: Array<ITable>;\r\n        }\r\n        export class DataBase {\r\n            Name: string;\r\n            Tables: Array<Table> = [];\r\n           \r\n            constructor(dataBase: IDataBase) {\r\n                this.Name = dataBase.Name.toLowerCase();\r\n                var That = this;\r\n                dataBase.Tables.forEach(function (item) {\r\n                    That.Tables.push(new Table(item, That.Name));\r\n                })\r\n            }\r\n        }\r\n    }\r\n}","module JsStorage {\r\n    export module Business {\r\n        export class WebSqlLogic {\r\n        }\r\n    }\r\n}","import Table = JsStorage.Model.Table;\r\nimport Column = JsStorage.Model.Column;\r\nmodule JsStorage {\r\n    export module Business {\r\n        export class IndexDbLogic {\r\n            DbConnection;\r\n            ActiveDataBase: DataBase;\r\n            constructor(dataBase: DataBase) {\r\n                this.ActiveDataBase = dataBase\r\n            }\r\n\r\n            openDb(objMain: Main, onSuccess: Function, onError: Function) {\r\n                if (objMain.Status.ConStatus != ConnectionStatus.Connected) {\r\n                    if (this.ActiveDataBase.Name.length > 0) {\r\n                        var DbVersion = Number(localStorage.getItem(this.ActiveDataBase.Name + 'Db_Version')),\r\n                            DbRequest = window.indexedDB.open(this.ActiveDataBase.Name, DbVersion),\r\n                            That = this;\r\n                        DbRequest.onerror = function (event) {\r\n                            if (onError != null) {\r\n                                onError((event as any).target.error);\r\n                            }\r\n                        };\r\n\r\n                        DbRequest.onsuccess = function (event) {\r\n                            objMain.Status.ConStatus = ConnectionStatus.Connected;\r\n                            That.DbConnection = DbRequest.result;\r\n                            That.DbConnection.onclose = function () {\r\n                                objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                                objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                            }\r\n\r\n                            That.DbConnection.onerror = function (e) {\r\n\r\n                            }\r\n\r\n                            That.DbConnection.onabort = function (e) {\r\n                                objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                                objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                            }\r\n\r\n                            if (onSuccess != null) {\r\n                                onSuccess(objMain);\r\n                            }\r\n                        };\r\n                    }\r\n                    else {\r\n                        if (onError != null) {\r\n                            onError(<IError>{\r\n                                Name: \"DbNotFound\",\r\n                                Value: \"DataBase name is not found, please first initiate the db using createDb\"\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                }\r\n            }\r\n\r\n            public closeDb(objMain: Main) {\r\n                if (objMain.Status.ConStatus == ConnectionStatus.Connected) {\r\n                    this.DbConnection.close();\r\n                }\r\n            }\r\n\r\n            public createDb = function (objMain: Main, onSuccess: Function, onError: Function) {\r\n                var That = this,\r\n                    DbVersion = Number(localStorage.getItem(this.ActiveDataBase.Name + 'Db_Version')),\r\n                    DbRequest = window.indexedDB.open(this.ActiveDataBase.Name, DbVersion);\r\n\r\n                DbRequest.onerror = function (event) {\r\n                    if (onError != null) {\r\n                        onError((event as any).target.error);\r\n                    }\r\n                };\r\n\r\n                DbRequest.onsuccess = function (event) {\r\n                    objMain.Status.ConStatus = ConnectionStatus.Connected;\r\n                    That.DbConnection = DbRequest.result;\r\n                    That.DbConnection = DbRequest.result;\r\n                    That.DbConnection.onclose = function () {\r\n                        objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                        objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                    }\r\n\r\n                    That.DbConnection.onerror = function (e) {\r\n\r\n                    }\r\n\r\n                    That.DbConnection.onabort = function (e) {\r\n                        objMain.Status.ConStatus = ConnectionStatus.Closed;\r\n                        objMain.Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                    }\r\n\r\n                    if (onSuccess != null) {\r\n                        onSuccess(objMain);\r\n                    }\r\n                };\r\n\r\n                DbRequest.onupgradeneeded = function (event) {\r\n                    var db = (<any>event).target.result;\r\n                    That.ActiveDataBase.Tables.forEach(function (item) {\r\n                        if (item.RequireDelete) {\r\n                            // Delete the old datastore.    \r\n                            if (db.objectStoreNames.contains(item.Name)) {\r\n                                db.deleteObjectStore(item.Name);\r\n                            }\r\n                            That.createObjectStore(db, item);\r\n                        }\r\n                        else if (item.RequireCreation) {\r\n                            That.createObjectStore(db, item);\r\n                        }\r\n                    })\r\n\r\n                }\r\n            }\r\n\r\n            public get(query: IQuery, onSuccess: Function, onError: Function) {\r\n                var That = this,\r\n                    ErrorOccured: boolean = false,\r\n                    ErrorCount = 0,\r\n                    Transaction: IDBTransaction = That.DbConnection.transaction([query.Table.toLowerCase()], \"readonly\"),\r\n                    ObjectStore: IDBObjectStore = Transaction.objectStore(query.Table);\r\n                if (query.Where == undefined) {\r\n                    var CursorOpenRequest = ObjectStore.openCursor(),\r\n                        Results = [];\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var TempResult = (<any>e).target.result;\r\n                        console.log(TempResult);\r\n                        if (TempResult) {\r\n                            Results.push(TempResult.value);\r\n                            (TempResult as any).continue();\r\n                        }\r\n                        else {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(Results);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    CursorOpenRequest.onerror = onErrorGetRequest;\r\n                }\r\n                else {\r\n                    query.Where.every(function (item, index) {\r\n                        if (!ErrorOccured) {\r\n                            if (item.Column == undefined) {\r\n                                throw \"Column is undefined in Case for tableName:\" + query.Table;\r\n                            }\r\n                            else if (item.Value == undefined) {\r\n                                throw \"Column value is undefined in Case for Column Name:\" + item.Column + \"for tableName:\" + query.Table;\r\n                            }\r\n                            else {\r\n                                if (this.isPrimaryKey(query.Table, item)) {\r\n                                    var GetRequest = ObjectStore.get(item.Value);\r\n                                    GetRequest.onsuccess = onSuceessGetRequest;\r\n                                    GetRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorGetRequest(e);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    var GetRequest = ObjectStore.index(item.Column).get(item.Value);\r\n                                    GetRequest.onsuccess = onSuceessGetRequest;\r\n                                    GetRequest.onerror = onErrorGetRequest;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        return !ErrorOccured;\r\n                    });\r\n\r\n                }\r\n\r\n                var onSuceessGetRequest = function (event) {\r\n                    var Result = (<any>event).target.result;\r\n                    if (onSuccess != null) {\r\n                        onSuccess(Result);\r\n                    }\r\n                }\r\n\r\n                var onErrorGetRequest = function (e) {\r\n                    if (ErrorCount == 1) {\r\n                        if (onError != null) {\r\n                            onError((e as any).target.error);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            public delete(query: IQuery, onSuccess: Function, onError: Function) {\r\n                var That = this,\r\n                    Transaction: IDBTransaction = That.DbConnection.transaction([query.Table.toLowerCase()], \"readonly\"),\r\n                    ObjectStore: IDBObjectStore = Transaction.objectStore(query.Table);\r\n                if (query.Where == undefined) {\r\n                    var CursorOpenRequest = ObjectStore.openCursor(),\r\n                        Results = [];\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var TempResult = (<any>e).target.result;\r\n                        console.log(TempResult);\r\n                        if (TempResult) {\r\n                            Results.push(TempResult.value);\r\n                            (TempResult as any).continue();\r\n                        }\r\n                        else {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(Results);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    CursorOpenRequest.onerror = onErrorGetRequest;\r\n                }\r\n                else {\r\n                    // if (query.Case.Column == undefined) {\r\n                    //     throw \"Column is undefined in Case for tableName:\" + query.Table;\r\n                    // }\r\n                    // else if (query.Case.Value == undefined) {\r\n                    //     throw \"Column value is undefined in Case for Column Name:\" + query.Case.Column + \"for tableName:\" + query.Table;\r\n                    // }\r\n                    // else {\r\n                    //     if (this.isPrimaryKey(query)) {\r\n                    //         var GetRequest = ObjectStore.delete(query.Case.Value);\r\n                    //         GetRequest.onsuccess = onSuceessGetRequest;\r\n                    //         GetRequest.onerror = onErrorGetRequest;\r\n                    //     }\r\n                    //     else {\r\n                    //         var GetRequest = ObjectStore.index(query.Case.Column).get(query.Case.Value);\r\n\r\n                    //         GetRequest.onsuccess = onSuceessGetRequest;\r\n                    //         GetRequest.onerror = onErrorGetRequest;\r\n                    //     }\r\n                    // }\r\n                }\r\n\r\n                var onSuceessGetRequest = function (event) {\r\n                    var Result = (<any>event).target.result;\r\n                    if (onSuccess != null) {\r\n                        onSuccess(Result);\r\n                    }\r\n                }\r\n\r\n                var onErrorGetRequest = function (e) {\r\n                    if (onError != null) {\r\n                        onError((e as any).target.error);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            public update(query: IUpdate, onSuccess: Function, onError: Function) {\r\n                var That = this,\r\n                    ErrorOccured: boolean = false,\r\n                    ErrorCount = 0,\r\n                    RowAffected = 0,\r\n                    Transaction: IDBTransaction = That.DbConnection.transaction([query.Table.toLowerCase()], \"readonly\"),\r\n                    ObjectStore: IDBObjectStore = Transaction.objectStore(query.Table);\r\n                if (query.Where == undefined) {\r\n                    var CursorOpenRequest = ObjectStore.openCursor();\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var Cursor = (<any>e).target.result;\r\n                        if (Cursor) {\r\n                            query.Set.forEach(function (item) {\r\n                                Cursor.value[item.Column] = item.Value;\r\n                            });\r\n                            (Cursor as any).continue();\r\n                        }\r\n                        else {\r\n                            onSuceessRequest(RowAffected);\r\n                        }\r\n\r\n                    }\r\n                    CursorOpenRequest.onerror = onErrorGetRequest;\r\n                }\r\n                else {\r\n                    query.Where.every(function (item, index) {\r\n                        if (!ErrorOccured) {\r\n                            if (item.Column == undefined) {\r\n                                throw \"Column is undefined in Case for tableName:\" + query.Table;\r\n                            }\r\n                            else if (item.Value == undefined) {\r\n                                throw \"Column value is undefined in Case for Column Name:\" + item.Column + \"for tableName:\" + query.Table;\r\n                            }\r\n                            else {\r\n                                if (this.isPrimaryKey(query.Table, item)) {\r\n                                    var GetRequest = ObjectStore.put(item.Value);\r\n                                    GetRequest.onsuccess = function () {\r\n                                        onSuceessRequest(1);\r\n                                    }\r\n                                    GetRequest.onerror = function (e) {\r\n                                        ErrorOccured = true; ++ErrorCount;\r\n                                        onErrorGetRequest(e);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    // var GetRequest = ObjectStore.index(item.Column);\r\n                                    var CursorOpenRequest = ObjectStore.index(item.Column).openCursor(IDBKeyRange.only(item.Value)),\r\n                                        ExecutionNo = 0;\r\n\r\n                                    CursorOpenRequest.onsuccess = function (e) {\r\n                                        var Cursor = (<any>e).target.result;\r\n\r\n                                        if (Cursor) {\r\n                                            // if (Cursor.value.hasOwnProperty(item.Column)) {\r\n\r\n                                            // }\r\n                                            // else\r\n                                            // {\r\n                                            //     onErrorGetRequest(<Error>{\r\n                                            //         Name:\"ColumnNotExist\",\r\n                                            //          Value:\"The column\"+ + \"does not exist\"\r\n                                            //     })\r\n                                            // }\r\n                                            Cursor.value[item.Column] = item.Value;\r\n                                            ++RowAffected;\r\n                                            Cursor.Continue();\r\n                                        }\r\n                                        else {\r\n                                            ++ExecutionNo;\r\n                                            if (ExecutionNo == query.Where.length) {\r\n                                                onSuceessRequest(RowAffected);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                                CursorOpenRequest.onerror = function (e) {\r\n                                    ErrorOccured = true; ++ErrorCount;\r\n                                    onErrorGetRequest(e);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        return !ErrorOccured;\r\n                    });\r\n\r\n                }\r\n\r\n                var onSuceessRequest = function (rowsAffected) {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(rowsAffected);\r\n                    }\r\n                }\r\n\r\n                var onErrorGetRequest = function (e) {\r\n                    if (ErrorCount == 1) {\r\n                        if (onError != null) {\r\n                            onError((e as any).target.error);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n            public and() {\r\n                return this;\r\n            }\r\n\r\n            public insert(tableName: string, values, onSuccess: Function, onError: Function) {\r\n                try {\r\n                    tableName = tableName.toLowerCase();\r\n                    var TotalRowsAffected = 0,\r\n                        Store: IDBObjectStore = this.DbConnection.transaction([tableName], \"readwrite\").objectStore(tableName);\r\n                    if (!Array.isArray(values)) {\r\n                        throw \"Value should be array :- supplied value is not array\";\r\n                    }\r\n                    else if (values.length > 0) {\r\n                        values.forEach(function (value) {\r\n                            var AddResult = Store.add(value);\r\n                            AddResult.onerror = function (e) {\r\n                                if (onError != null) {\r\n                                    onError((e as any).target.error, TotalRowsAffected);\r\n                                }\r\n                            }\r\n                            AddResult.onsuccess = function (e) {\r\n                                ++TotalRowsAffected\r\n                                if (values.length == TotalRowsAffected) {\r\n                                    if (onSuccess != null) {\r\n                                        onSuccess(TotalRowsAffected);\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n\r\n                    }\r\n                    else {\r\n                        throw \"no value supplied\";\r\n                    }\r\n\r\n\r\n                }\r\n                catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n\r\n\r\n            private isPrimaryKey(tablename: string, condition: ICondition) {\r\n                return localStorage.getItem(\"JsStorage_\" + tablename + \"_\" + condition.Column).toLowerCase() == \"true\" ? true : false\r\n\r\n            }\r\n\r\n            private createObjectStore(dbConnection, item: Table) {\r\n                try {\r\n                    if (item.PrimaryKey.length > 0) {\r\n                        var Store = dbConnection.createObjectStore(item.Name, {\r\n                            keyPath: item.PrimaryKey\r\n                        });\r\n                        item.Columns.forEach(function (column: Column) {\r\n                            if (!column.Primarykey) {\r\n                                Store.createIndex(item.Name, item.Name, { unique: false });\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        var store = dbConnection.createObjectStore(item.Name, {\r\n                            autoIncrement: true\r\n                        });\r\n                        item.Columns.forEach(function (column: Column) {\r\n                            Store.createIndex(item.Name, item.Name, { unique: false });\r\n                        })\r\n                    }\r\n                    localStorage.setItem(\"JsStorage_\" + item.Name, item.Version.toString());\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}","import DataBase = JsStorage.Model.DataBase;\r\nimport IDataBase = JsStorage.Model.IDataBase;\r\nmodule JsStorage {\r\n    export enum ConnectionStatus {\r\n        Connected = 1,\r\n        Closed = 2,\r\n        NotStarted = 3\r\n    }\r\n    export interface JsStorageStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n    export class Main {\r\n        DbType: DBType;\r\n        IndexDbObj: Business.IndexDbLogic;\r\n        WebSqlObj: Business.WebSqlLogic;\r\n        Status: JsStorageStatus = <JsStorageStatus>{\r\n            ConStatus: ConnectionStatus.NotStarted,\r\n            LastError: \"\"\r\n        };\r\n        constructor() {\r\n            this.setDbType();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IDataBase} dataBase \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * @returns \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        createDb(dataBase: IDataBase, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                var Db = new DataBase(dataBase)\r\n                this.IndexDbObj = new Business.IndexDbLogic(Db);\r\n                var DbVersion = Number(localStorage.getItem(dataBase.Name + 'Db_Version'));\r\n                this.IndexDbObj.createDb(this, onSuccess, onError);\r\n            }\r\n            else {\r\n                this.WebSqlObj = new Business.WebSqlLogic();\r\n            }\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        openDb(onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.openDb(this, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        closeDb(onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.closeDb(this);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IQuery} query \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        get(query: IQuery, onSuccess: Function, onError: Function) {\r\n            if (this.Status.ConStatus == ConnectionStatus.Connected) {\r\n                if (this.DbType == DBType.IndexedDb) {\r\n                    this.IndexDbObj.get(query, onSuccess, onError);\r\n                }\r\n                else {\r\n\r\n                }\r\n            }\r\n            else if (this.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.get(query, onSuccess, onError);\r\n                }, 200);\r\n            }\r\n            else if (this.Status.ConStatus == ConnectionStatus.Closed) {\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {string} table \r\n         * @param {any} value \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        insert(query: IInsert, onSuccess: Function, onError: Function) {\r\n            if (this.DbType == DBType.IndexedDb) {\r\n                this.IndexDbObj.insert(query.Into, query.Values, onSuccess, onError);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        update(query: IQuery, onSuccess: Function, onError: Function) {\r\n\r\n        }\r\n\r\n        delete() {\r\n\r\n        }\r\n\r\n        /**\r\n            * determine and set the DataBase Type\r\n            * \r\n            * \r\n            * @memberOf MainLogic\r\n            */\r\n        private setDbType = function () {\r\n            (window as any).indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                this.DbType = DBType.IndexedDb;\r\n                (window as any).IDBTransaction = (window as any).IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction;\r\n                (window as any).IDBKeyRange = (window as any).IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange\r\n            }\r\n            else if ((window as any).openDatabase) {\r\n                this.DbType = DBType.WebSql;\r\n            }\r\n            else {\r\n                throw 'Browser does not support Db Implementation';\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","\r\n/// <reference path=\"Business/CommonLogic.ts\" />\r\n/// <reference path=\"Model/Column.ts\" />\r\n/// <reference path=\"Model/Table.ts\" />\r\n/// <reference path=\"Model/DataBase.ts\" />\r\n/// <reference path=\"Business/WebSqlLogic.ts\" />\r\n\r\n/// <reference path=\"Business/IndexDbLogic.ts\" />\r\n\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n","module JsStorage {\r\n    export module Business {\r\n        export class DbHelperLogic {\r\n            and() {\r\n                return this;\r\n            }\r\n            or() {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"CommonLogic.ts\" />\r\n","module JsStorage {\r\n    enum DbType {\r\n        IndexedDb,\r\n        WebSql\r\n    };\r\n}"]}