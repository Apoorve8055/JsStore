{"version":3,"file":"JsStorage.js","sourceRoot":"","sources":["../Script/CommonLogic.ts","../Script/DbHelperLogic.ts","../Script/UtilityLogic.ts","../Script/KeyStores/Model/Column.ts","../Script/KeyStores/Model/Table.ts","../Script/KeyStores/Model/DataBase.ts","../Script/KeyStores/Business/CreateDbLogic.ts","../Script/KeyStores/Business/RemoveLogic.ts","../Script/KeyStores/Business/SetLogic.ts","../Script/KeyStores/Business/OpenDbLogic.ts","../Script/KeyStores/Business/BaseGetLogic.ts","../Script/KeyStores/Business/GetLogic.ts","../Script/KeyStores/Business/MainLogic.ts","../Script/IndexDb/Model/Column.ts","../Script/IndexDb/Model/Table.ts","../Script/IndexDb/Model/DataBase.ts","../Script/IndexDb/Business/CreateDbLogic.ts","../Script/IndexDb/Business/DeleteLogic.ts","../Script/IndexDb/Business/DropDbLogic.ts","../Script/IndexDb/Business/InsertLogic.ts","../Script/IndexDb/Business/OpenDbLogic.ts","../Script/IndexDb/Business/BaseSelectLogic.ts","../Script/IndexDb/Business/SelectJoinLogic.ts","../Script/IndexDb/Business/SelectLogic.ts","../Script/IndexDb/Business/UpdateLogic.ts","../Script/IndexDb/Business/ClearLogic.ts","../Script/IndexDb/Business/MainLogic.ts","../Script/KeyStoreInstance.ts","../Script/JsStoreInstance.ts","../Script/index.ts"],"names":[],"mappings":"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","sourcesContent":["module JsStore {\r\n\r\n    export enum ErrorType {\r\n        UndefinedColumn,\r\n        UndefinedValue,\r\n        UndefinedColumnName,\r\n        UndefinedColumnValue,\r\n        NotArray,\r\n        NoValueSupplied,\r\n        ColumnNotExist,\r\n        InvalidOp,\r\n        NullValue,\r\n        BadDataType,\r\n        NextJoinNotExist,\r\n        TableNotExist\r\n    }\r\n\r\n    export interface ISelect {\r\n        From: any,\r\n        Where: any,\r\n        WhereIn: Array<IWhereIn>,\r\n        Skip: number,\r\n        Limit: number\r\n    }\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any\r\n    }\r\n\r\n    export interface IWhereIn {\r\n        Column: string,\r\n        Value,\r\n        Start,\r\n        Op,\r\n        End\r\n    }\r\n\r\n    export interface IUpdate {\r\n        In: string,\r\n\r\n        /**\r\n         * A Json Object containing the update values\r\n         * \r\n         * @type {*}\r\n         * @memberOf IUpdate\r\n         */\r\n        Set: any,\r\n        Where: any\r\n    }\r\n\r\n    export interface IInsert {\r\n        Into: string,\r\n        Values: Array<IValue>,\r\n        Return: boolean\r\n    }\r\n\r\n    export interface IValue {\r\n        Column: string,\r\n        Value: string\r\n    }\r\n\r\n    export interface ICondition {\r\n        Column: string,\r\n        Value: string,\r\n        Op: string\r\n    }\r\n\r\n    export interface ITableJoin {\r\n        Column: string,\r\n        Table: string,\r\n        Where: any,\r\n        WhereIn: Array<IWhereIn>,\r\n        JoinType: string,\r\n        NextJoin: INextJoin\r\n    }\r\n\r\n    export interface ISelectJoin {\r\n        From: IJoin, //IJoin\r\n    }\r\n\r\n    export interface IJoin {\r\n        Table1: ITableJoin,\r\n        Join: string, //inner,left,right,outer\r\n        Table2: ITableJoin,\r\n        NextJoin: INextJoin\r\n    }\r\n\r\n    export interface INextJoin {\r\n        Table: string,\r\n        Column: string\r\n    }\r\n\r\n    export enum ConnectionStatus {\r\n        Connected = 1,\r\n        Closed = 2,\r\n        NotStarted = 3\r\n    }\r\n\r\n    export interface JsStoreStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n\r\n}","module JsStore {\r\n    export class DbHelperLogic {\r\n\r\n\r\n        and() {\r\n            return this;\r\n        }\r\n\r\n        or() {\r\n            return this;\r\n        }\r\n\r\n        doJoin = function (type: string, column1, data1, column2, data2) {\r\n            switch (type) {\r\n                case 'inner': return data1[column1] == data2[column2];\r\n            }\r\n        }\r\n\r\n        doInner = function (query1: ITableJoin, data1, query2: ITableJoin, data2) {\r\n            if (data1[query1.Column] == data2[query2.Column]) {\r\n                this.Results.push([query1.Table] = data1, [query2.Table] = data2);\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export interface IError {\r\n        Name: string,\r\n        Value: string\r\n    }\r\n    export class UtilityLogic {\r\n        static getError(errorType: ErrorType, logError: boolean = false, errorDetail: any) {\r\n            var Error: IError = {\r\n                Name: ErrorType[errorType],\r\n                Value: ''\r\n            };\r\n            switch (errorType) {\r\n                case ErrorType.NotArray: Error.Value = \"Supplied value is not an array\"; break;\r\n                case ErrorType.UndefinedColumn: Error.Value = \"Column is undefined in Where\"; break;\r\n                case ErrorType.UndefinedValue: Error.Value = \"Value is undefined in Where\"; break;\r\n                case ErrorType.UndefinedColumnName: Error.Value = \"Column name is undefined\"; break;\r\n                case ErrorType.UndefinedColumnValue: Error.Value = \"Column value is undefined\"; break;\r\n                case ErrorType.NoValueSupplied: Error.Value = \"No value supplied\"; break;\r\n                case ErrorType.InvalidOp: Error.Value = \"Invalid Op Value '\" + errorDetail['Op'] + \"'\"; break;\r\n                case ErrorType.ColumnNotExist: Error.Value = \"Column '\" + errorDetail['ColumnName'] + \"' does not exist\";\r\n                    break;\r\n                case ErrorType.NullValue: Error.Value = \"Null value is not allowed for column '\" + errorDetail['ColumnName'] + \"'\";\r\n                    break;\r\n                case ErrorType.BadDataType: Error.Value = \"Supplied value for column '\" + errorDetail['ColumnName'] + \"' does not have valid type\";\r\n                    break;\r\n                case ErrorType.NextJoinNotExist: Error.Value = \"Next join details not supplied\";\r\n                    break;\r\n                case ErrorType.TableNotExist: Error.Value = \"Table '\" + errorDetail['TableName'] + \"' does not exist\";;\r\n                    break;\r\n                default: console.warn('the error type is not defined');\r\n            }\r\n            if (logError) {\r\n                console.warn(\"JsStorage Error :- \" + Error.Value);\r\n            }\r\n            return Error;\r\n        }\r\n\r\n        static convertObjectintoLowerCase(obj: any) {\r\n\r\n            var keys = Object.keys(obj);\r\n            var n = keys.length;\r\n            while (n--) {\r\n                var key = keys[n];\r\n                obj[key.toLowerCase()] = obj[key]\r\n                delete obj[key]\r\n            }\r\n        }\r\n\r\n        /**\r\n         * determine and set the DataBase Type\r\n         * \r\n         * \r\n         * @memberOf MainLogic\r\n         */\r\n        static setDbType = function () {\r\n            (window as any).indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                (window as any).IDBTransaction = (window as any).IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction;\r\n                (window as any).IDBKeyRange = (window as any).IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","module JsStore {\r\n    export module KeyStores {\r\n        export module Model {\r\n            export interface IColumn {\r\n                Name: string;\r\n                AutoIncrement: boolean;\r\n                PrimaryKey: boolean;\r\n                Unique: boolean;\r\n                CurrentDate: boolean;\r\n                NotNull: boolean;\r\n                DataType: string;\r\n            }\r\n\r\n            export class Column implements IColumn {\r\n                Name: string;\r\n                AutoIncrement: boolean;\r\n                PrimaryKey: boolean;\r\n                Unique: boolean;\r\n                CurrentDate: boolean;\r\n                NotNull: boolean;\r\n                DataType: string;\r\n                Searchable: boolean;\r\n\r\n                constructor(key: IColumn, tableName: string) {\r\n                    if (key.Name != null) {\r\n                        this.Name = key.Name;\r\n                    }\r\n                    else {\r\n                        throw \"Column Name is not defined for table:\" + tableName;\r\n                    }\r\n                    this.AutoIncrement = key.AutoIncrement != null ? key.AutoIncrement : false;\r\n                    this.PrimaryKey = key.PrimaryKey != null ? key.PrimaryKey : false;\r\n                    this.Unique = key.Unique != null ? key.Unique : false;\r\n                    this.CurrentDate = key.CurrentDate != null ? key.CurrentDate : false;\r\n                    this.NotNull = key.NotNull != null ? key.NotNull : false;\r\n                    this.DataType = key.DataType != null ? key.DataType : '';\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Model {\r\n            export interface ITable {\r\n                Name: string;\r\n                Columns: Array<IColumn>;\r\n                Version: number;\r\n            }\r\n            export class Table {\r\n                Name: string = \"\";\r\n                Columns: Array<Column> = [];\r\n                Version: number;\r\n\r\n                //internal Members\r\n                RequireDelete: boolean = false;\r\n                RequireCreation: boolean = false;\r\n                PrimaryKey: string = \"\";\r\n\r\n                constructor(table: ITable, dbName: string) {\r\n                    this.Name = table.Name;\r\n                    this.Version = table.Version == undefined ? 1 : table.Version;\r\n                    var That = this;\r\n                    table.Columns.forEach(function (item) {\r\n                        That.Columns.push(new Column(item, table.Name));\r\n                    })\r\n\r\n                    this.setRequireDelete(dbName);\r\n                    this.setPrimaryKey();\r\n                }\r\n\r\n                //private methods\r\n\r\n                private setPrimaryKey() {\r\n                    //this.Key = new Column();//\r\n                    var That = this,\r\n                        Length = this.Columns.length;\r\n                    this.Columns.forEach(function (item, index) {\r\n                        if (item.PrimaryKey && That.PrimaryKey.length == 0) {\r\n                            That.PrimaryKey = item.Name;\r\n                        }\r\n                    })\r\n\r\n                }\r\n\r\n                private setRequireDelete(dbName: string) {\r\n                    this.RequireDelete = true;\r\n                }\r\n\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Model {\r\n            export interface IDataBase {\r\n                Name: string;\r\n                Tables: Array<ITable>;\r\n            }\r\n            export class DataBase {\r\n                Name: string;\r\n                Tables: Array<Table> = [];\r\n\r\n                constructor(dataBase: IDataBase) {\r\n                    var That = this;\r\n                    this.Name = dataBase.Name;\r\n                    dataBase.Tables.forEach(function (item) {\r\n                        That.Tables.push(new Table(item, That.Name));\r\n                    })\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Business {\r\n\r\n            export class CreateDbLogic {\r\n                constructor() {\r\n                    var That = this,\r\n                        DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion);\r\n\r\n                    DbRequest.onerror = function (event) {\r\n                        console.error((event as any).target.error);\r\n                    };\r\n\r\n                    DbRequest.onsuccess = function (event) {\r\n                        Status.ConStatus = ConnectionStatus.Connected;\r\n                        DbConnection = DbRequest.result;\r\n                        DbConnection.onclose = function () {\r\n                            Status.ConStatus = ConnectionStatus.Closed;\r\n                            Status.LastError = \"Connection Closed\";\r\n                        }\r\n\r\n                        DbConnection.onversionchange = function (e) {\r\n                            if (e.newVersion === null) { // An attempt is made to delete the db\r\n                                e.target.close(); // Manually close our connection to the db\r\n                            }\r\n                        };\r\n\r\n                        DbConnection.onerror = function (e) {\r\n                            Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                        }\r\n\r\n                        DbConnection.onabort = function (e) {\r\n                            Status.ConStatus = ConnectionStatus.Closed;\r\n                            Status.LastError = \"Connection aborted\";\r\n                        }\r\n                    };\r\n\r\n                    DbRequest.onupgradeneeded = function (event) {\r\n                        var db = (<any>event).target.result;\r\n                        ActiveDataBase.Tables.forEach(function (item) {\r\n                            if (item.RequireDelete) {\r\n                                // Delete the old datastore.    \r\n                                if (db.objectStoreNames.contains(item.Name)) {\r\n                                    db.deleteObjectStore(item.Name);\r\n                                }\r\n                                createObjectStore(db, item);\r\n                            }\r\n                            else if (item.RequireCreation) {\r\n                                createObjectStore(db, item);\r\n                            }\r\n                        })\r\n\r\n                    }\r\n\r\n                    var createObjectStore = function (dbConnection, item: KeyStoreModel.Table) {\r\n                        try {\r\n                            if (item.PrimaryKey.length > 0) {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    keyPath: item.PrimaryKey\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    if (column.PrimaryKey) {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                    }\r\n                                    else {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    autoIncrement: true\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    if (column.Unique) {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                    } else {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Business {\r\n            export class RemoveLogic {\r\n                constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n\r\n                    var That = this,\r\n                        Transaction: IDBTransaction = DbConnection.transaction([query.From], \"readwrite\"),\r\n                        ObjectStore: IDBObjectStore = Transaction.objectStore(query.From),\r\n                        ErrorOccured: boolean = false,\r\n                        ErrorCount = 0,\r\n                        RowAffected = 0,\r\n                        onErrorGetRequest = function (e) {\r\n                            ++ErrorCount;\r\n                            if (onError != null && this.ErrorCount == 1) {\r\n                                onError((e as any).target.error);\r\n                            }\r\n                            console.error(e);\r\n                        };\r\n\r\n                    Transaction.oncomplete = function () {\r\n                        if (onSuccess != null) {\r\n                            onSuccess(RowAffected);\r\n                        }\r\n                    }\r\n\r\n                    Transaction.onerror = onErrorGetRequest;\r\n\r\n                    var Column,\r\n                        ExecutionNo = 0,\r\n                        ConditionLength = Object.keys(query.Where).length;\r\n                    for (Column in query.Where) {\r\n                        if (!ErrorOccured) {\r\n                            var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column])),\r\n                                ExecutionNo = 0;\r\n\r\n                            CursorOpenRequest.onerror = function (e) {\r\n                                ErrorOccured = true;\r\n                                onErrorGetRequest(e);\r\n                            };\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n\r\n                                if (Cursor) {\r\n                                    Cursor.delete();\r\n                                    ++RowAffected;\r\n                                    Cursor.continue();\r\n                                }\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Business {\r\n            export class SetLogic {\r\n                Store: IDBObjectStore;\r\n                OnSuccess: Function;\r\n                OnError: Function;\r\n                ErrorOccured: boolean = false;\r\n                ErrorCount = 0;\r\n                Error: IError;\r\n\r\n                public onErrorRequest = function (e, customError = false) {\r\n                    ++this.ErrorCount;\r\n                    if (this.ErrorCount == 1) {\r\n                        if (this.OnError != null) {\r\n                            if (!customError) {\r\n                                this.OnError((e as any).target.error, this.TotalRowsAffected);\r\n                            }\r\n                            else {\r\n                                this.OnError(e, this.TotalRowsAffected);\r\n                            }\r\n                        }\r\n                    }\r\n                    console.error(e);\r\n                }\r\n\r\n                constructor(tableName: string, value, isReturn, onSuccess: Function, onError: Function) {\r\n                    try {\r\n                        this.OnSuccess = onSuccess;\r\n                        this.OnError = onError;\r\n                        var That = this,\r\n                            Updated = false;\r\n\r\n                        var UpdateIfExist = function () {\r\n                            var Transaction = DbConnection.transaction([tableName], \"readwrite\");\r\n                            That.Store = Transaction.objectStore(tableName);\r\n                            Transaction.oncomplete = function (e) {\r\n                                if (Updated) {\r\n                                    if (onSuccess != null) {\r\n                                        onSuccess();\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    SetData();\r\n                                }\r\n                            };\r\n                            var CursorOpenRequest = That.Store.index('Key').openCursor(IDBKeyRange.only(value['Key']));\r\n\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    Updated = true;\r\n                                    Cursor.value['Value'] = value['Value'];\r\n                                    Cursor.update(Cursor.value);\r\n                                }\r\n                            }\r\n\r\n                            CursorOpenRequest.onerror = function (e) {\r\n                                That.ErrorOccured = true;\r\n                                That.onErrorRequest(e);\r\n                            }\r\n                        }\r\n\r\n                        var SetData = function () {\r\n                            var Transaction = DbConnection.transaction([tableName], \"readwrite\");\r\n                            That.Store = Transaction.objectStore(tableName);\r\n                            Transaction.oncomplete = function (e) {\r\n                                if (onSuccess != null) {\r\n                                    onSuccess();\r\n                                }\r\n                            };\r\n                            var AddResult = That.Store.add(value);\r\n                            AddResult.onerror = function (e) {\r\n                                That.onErrorRequest(e);\r\n                            }\r\n                        }\r\n\r\n                        UpdateIfExist();\r\n                    }\r\n                    catch (ex) {\r\n                        console.error(ex);\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Business {\r\n            export class OpenDbLogic {\r\n\r\n                constructor(objMain: KeyStore, onSuccess: Function, onError: Function) {\r\n                    if (Status.ConStatus != ConnectionStatus.Connected) {\r\n                        if (ActiveDataBase.Name.length > 0) {\r\n                            var DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion),\r\n                                That = this;\r\n                            DbRequest.onerror = function (event) {\r\n                                if (onError != null) {\r\n                                    onError((event as any).target.error);\r\n                                }\r\n                            };\r\n\r\n                            DbRequest.onsuccess = function (event) {\r\n                                Status.ConStatus = ConnectionStatus.Connected;\r\n                                DbConnection = DbRequest.result;\r\n                                DbConnection.onclose = function () {\r\n                                    Status.ConStatus = ConnectionStatus.Closed;\r\n                                    Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                                }\r\n\r\n                                DbConnection.onversionchange = function (e) {\r\n                                    if (e.newVersion === null) { // An attempt is made to delete the db\r\n                                        e.target.close(); // Manually close our connection to the db\r\n                                    }\r\n                                };\r\n\r\n                                DbConnection.onerror = function (e) {\r\n                                    Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                                }\r\n\r\n                                DbConnection.onabort = function (e) {\r\n                                    Status.ConStatus = ConnectionStatus.Closed;\r\n                                    Status.LastError = \"Connection Aborted\";\r\n                                }\r\n\r\n                                if (onSuccess != null) {\r\n                                    onSuccess(objMain);\r\n                                }\r\n                            };\r\n                        }\r\n                        else {\r\n                            if (onError != null) {\r\n                                onError(<IError>{\r\n                                    Name: \"DbNotFound\",\r\n                                    Value: \"DataBase name is not found, please first initiate the db using createDb\"\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Business {\r\n            export class BaseGetLogic {\r\n                Results;\r\n                OnSuccess: Function;\r\n                OnError: Function;\r\n                ErrorOccured: boolean = false;\r\n                ErrorCount = 0;\r\n                Transaction: IDBTransaction;\r\n                ObjectStore: IDBObjectStore;\r\n\r\n                public onErrorRequest = function (e) {\r\n                    ++this.ErrorCount;\r\n                    if (this.ErrorCount == 1) {\r\n                        if (this.OnError != null) {\r\n                            this.OnError((e as any).target.error);\r\n                        }\r\n                    }\r\n                    console.error(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Business {\r\n            export class GetLogic extends BaseGetLogic {\r\n                Query: ISelect;\r\n\r\n                private executeWhereLogic = function () {\r\n                    var Column,\r\n                        That: GetLogic = this\r\n\r\n\r\n                    var executeInnerWhereLogic = function (column, value) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorRequest(e);\r\n                        }\r\n\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                That.Results = Cursor.value['Value'];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (Column in this.Query.Where) {\r\n                        executeInnerWhereLogic(Column, this.Query.Where[Column]);\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n                constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                    super();\r\n                    var That = this;\r\n                    this.Query = query;\r\n                    this.OnSuccess = onSuccess;\r\n                    this.OnError = onError;\r\n\r\n                    this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                    this.Transaction.oncomplete = function (e) {\r\n                        if (onSuccess != null) {\r\n                            onSuccess(That.Results);\r\n                        }\r\n                    }\r\n\r\n                    this.ObjectStore = this.Transaction.objectStore(query.From);\r\n                    this.executeWhereLogic();\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}","module JsStore {\r\n    export module KeyStores {\r\n        export module Business {\r\n            export var DbConnection,\r\n                DbVersion = 1,\r\n                ActiveDataBase: KeyStoreModel.DataBase,\r\n                Status: JsStoreStatus = <JsStoreStatus>{\r\n                    ConStatus: ConnectionStatus.NotStarted,\r\n                    LastError: \"\"\r\n                };\r\n            export class MainLogic {\r\n                constructor(dataBase: KeyStoreModel.DataBase) {\r\n                    ActiveDataBase = dataBase\r\n                }\r\n\r\n                openDb = function (objMain: KeyStore, onSuccess: Function, onError: Function) {\r\n                    var ObjOpenDb = new OpenDbLogic(objMain, onSuccess, onError);\r\n                }\r\n\r\n                public closeDb = function () {\r\n                    if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                        DbConnection.close();\r\n                    }\r\n                }\r\n\r\n                public set = function (tableName: string, value, isReturn, onSuccess: Function, onError: Function) {\r\n                    var ObjInsert = new SetLogic(tableName, value, isReturn, onSuccess, onError);\r\n                }\r\n\r\n                public remove = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                    var ObjDelete = new RemoveLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public get = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n                    new GetLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public createDb = function () {\r\n                    new CreateDbLogic();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Model {\r\n            export interface IColumn {\r\n                Name: string;\r\n                AutoIncrement: boolean;\r\n                PrimaryKey: boolean;\r\n                Unique: boolean;\r\n                CurrentDate: boolean;\r\n                NotNull: boolean;\r\n                DataType: string;\r\n            }\r\n\r\n            export class Column implements IColumn {\r\n                Name: string;\r\n                AutoIncrement: boolean;\r\n                PrimaryKey: boolean;\r\n                Unique: boolean;\r\n                CurrentDate: boolean;\r\n                NotNull: boolean;\r\n                DataType: string;\r\n                Searchable: boolean;\r\n\r\n                constructor(key: IColumn, tableName: string) {\r\n                    if (key.Name != null) {\r\n                        this.Name = key.Name;\r\n                    }\r\n                    else {\r\n                        throw \"Column Name is not defined for table:\" + tableName;\r\n                    }\r\n                    this.AutoIncrement = key.AutoIncrement != null ? key.AutoIncrement : false;\r\n                    this.PrimaryKey = key.PrimaryKey != null ? key.PrimaryKey : false;\r\n                    this.Unique = key.Unique != null ? key.Unique : false;\r\n                    this.CurrentDate = key.CurrentDate != null ? key.CurrentDate : false;\r\n                    this.NotNull = key.NotNull != null ? key.NotNull : false;\r\n                    this.DataType = key.DataType != null ? key.DataType : '';\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}","\r\nmodule JsStore {\r\n    export module IndexDb {\r\n        export module Model {\r\n            export interface ITable {\r\n                Name: string;\r\n                Columns: Array<IColumn>;\r\n                Version: number;\r\n            }\r\n            export class Table {\r\n                Name: string = \"\";\r\n                Columns: Array<Column> = [];\r\n                Version: number;\r\n\r\n                //internal Members\r\n                RequireDelete: boolean = false;\r\n                RequireCreation: boolean = false;\r\n                PrimaryKey: string = \"\";\r\n\r\n                constructor(table: ITable, dbName: string) {\r\n                    this.Name = table.Name;\r\n                    this.Version = table.Version == undefined ? 1 : table.Version;\r\n                    var That = this;\r\n                    table.Columns.forEach(function (item) {\r\n                        That.Columns.push(new Column(item, table.Name));\r\n                    })\r\n\r\n                    this.setRequireDelete(dbName);\r\n                    this.setDbVersion(dbName);\r\n                    this.setPrimaryKey();\r\n                }\r\n\r\n                //private methods\r\n\r\n                private setPrimaryKey() {\r\n                    //this.Key = new Column();//\r\n                    var That = this,\r\n                        Length = this.Columns.length;\r\n                    this.Columns.forEach(function (item, index) {\r\n                        if (item.PrimaryKey && That.PrimaryKey.length == 0) {\r\n                            That.PrimaryKey = item.Name;\r\n                            localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"true\");\r\n                        }\r\n                        else if (item.PrimaryKey && That.PrimaryKey.length > 0) {\r\n                            localStorage.setItem(\"JsStorage_\" + That.Name + \"_\" + item.Name, \"\");\r\n                            throw \"Multiple primary key are not allowed\";\r\n                        }\r\n                        // else if (index == Length && That.PrimaryKey.length == 0) {\r\n\r\n                        // }\r\n                    })\r\n\r\n                }\r\n\r\n                private setRequireDelete(dbName: string) {\r\n                    var TableVersion = localStorage.getItem(\"JsStorage_\" + dbName + \"_\" + this.Name);\r\n                    if (TableVersion == null || localStorage.getItem('JsStorage_Db_Version') == null) {\r\n                        this.RequireCreation = true;\r\n                    }\r\n                    else if (TableVersion != this.Version.toString()) {\r\n                        this.RequireDelete = true;\r\n                    }\r\n                    this.Version = this.Version == null ? 1 : this.Version;\r\n\r\n                }\r\n\r\n                private setDbVersion(dbName: string) {\r\n                    if (this.Version == null) {\r\n                        localStorage.setItem(dbName + 'Db_Version', '1');\r\n                    }\r\n                    else if (this.Version > Number(localStorage.getItem(dbName + 'Db_Version'))) {\r\n                        localStorage.setItem(dbName + 'Db_Version', this.Version.toString());\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\nmodule JsStore {\r\n    export module IndexDb {\r\n        export module Model {\r\n            export interface IDataBase {\r\n                Name: string;\r\n                Tables: Array<ITable>;\r\n            }\r\n            export class DataBase {\r\n                Name: string;\r\n                Tables: Array<Table> = [];\r\n\r\n                constructor(dataBase: IDataBase) {\r\n                    var That = this;\r\n                    this.Name = dataBase.Name;\r\n                    dataBase.Tables.forEach(function (item) {\r\n                        That.Tables.push(new Table(item, That.Name));\r\n                    })\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export var Db: IndexDbModel.DataBase;\r\n            export class CreateDbLogic {\r\n                constructor(objMain: Instance, onSuccess: Function, onError: Function) {\r\n                    var That = this,\r\n                        DbVersion = Number(localStorage.getItem(ActiveDataBase.Name + 'Db_Version')),\r\n                        DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion);\r\n\r\n                    DbRequest.onerror = function (event) {\r\n                        if (onError != null) {\r\n                            onError((event as any).target.error);\r\n                        }\r\n                    };\r\n\r\n                    DbRequest.onsuccess = function (event) {\r\n                        Status.ConStatus = ConnectionStatus.Connected;\r\n                        DbConnection = DbRequest.result;\r\n                        DbConnection.onclose = function () {\r\n                            Status.ConStatus = ConnectionStatus.Closed;\r\n                            Status.LastError = \"Connection Closed\";\r\n                        }\r\n\r\n                        DbConnection.onversionchange = function (e) {\r\n                            if (e.newVersion === null) { // An attempt is made to delete the db\r\n                                e.target.close(); // Manually close our connection to the db\r\n                            }\r\n                        };\r\n\r\n                        DbConnection.onerror = function (e) {\r\n                            Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                        }\r\n\r\n                        DbConnection.onabort = function (e) {\r\n                            Status.ConStatus = ConnectionStatus.Closed;\r\n                            Status.LastError = \"Connection aborted\";\r\n                        }\r\n\r\n                        if (onSuccess != null) {\r\n                            onSuccess(objMain);\r\n                        }\r\n                    };\r\n\r\n                    DbRequest.onupgradeneeded = function (event) {\r\n                        var db = (<any>event).target.result;\r\n                        ActiveDataBase.Tables.forEach(function (item) {\r\n                            if (item.RequireDelete) {\r\n                                // Delete the old datastore.    \r\n                                if (db.objectStoreNames.contains(item.Name)) {\r\n                                    db.deleteObjectStore(item.Name);\r\n                                }\r\n                                createObjectStore(db, item);\r\n                            }\r\n                            else if (item.RequireCreation) {\r\n                                createObjectStore(db, item);\r\n                            }\r\n                        })\r\n\r\n                    }\r\n\r\n                    var createObjectStore = function (dbConnection, item: Table) {\r\n                        try {\r\n                            if (item.PrimaryKey.length > 0) {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    keyPath: item.PrimaryKey\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    if (column.PrimaryKey) {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                    }\r\n                                    else {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                var Store = dbConnection.createObjectStore(item.Name, {\r\n                                    autoIncrement: true\r\n                                });\r\n                                item.Columns.forEach(function (column: Column) {\r\n                                    if (column.Unique) {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                    } else {\r\n                                        Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                    }\r\n                                })\r\n                            }\r\n                            //setting the table version\r\n                            localStorage.setItem(\"JsStorage_\" + ActiveDataBase.Name + \"_\" + item.Name, item.Version.toString());\r\n                        }\r\n                        catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class DeleteLogic {\r\n                constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n                    try {\r\n                        var That = this,\r\n                            Transaction: IDBTransaction = DbConnection.transaction([query.From], \"readwrite\"),\r\n                            ObjectStore: IDBObjectStore = Transaction.objectStore(query.From),\r\n                            ErrorOccured: boolean = false,\r\n                            ErrorCount = 0,\r\n                            RowAffected = 0,\r\n                            onErrorGetRequest = function (e) {\r\n                                ++ErrorCount;\r\n                                if (onError != null && this.ErrorCount == 1) {\r\n                                    onError((e as any).target.error);\r\n                                }\r\n                            };\r\n\r\n                        Transaction.oncomplete = function () {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(RowAffected);\r\n                            }\r\n                        }\r\n\r\n                        Transaction.onerror = onErrorGetRequest;\r\n\r\n                        if (query.Where == undefined) {\r\n                            var CursorOpenRequest = ObjectStore.openCursor();\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    Cursor.delete();\r\n                                    ++RowAffected;\r\n                                    (Cursor as any).continue();\r\n                                }\r\n                            }\r\n                            CursorOpenRequest.onerror = onErrorGetRequest;\r\n                        }\r\n                        else {\r\n                            var Column,\r\n                                ExecutionNo = 0,\r\n                                ConditionLength = Object.keys(query.Where).length;\r\n                            for (Column in query.Where) {\r\n                                if (!ErrorOccured) {\r\n                                    if (ObjectStore.indexNames.contains(Column)) {\r\n                                        var CursorOpenRequest = ObjectStore.index(Column).openCursor(IDBKeyRange.only(query.Where[Column])),\r\n                                            ExecutionNo = 0;\r\n\r\n                                        CursorOpenRequest.onerror = function (e) {\r\n                                            ErrorOccured = true;\r\n                                            onErrorGetRequest(e);\r\n                                        };\r\n                                        CursorOpenRequest.onsuccess = function (e) {\r\n                                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n\r\n                                            if (Cursor) {\r\n                                                Cursor.delete();\r\n                                                ++RowAffected;\r\n                                                Cursor.continue();\r\n                                            }\r\n\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    catch (ex) {\r\n                        if (ex.name == \"NotFoundError\") {\r\n                            UtilityLogic.getError(ErrorType.TableNotExist, true, { TableName: query.From });\r\n                        }\r\n                        else {\r\n                            console.warn(ex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class DropDbLogic {\r\n                constructor(name: string, onSuccess: Function, onError: Function) {\r\n\r\n                    var DbDropRequest = window.indexedDB.deleteDatabase(name);\r\n                    DbDropRequest.onblocked = function () {\r\n                        if (onError != null) {\r\n                            onError(\"delete database is in progress\");\r\n                        };\r\n                    };\r\n                    DbDropRequest.onerror = function (e) {\r\n                        if (onError != null) {\r\n                            onError((event as any).target.error);\r\n                        }\r\n                    }\r\n                    DbDropRequest.onsuccess = function () {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class InsertLogic {\r\n                RowsAffected = 0;\r\n                ValuesAffected: Array<any> = [];\r\n                Store: IDBObjectStore;\r\n                OnSuccess: Function;\r\n                OnError: Function;\r\n                ErrorOccured: boolean = false;\r\n                ErrorCount = 0;\r\n                Error: IError;\r\n\r\n                public onErrorRequest = function (e, customError = false) {\r\n                    if (this.ErrorCount == 1) {\r\n                        if (this.OnError != null) {\r\n                            if (!customError) {\r\n                                this.OnError((e as any).target.error, this.TotalRowsAffected);\r\n                            }\r\n                            else {\r\n                                this.OnError(e, this.TotalRowsAffected);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                constructor(tableName: string, values, isReturn, onSuccess: Function, onError: Function) {\r\n                    try {\r\n                        this.OnSuccess = onSuccess;\r\n                        this.OnError = onError;\r\n                        var That = this,\r\n                            Transaction = DbConnection.transaction([tableName], \"readwrite\");\r\n                        Transaction.oncomplete = function (e) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(isReturn ? That.ValuesAffected : That.RowsAffected);\r\n                            }\r\n                        },\r\n                            (<any>Transaction).ontimeout = function () {\r\n                                console.log('transaction timed out');\r\n                            }\r\n                        this.Store = Transaction.objectStore(tableName);\r\n                        values.forEach(function (value) {\r\n                            That.checkSchemaAndModifyValue(value, tableName);\r\n                            if (!That.ErrorOccured) {\r\n                                var AddResult = That.Store.add(value);\r\n                                AddResult.onerror = function (e) {\r\n                                    That.onErrorRequest(e);\r\n                                }\r\n                                AddResult.onsuccess = function (e) {\r\n                                    if (isReturn) {\r\n                                        That.ValuesAffected.push(value);\r\n                                    }\r\n                                    else {\r\n                                        ++That.RowsAffected;\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                That.onErrorRequest(That.Error, true);\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (ex) {\r\n                        console.error(ex);\r\n                    }\r\n                }\r\n\r\n\r\n                /**\r\n                 * check the defined schema and based upon that modify or create the value\r\n                 * \r\n                 * @private\r\n                 * @param {any} value \r\n                 * @param {string} tableName \r\n                 * \r\n                 * @memberof InsertLogic\r\n                 */\r\n                private checkSchemaAndModifyValue(value, tableName: string) {\r\n                    var CurrentTable: Table,\r\n                        That = this;\r\n                    ActiveDataBase.Tables.every(function (table) {\r\n                        if (table.Name == tableName) {\r\n                            CurrentTable = table;\r\n                            return false;\r\n                        }\r\n                        return true;\r\n                    });\r\n                    CurrentTable.Columns.forEach(function (column) {\r\n                        if (!That.ErrorOccured) {\r\n                            //check auto increment scheme\r\n                            if (column.AutoIncrement) {\r\n                                var ColumnValue: number = Number(localStorage.getItem(tableName + \"_\" + column.Name + \"value:\"));\r\n                                value[column.Name] = ++ColumnValue;\r\n                                localStorage.setItem(tableName + \"_\" + column.Name + \"value:\", ColumnValue.toString());\r\n                            }\r\n                            else if (column.CurrentDate) { //check CurrentDate Schema\r\n                                value[column.Name] = new Date();\r\n                            }\r\n\r\n                            //check not null schema\r\n                            if (column.NotNull && value[column.Name] == null) {\r\n                                That.ErrorOccured = true;\r\n                                ++That.ErrorCount;\r\n                                That.Error = UtilityLogic.getError(ErrorType.NullValue, false, { ColumnName: column.Name });\r\n                            }\r\n\r\n                            //check datatype\r\n                            if (column.DataType && typeof value[column.Name] != column.DataType) {\r\n                                That.ErrorOccured = true;\r\n                                ++That.ErrorCount;\r\n                                That.Error = UtilityLogic.getError(ErrorType.BadDataType, false, { ColumnName: column.Name });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class OpenDbLogic {\r\n                constructor(objMain: Instance, onSuccess: Function, onError: Function) {\r\n                    if (Status.ConStatus != ConnectionStatus.Connected) {\r\n                        if (ActiveDataBase.Name.length > 0) {\r\n                            var DbVersion = Number(localStorage.getItem(ActiveDataBase.Name + 'Db_Version')),\r\n                                DbRequest = window.indexedDB.open(ActiveDataBase.Name, DbVersion),\r\n                                That = this;\r\n                            DbRequest.onerror = function (event) {\r\n                                if (onError != null) {\r\n                                    onError((event as any).target.error);\r\n                                }\r\n                            };\r\n\r\n                            DbRequest.onsuccess = function (event) {\r\n                                Status.ConStatus = ConnectionStatus.Connected;\r\n                                DbConnection = DbRequest.result;\r\n                                DbConnection.onclose = function () {\r\n                                    Status.ConStatus = ConnectionStatus.Closed;\r\n                                    Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                                }\r\n\r\n                                DbConnection.onversionchange = function (e) {\r\n                                    if (e.newVersion === null) { // An attempt is made to delete the db\r\n                                        e.target.close(); // Manually close our connection to the db\r\n                                    }\r\n                                };\r\n\r\n                                DbConnection.onerror = function (e) {\r\n                                    Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                                }\r\n\r\n                                DbConnection.onabort = function (e) {\r\n                                    Status.ConStatus = ConnectionStatus.Closed;\r\n                                    Status.LastError = \"Connection Aborted\";\r\n                                }\r\n\r\n                                if (onSuccess != null) {\r\n                                    onSuccess(objMain);\r\n                                }\r\n                            };\r\n                        }\r\n                        else {\r\n                            if (onError != null) {\r\n                                onError(<IError>{\r\n                                    Name: \"DbNotFound\",\r\n                                    Value: \"DataBase name is not found, please first initiate the db using createDb\"\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class BaseSelectLogic extends DbHelperLogic {\r\n                Results = [];\r\n                OnSuccess: Function;\r\n                OnError: Function;\r\n                ErrorOccured: boolean = false;\r\n                ErrorCount = 0;\r\n                Transaction: IDBTransaction;\r\n                ObjectStore: IDBObjectStore;\r\n                SendResultFlag: Boolean = true;\r\n\r\n                public onErrorRequest = function (e) {\r\n                    ++this.ErrorCount;\r\n                    if (this.ErrorCount == 1) {\r\n                        if (this.OnError != null) {\r\n                            this.OnError((e as any).target.error);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                private getKeyRange = function (whereIn: IWhereIn) {\r\n                    var KeyRange: IDBKeyRange;\r\n                    switch (this.Query.WhereIn.Op) {\r\n                        case '-': KeyRange = IDBKeyRange.bound(whereIn.Start, whereIn.End); break;\r\n                        case '>': KeyRange = IDBKeyRange.lowerBound(whereIn.Value, true); break;\r\n                        case '>=': KeyRange = IDBKeyRange.lowerBound(whereIn.Value); break;\r\n                        case '<': KeyRange = IDBKeyRange.upperBound(whereIn.Value, true); break;\r\n                        case '<=': KeyRange = IDBKeyRange.upperBound(whereIn.Value); break;\r\n                        default: this.ErrorOccured = true; UtilityLogic.getError(ErrorType.InvalidOp, true, { Op: whereIn.Op });\r\n                    }\r\n                    return KeyRange;\r\n\r\n                }\r\n\r\n                protected executeMultipleWhereInLogic = function (whereInArray: Array<IWhereIn>) {\r\n                    var That = this,\r\n                        WhereIn,\r\n                        ExecutionNo = 0,\r\n                        ConditionLength = Object.keys(this.Query.WhereIn).length,\r\n                        KeyRange: IDBKeyRange,\r\n                        OnSuccessGetRequest = function () {\r\n                            ++ExecutionNo;\r\n                            if (ExecutionNo == ConditionLength) {\r\n                                this.OnSuceessRequest();\r\n                            }\r\n                        };\r\n\r\n                    for (WhereIn in whereInArray) {\r\n                        KeyRange = this.getKeyRange();\r\n                        if (!this.ErrorOccured) {\r\n                            var CursorOpenRequest,\r\n                                OnCursorSuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        That.Results.push(Cursor.value);\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                },\r\n                                OnCursorError = function (e) {\r\n                                    That.ErrorOccured = true;\r\n                                    That.OnErrorRequest(e);\r\n                                };\r\n                            if (this.Query.WhereIn.Op == '-') {\r\n                                CursorOpenRequest = this.ObjectStore.openCursor(KeyRange);\r\n                                CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                                CursorOpenRequest.onerror = OnCursorError;\r\n                            }\r\n                            else if (this.ObjectStore.indexNames.contains(WhereIn.Column)) {\r\n                                CursorOpenRequest = this.ObjectStore.index(WhereIn.Column).openCursor(KeyRange);\r\n                                CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                                CursorOpenRequest.onerror = OnCursorError;\r\n                            }\r\n                            else {\r\n                                UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            }\r\n                        }\r\n                        else {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                protected executeSingleWhereInLogic = function (whereIn: IWhereIn) {\r\n                    var That: BaseSelectLogic = this,\r\n                        KeyRange: IDBKeyRange = this.getKeyRange(whereIn);\r\n\r\n                    if (!this.ErrorOccured) {\r\n                        var CursorOpenRequest,\r\n                            OnCursorSuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    That.Results.push(Cursor.value);\r\n                                    Cursor.continue();\r\n                                }\r\n\r\n                            },\r\n                            OnCursorError = function (e) {\r\n                                this.ErrorOccured = true;\r\n                                this.OnErrorRequest(e);\r\n                            };\r\n                        if (whereIn.Op == '-') {\r\n                            CursorOpenRequest = this.ObjectStore.openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                            CursorOpenRequest.onerror = OnCursorError;\r\n                        }\r\n                        else if (this.ObjectStore.indexNames.contains(whereIn.Column)) {\r\n                            CursorOpenRequest = this.ObjectStore.index(whereIn.Column).openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                            CursorOpenRequest.onerror = OnCursorError;\r\n                        }\r\n                        else {\r\n                            UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: whereIn.Column });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * For matching the different column value existance\r\n                 * \r\n                 * @private\r\n                 * @param {any} where \r\n                 * @param {any} value \r\n                 * @returns \r\n                 * \r\n                 * @memberOf SelectLogic\r\n                 */\r\n                protected checkForWhereConditionMatch(where, value) {\r\n                    var TempColumn;\r\n                    for (TempColumn in where) {\r\n                        if (Array.isArray(where[TempColumn])) {\r\n                            var i, Status = true;\r\n                            for (i = 0; i < TempColumn.length; i++) {\r\n                                if (where[TempColumn][i] == value[TempColumn]) {\r\n                                    Status = true;\r\n                                    break;\r\n                                }\r\n                                else {\r\n                                    Status = false;\r\n                                }\r\n                            };\r\n                            if (!Status) {\r\n                                return Status;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (where[TempColumn] != value[TempColumn]) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class SelectJoinLogic extends BaseSelectLogic {\r\n                Query: ITableJoin;\r\n                QueryStack: Array<ITableJoin> = [];\r\n                CurrentQueryStackIndex = 0;\r\n\r\n                private onTransactionCompleted = function (e) {\r\n                    if (this.OnSuccess != null && (this.QueryStack.length == this.CurrentQueryStackIndex + 1)) {\r\n                        this.OnSuccess(this.Results);\r\n                    }\r\n                }\r\n\r\n                private executeWhereJoinLogic = function (joinQuery: ITableJoin, query: ITableJoin) {\r\n                    var That = <SelectJoinLogic>this,\r\n                        Results = [],\r\n                        JoinIndex,\r\n                        TmpResults = That.Results;\r\n\r\n                    //get the data from query table\r\n                    new SelectLogic(<ISelect>{\r\n                        From: query.Table,\r\n                        Where: query.Where,\r\n                        WhereIn: query.WhereIn\r\n                    }, function (results) {\r\n                        //perform join\r\n                        JoinIndex = 0;\r\n                        var Item,\r\n                            ResultLength = TmpResults.length;\r\n                        results.forEach(function (value, index) {\r\n                            //search item through each global result\r\n                            for (var i = 0; i < ResultLength; i++) {\r\n                                Item = TmpResults[i][joinQuery.Table][joinQuery.Column];\r\n                                if (Item == value[query.Column]) {\r\n                                    doJoin(value, i);\r\n                                    ++JoinIndex;\r\n                                }\r\n\r\n                            }\r\n                        });\r\n                        That.Results = Results;\r\n                        if (That.QueryStack.length > That.CurrentQueryStackIndex + 1) {\r\n                            That.startExecutionJoinLogic();\r\n                        }\r\n                        else {\r\n                            That.onTransactionCompleted(null);\r\n                        }\r\n\r\n                    }, function (error) {\r\n                        this.onErrorRequest(error);\r\n                    });\r\n\r\n                    var doJoin = function (value, itemIndex) {\r\n                        // if (Results[JoinIndex] == undefined) {\r\n                        Results[JoinIndex] = {};\r\n                        // }\r\n\r\n                        switch (query.JoinType) {\r\n                            //inner join\r\n                            case 'inner':\r\n                                Results[JoinIndex][query.Table] = value;\r\n                                //copy other relative data into current result\r\n                                for (var j = 0; j < That.CurrentQueryStackIndex; j++) {\r\n                                    Results[JoinIndex][That.QueryStack[j].Table] = TmpResults[itemIndex][That.QueryStack[j].Table];\r\n                                }\r\n                                break;\r\n                            //left join\r\n                            case 'left': //if (value[query.Column] == That.Results[index][joinQuery.Table][joinQuery.Column]) {\r\n                                if (value != null) {\r\n                                    That.Results[JoinIndex][query.Table] = value;\r\n                                }\r\n                                else { //add null element\r\n                                    That.Results[JoinIndex][query.Table] = null;\r\n                                };\r\n                                break;\r\n                            //right join\r\n                            case 'right': if (value[query.Column] == That.Results[JoinIndex][joinQuery.Table][joinQuery.Column]) {\r\n                                That.Results[JoinIndex][query.Table] = value;\r\n                            }\r\n                            else { //shift array to 1 position with null as first value and value as second value\r\n                                That.Results.splice(JoinIndex, 0, null);\r\n                                That.Results[JoinIndex][joinQuery.Table] = null;\r\n                                That.Results[JoinIndex][query.Table] = value;\r\n                            }\r\n                                break;\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                private executeWhereUndefinedLogicForJoin = function (joinQuery: ITableJoin, query: ITableJoin) {\r\n                    try {\r\n                        var That: SelectJoinLogic = this,\r\n                            Results = [],\r\n                            JoinIndex,\r\n                            TmpResults = That.Results,\r\n                            CursorOpenRequest,\r\n                            ResultLength = this.Results.length,\r\n                            Transaction = DbConnection.transaction([query.Table], \"readonly\");\r\n                        Transaction.oncomplete = function (e) {\r\n                            That.onTransactionCompleted(e);\r\n                            if (That.QueryStack.length > That.CurrentQueryStackIndex + 1) {\r\n                                That.startExecutionJoinLogic();\r\n                            }\r\n                        };\r\n                        var ExecuteLogic = function (item, index) {\r\n                            JoinIndex = 0;\r\n                            this.ObjectStore = Transaction.objectStore(query.Table);\r\n                            CursorOpenRequest = this.ObjectStore.index(query.Column).openCursor(IDBKeyRange.only(item[joinQuery.Column]));\r\n\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    doJoin(Cursor.value);\r\n                                    Cursor.continue();\r\n                                    ++JoinIndex;\r\n                                }\r\n                                else {\r\n                                    //copy other relative data into current result\r\n                                    if (That.CurrentQueryStackIndex == 1) {\r\n                                        That.Results = Results;\r\n                                    }\r\n                                    else {\r\n                                        for (var i = 0; i < Results.length; i++) {\r\n                                            var ColumnValue = Results[i][joinQuery.Table][joinQuery.Column],\r\n                                                TableName;\r\n                                            for (var j = 0; j < TmpResults.length; j++) {\r\n                                                if (ColumnValue == TmpResults[j][joinQuery.Table][joinQuery.Column]) {\r\n                                                    for (var k = 0; k < That.CurrentQueryStackIndex; k++) {\r\n                                                        // Results[JoinIndex][joinQuery.Table] = item;\r\n                                                        TableName = That.QueryStack[k].Table;\r\n                                                        Results[i][TableName] = TmpResults[j][TableName];\r\n                                                    }\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n\r\n                                        }\r\n                                        That.Results = Results;\r\n                                    }\r\n                                    // if (index == ResultLength - 1 && (That.QueryStack.length > That.CurrentQueryStackIndex + 1)) {\r\n                                    //     That.startExecutionJoinLogic();\r\n                                    // }\r\n                                }\r\n                            }\r\n                            CursorOpenRequest.onerror = That.onErrorRequest;\r\n\r\n                            var doJoin = function (value) {\r\n                                Results[JoinIndex] = {};\r\n                                switch (query.JoinType) {\r\n                                    //inner join\r\n                                    case 'inner':\r\n                                        Results[JoinIndex][query.Table] = value;\r\n                                        Results[JoinIndex][joinQuery.Table] = item;\r\n                                        break;\r\n                                    //left join\r\n                                    case 'left': //if (value[query.Column] == That.Results[index][joinQuery.Table][joinQuery.Column]) {\r\n                                        if (value != null) {\r\n                                            That.Results[index][query.Table] = value;\r\n                                        }\r\n                                        else { //add null element\r\n                                            That.Results[index][query.Table] = null;\r\n                                        };\r\n                                        break;\r\n                                    //right join\r\n                                    case 'right': if (value[query.Column] == That.Results[index][joinQuery.Table][joinQuery.Column]) {\r\n                                        That.Results[index][query.Table] = value;\r\n                                    }\r\n                                    else { //shift array to 1 position with null as first value and value as second value\r\n                                        That.Results.splice(index, 0, null);\r\n                                        That.Results[index][joinQuery.Table] = null;\r\n                                        That.Results[index][query.Table] = value;\r\n                                    }\r\n                                        break;\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < ResultLength; i++) {\r\n                            ExecuteLogic(TmpResults[i][joinQuery.Table], i);\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                        if (ex.name == \"NotFoundError\") {\r\n                            UtilityLogic.getError(ErrorType.TableNotExist, true, { TableName: query.Table });\r\n                        }\r\n                        else {\r\n                            console.warn(ex);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                constructor(query: ISelectJoin, onSuccess: Function, onError: Function) {\r\n                    super();\r\n                    this.OnSuccess = onSuccess;\r\n                    this.OnError = onError;\r\n                    var That = this,\r\n                        TableList = []; // used to open the multiple object store\r\n\r\n                    var convertQueryIntoStack = function (query) {\r\n                        if (query.hasOwnProperty('Table1')) {\r\n                            query.Table2['JoinType'] = (<IJoin>query).Join == undefined ? 'inner' : (<IJoin>query).Join.toLowerCase();\r\n                            That.QueryStack.push(query.Table2);\r\n                            if (That.QueryStack.length % 2 == 0) {\r\n                                That.QueryStack[That.QueryStack.length - 1].NextJoin = query.NextJoin;\r\n                            }\r\n                            TableList.push(query.Table2.Table);\r\n                            return convertQueryIntoStack(query.Table1);\r\n                        }\r\n                        else {\r\n                            That.QueryStack.push(query);\r\n                            TableList.push(query.Table);\r\n                            return;\r\n                        }\r\n                    };\r\n                    convertQueryIntoStack(query.From);\r\n                    this.QueryStack.reverse();\r\n                    // if (this.QueryStack.length > 2) {\r\n                    //     for (var i = 0, length = this.QueryStack.length; i < length; i++) {\r\n                    //         if (i % 2 == 1 && this.QueryStack[i].NextJoin != null) {\r\n\r\n                    //         }\r\n                    //         else {\r\n                    //             this.ErrorOccured = true;\r\n                    //             UtilityLogic.getError(ErrorType.NextJoinNotExist, true, {});\r\n                    //             break;\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                    //get the data for first table\r\n                    if (!this.ErrorOccured) {\r\n\r\n                        new SelectLogic(<ISelect>{\r\n                            From: this.QueryStack[0].Table,\r\n                            Where: this.QueryStack[0].Where,\r\n                            WhereIn: this.QueryStack[0].WhereIn\r\n                        }, function (results) {\r\n                            var TableName = That.QueryStack[0].Table;\r\n                            results.forEach(function (item, index) {\r\n                                That.Results[index] = {};\r\n                                That.Results[index][TableName] = item;\r\n                            });\r\n                            That.startExecutionJoinLogic();\r\n                        }, function (error) {\r\n                            That.onErrorRequest(error);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                private startExecutionJoinLogic() {\r\n                    var JoinQuery;\r\n                    if (this.CurrentQueryStackIndex >= 1 && this.CurrentQueryStackIndex % 2 == 1) {\r\n                        // if (this.QueryStack[this.CurrentQueryStackIndex].Table == this.QueryStack[this.CurrentQueryStackIndex].NextJoin.Table) {\r\n                        //     this.QueryStack[this.CurrentQueryStackIndex].Column = this.QueryStack[this.CurrentQueryStackIndex].Column;\r\n                        // }\r\n                        // else {\r\n                        //     this.QueryStack[this.CurrentQueryStackIndex].Column = this.QueryStack[this.CurrentQueryStackIndex].Column;\r\n                        // }\r\n                        JoinQuery = <ITableJoin>{\r\n                            Table: this.QueryStack[this.CurrentQueryStackIndex].NextJoin.Table,\r\n                            Column: this.QueryStack[this.CurrentQueryStackIndex].NextJoin.Column\r\n                        }\r\n                        this.CurrentQueryStackIndex++;\r\n                    }\r\n                    else {\r\n                        JoinQuery = this.QueryStack[this.CurrentQueryStackIndex++];\r\n                    }\r\n\r\n                    var Query = this.QueryStack[this.CurrentQueryStackIndex];\r\n                    if (Query.WhereIn || Query.Where) {\r\n                        this.executeWhereJoinLogic(JoinQuery, Query);\r\n                    }\r\n                    else {\r\n                        this.executeWhereUndefinedLogicForJoin(JoinQuery, Query);\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class SelectLogic extends BaseSelectLogic {\r\n                Query: ISelect;\r\n                private executeWhereInLogic = function () {\r\n                    if (Array.isArray(this.Query.WhereIn)) {\r\n                        this.executeMultipleWhereInLogic(this.Query.WhereIn);\r\n                    }\r\n                    else {\r\n                        this.executeSingleWhereInLogic(this.Query.WhereIn);\r\n                    }\r\n                }\r\n\r\n                private executeWhereLogic = function () {\r\n                    var Column,\r\n                        SkipRecord = this.Query.Skip,\r\n                        LimitRecord = this.Query.Limit,\r\n                        That: SelectLogic = this,\r\n                        ConditionLength = 0,\r\n                        OnSuccessGetRequest = function () {\r\n                            --ConditionLength;\r\n                            // if (ConditionLength == 0)\r\n                            //     That.onSuccessRequest();\r\n                        };\r\n\r\n                    var executeInnerWhereLogic = function (column, value) {\r\n\r\n                        if (That.ObjectStore.indexNames.contains(column)) {\r\n                            var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                            CursorOpenRequest.onerror = function (e) {\r\n                                That.ErrorOccured = true;\r\n                                That.onErrorRequest(e);\r\n                            }\r\n                            if (SkipRecord && LimitRecord) {\r\n                                var RecordSkipped = false;\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        if (RecordSkipped) {\r\n                                            if (That.Results.length != LimitRecord) {\r\n                                                That.Results.push(Cursor);\r\n                                                Cursor.continue();\r\n                                            }\r\n                                            else {\r\n                                                OnSuccessGetRequest();\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            RecordSkipped = true;\r\n                                            Cursor.advance(SkipRecord - 1);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (SkipRecord) { //skip exist\r\n                                var RecordSkipped = false;\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        if (RecordSkipped) {\r\n                                            That.Results.push(Cursor);\r\n                                            Cursor.continue();\r\n                                        }\r\n                                        else {\r\n                                            RecordSkipped = true;\r\n                                            Cursor.advance(SkipRecord - 1);\r\n                                        }\r\n\r\n\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (LimitRecord) {\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor && That.Results.length != LimitRecord) {\r\n                                        That.Results.push(Cursor.value);\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                CursorOpenRequest.onsuccess = function (e) {\r\n                                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                    if (Cursor) {\r\n                                        if (That.checkForWhereConditionMatch(That.Query.Where, Cursor.value)) {\r\n                                            That.Results.push(Cursor.value);\r\n                                        }\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        OnSuccessGetRequest();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            return false;\r\n                        }\r\n\r\n                    }\r\n\r\n                    for (Column in this.Query.Where) {\r\n                        if (Array.isArray(this.Query.Where[Column])) {\r\n                            ConditionLength = this.Query.Where[Column].length;\r\n                            for (var i = 0; i < this.Query.Where[Column].length; i++) {\r\n                                var ExecutionStatus = executeInnerWhereLogic(Column, this.Query.Where[Column][i])\r\n                                if (ExecutionStatus == false) {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            executeInnerWhereLogic(Column, this.Query.Where[Column]);\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n                private executeWhereUndefinedLogic = function () {\r\n                    var That: SelectLogic = this,\r\n                        CursorOpenRequest = this.ObjectStore.openCursor();\r\n\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var Cursor = (<any>e).target.result;\r\n                        if (Cursor) {\r\n                            That.Results.push(Cursor.value);\r\n                            (Cursor as any).continue();\r\n                        }\r\n\r\n                    }\r\n                    CursorOpenRequest.onerror = That.onErrorRequest;\r\n                }\r\n\r\n                constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                    super();\r\n                    var That = this;\r\n                    this.Query = query;\r\n                    this.OnSuccess = onSuccess;\r\n                    this.OnError = onError;\r\n                    try {\r\n                        this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                        this.Transaction.oncomplete = function (e) {\r\n                            if (That.SendResultFlag && onSuccess != null) {\r\n                                onSuccess(That.Results);\r\n                            }\r\n                        }\r\n                        // (<any>(this.Transaction)).ontimeout = function () {\r\n                        //     console.log('transaction timed out');\r\n                        // }\r\n                        this.ObjectStore = this.Transaction.objectStore(query.From);\r\n\r\n                        if (query.WhereIn != undefined) {\r\n                            if (query.Where != undefined) {\r\n                                this.SendResultFlag = false;\r\n                                this.executeWhereLogic();\r\n                            }\r\n                            this.SendResultFlag = true;\r\n                            this.executeWhereInLogic();\r\n\r\n                        }\r\n                        else if (query.Where != undefined) {\r\n                            this.executeWhereLogic();\r\n                        }\r\n                        else {\r\n\r\n                            this.executeWhereUndefinedLogic();\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                        if (ex.name == \"NotFoundError\") {\r\n                            UtilityLogic.getError(ErrorType.TableNotExist, true, { TableName: query.From });\r\n                        }\r\n                        else {\r\n                            console.warn(ex);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class UpdateLogic {\r\n                constructor(query: IUpdate, onSuccess: Function, onError: Function) {\r\n                    try {\r\n                        var That = this,\r\n                            ErrorOccured: boolean = false,\r\n                            ErrorCount = 0,\r\n                            RowAffected = 0,\r\n                            Transaction: IDBTransaction = DbConnection.transaction([query.In], \"readwrite\"),\r\n                            ObjectStore: IDBObjectStore = Transaction.objectStore(query.In),\r\n                            onErrorGetRequest = function (e) {\r\n                                if (ErrorCount == 1) {\r\n                                    if (onError != null) {\r\n                                        onError((e as any).target.error);\r\n                                    }\r\n                                }\r\n                            };\r\n                        Transaction.oncomplete = function (e) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(RowAffected);\r\n                            }\r\n                        },\r\n                            (<any>Transaction).ontimeout = function () {\r\n                                console.log('transaction timed out');\r\n                            }\r\n                        if (query.Where == undefined) {\r\n                            var CursorOpenRequest = ObjectStore.openCursor();\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    for (var key in query.Set) {\r\n                                        Cursor.value[key] = query.Set[key];\r\n                                    }\r\n                                    Cursor.update(Cursor.value);\r\n                                    ++RowAffected;\r\n                                    (Cursor as any).continue();\r\n                                }\r\n\r\n\r\n                            }\r\n                            CursorOpenRequest.onerror = onErrorGetRequest;\r\n                        }\r\n                        else {\r\n\r\n                            for (var TmpColumn in query.Where) {\r\n                                if (!ErrorOccured) {\r\n                                    if (ObjectStore.indexNames.contains(TmpColumn)) {\r\n                                        var CursorOpenRequest = ObjectStore.index(TmpColumn).openCursor(IDBKeyRange.only(query.Where[TmpColumn]));\r\n                                        CursorOpenRequest.onsuccess = function (e) {\r\n                                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                            if (Cursor) {\r\n                                                for (var key in query.Set) {\r\n                                                    Cursor.value[key] = query.Set[key];\r\n                                                }\r\n                                                Cursor.update(Cursor.value);\r\n                                                ++RowAffected;\r\n                                                Cursor.continue();\r\n                                            }\r\n\r\n                                        }\r\n\r\n                                        CursorOpenRequest.onerror = function (e) {\r\n                                            ErrorOccured = true; ++ErrorCount;\r\n                                            onErrorGetRequest(e);\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        UtilityLogic.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    catch (ex) {\r\n                        if (ex.name == \"NotFoundError\") {\r\n                            UtilityLogic.getError(ErrorType.TableNotExist, true, { TableName: query.In });\r\n                        }\r\n                        else {\r\n                            console.warn(ex);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n}","module JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export class ClearLogic {\r\n                constructor(tableName: string, onSuccess: Function, onError: Function) {\r\n                    var ObjectStore: IDBObjectStore = DbConnection.transaction([tableName], \"readwrite\").Transaction.objectStore(tableName)\r\n                        , ClearRequest = ObjectStore.clear();\r\n\r\n                    ClearRequest.onsuccess = function (e) {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    }\r\n\r\n                    ClearRequest.onerror = function (e) {\r\n                        if (onError != null) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import Table = JsStore.IndexDb.Model.Table;\r\nimport Column = JsStore.IndexDb.Model.Column;\r\nmodule JsStore {\r\n    export module IndexDb {\r\n        export module Business {\r\n            export var DbConnection,\r\n                ActiveDataBase: IndexDbModel.DataBase,\r\n                Status: JsStoreStatus = <JsStoreStatus>{\r\n                    ConStatus: ConnectionStatus.NotStarted,\r\n                    LastError: \"\"\r\n                };\r\n            export class MainLogic {\r\n                constructor(dataBase: IndexDbModel.DataBase) {\r\n                    ActiveDataBase = dataBase\r\n                }\r\n\r\n                openDb = function (objMain: Instance, onSuccess: Function, onError: Function) {\r\n                    var ObjOpenDb = new OpenDbLogic(objMain, onSuccess, onError);\r\n                }\r\n\r\n                public closeDb = function () {\r\n                    if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                        DbConnection.close();\r\n                    }\r\n                }\r\n\r\n                public dropDb = function (onSuccess: Function, onError: Function) {\r\n                    var ObjDropDb = new DropDbLogic(ActiveDataBase.Name, onSuccess, onError);\r\n                }\r\n\r\n                public update = function (query: IUpdate, onSuccess: Function, onError: Function) {\r\n                    var ObjUpdate = new UpdateLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public insert = function (tableName: string, values, isReturn, onSuccess: Function, onError: Function) {\r\n                    if (!Array.isArray(values)) {\r\n                        throw \"Value should be array :- supplied value is not array\";\r\n                    }\r\n                    else if (values.length > 0) {\r\n                        var ObjInsert = new InsertLogic(tableName, values, isReturn, onSuccess, onError);\r\n                    }\r\n                    else {\r\n                        if (onError != null) {\r\n                            onError(UtilityLogic.getError(ErrorType.NoValueSupplied, true, null));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                public delete = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                    var ObjDelete = new DeleteLogic(query, onSuccess, onError);\r\n                }\r\n\r\n                public select = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n\r\n                    if (typeof query.From === 'object') {\r\n                        new SelectJoinLogic(<ISelectJoin>query, onSuccess, onError);\r\n                    }\r\n                    else {\r\n                        new SelectLogic(query, onSuccess, onError);\r\n                    }\r\n                }\r\n\r\n                public createDb = function (objMain: Instance, onSuccess: Function, onError: Function) {\r\n                    new CreateDbLogic(objMain, onSuccess, onError);\r\n                }\r\n\r\n                public clear = function (tableName: string, onSuccess: Function, onError: Function) {\r\n                    new ClearLogic(tableName, onSuccess, onError);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import KeyStoreModel = JsStore.KeyStores.Model;\r\nimport KeyStoreBusiness = JsStore.KeyStores.Business;\r\nmodule JsStore {\r\n    export interface ISet {\r\n        Key: string,\r\n        Value; any\r\n    }\r\n\r\n    export class KeyStore {\r\n        KeyStoreObj: KeyStoreBusiness.MainLogic;\r\n        TableName: string = \"Local_Storage\";\r\n        constructor() {\r\n            if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                UtilityLogic.setDbType();\r\n                var Table = <KeyStoreModel.ITable>{\r\n                    Name: this.TableName,\r\n                    Columns: [<KeyStoreModel.IColumn>{\r\n                        Name: \"Key\",\r\n                        PrimaryKey: true\r\n                    }]\r\n                }\r\n\r\n                var keyStore_DataBase = <KeyStoreModel.IDataBase>{\r\n                    Name: \"JsStore_KeyStore\",\r\n                    Tables: [Table]\r\n                }\r\n\r\n                var Db = new KeyStoreModel.DataBase(keyStore_DataBase);\r\n                this.KeyStoreObj = new KeyStoreBusiness.MainLogic(Db);\r\n                this.KeyStoreObj.createDb();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        openDb(onSuccess: Function = null, onError: Function = null) {\r\n            this.KeyStoreObj.openDb(this, onSuccess, onError);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        closeDb(onSuccess: Function, onError: Function) {\r\n            this.KeyStoreObj.closeDb();\r\n        }\r\n\r\n        get(key: string, onSuccess: Function, onError: Function) {\r\n            if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.Connected) {\r\n                var Query = <ISelect>{\r\n                    From: this.TableName,\r\n                    Where: {\r\n                        Key: key\r\n                    }\r\n                }\r\n                this.KeyStoreObj.get(Query, onSuccess, onError);\r\n            }\r\n            else if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.get(key, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.get(key, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {string} table \r\n         * @param {any} value \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        set(key, value, onSuccess: Function, onError: Function) {\r\n            if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.Connected) {\r\n                var IsReturn = false;\r\n                var Value = <ISet>{\r\n                    Key: key,\r\n                    Value: value\r\n                }\r\n                this.KeyStoreObj.set(this.TableName, Value, IsReturn, onSuccess, onError);\r\n            }\r\n            else if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.set(key, value, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.set(key, value, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        remove(key: string, onSuccess: Function, onError: Function) {\r\n            if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.Connected) {\r\n                var Query = <IDelete>{\r\n                    From: this.TableName,\r\n                    Where: {\r\n                        Key: key\r\n                    }\r\n                }\r\n                this.KeyStoreObj.remove(Query, onSuccess, onError);\r\n            }\r\n            else if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.remove(key, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (KeyStoreBusiness.Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.remove(key, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n","import IndexDbModel = JsStore.IndexDb.Model;\r\nimport IndexDbBusiness = JsStore.IndexDb.Business;\r\nmodule JsStore {\r\n\r\n    export class Instance {\r\n        IndexDbObj: IndexDbBusiness.MainLogic;\r\n\r\n        constructor() {\r\n            UtilityLogic.setDbType();\r\n            //IndexDb.KeyStoreObj = new KeyStore();\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IDataBase} dataBase \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * @returns \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        createDb(dataBase: IndexDbModel.IDataBase, onSuccess: Function, onError: Function) {\r\n\r\n            var Db = new IndexDbModel.DataBase(dataBase)\r\n            this.IndexDbObj = new IndexDbBusiness.MainLogic(Db);\r\n            var DbVersion = Number(localStorage.getItem(dataBase.Name + 'Db_Version'));\r\n            this.IndexDbObj.createDb(this, onSuccess, onError);\r\n            //Business.IndexDb.Db = Db;\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        openDb(onSuccess: Function = null, onError: Function = null) {\r\n            this.IndexDbObj.openDb(this, onSuccess, onError);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        closeDb(onSuccess: Function, onError: Function) {\r\n            this.IndexDbObj.closeDb();\r\n        }\r\n\r\n        dropDb(onSuccess: Function, onError: Function) {\r\n            this.IndexDbObj.dropDb(onSuccess, onError);\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {IQuery} query \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        select(query: ISelect, onSuccess: Function, onError: Function) {\r\n            if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Connected) {\r\n                this.IndexDbObj.select(query, onSuccess, onError);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.select(query, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.select(query, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        /**\r\n         * \r\n         * \r\n         * @param {string} table \r\n         * @param {any} value \r\n         * @param {Function} onSuccess \r\n         * @param {Function} onError \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        insert(query: IInsert, onSuccess: Function, onError: Function) {\r\n\r\n            if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Connected) {\r\n                var IsReturn = query.Return ? query.Return : false;\r\n                this.IndexDbObj.insert(query.Into, query.Values, IsReturn, onSuccess, onError);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.insert(query, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.insert(query, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        update(query: IUpdate, onSuccess: Function, onError: Function) {\r\n            if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Connected) {\r\n                this.IndexDbObj.update(query, onSuccess, onError);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.update(query, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.update(query, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n\r\n        }\r\n\r\n        delete(query: IDelete, onSuccess: Function, onError: Function) {\r\n            if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Connected) {\r\n                this.IndexDbObj.delete(query, onSuccess, onError);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                var That = this;\r\n                setTimeout(function () {\r\n                    That.delete(query, onSuccess, onError);\r\n                }, 50);\r\n            }\r\n            else if (IndexDbBusiness.Status.ConStatus == ConnectionStatus.Closed) {\r\n                var That = this;\r\n                this.openDb(function () {\r\n                    That.delete(query, onSuccess, onError);\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n","\r\n// common files\r\n\r\n/// <reference path=\"CommonLogic.ts\" />\r\n/// <reference path=\"UtilityLogic.ts\" />\r\n/// <reference path=\"DbHelperLogic.ts\" />\r\n\r\n// KeyStores Files\r\n\r\n//Model\r\n/// <reference path=\"KeyStores/Model/Column.ts\" />\r\n/// <reference path=\"KeyStores/Model/Table.ts\" />\r\n/// <reference path=\"KeyStores/Model/DataBase.ts\" />\r\n//Business\r\n/// <reference path=\"KeyStores/Business/CreateDbLogic.ts\" />\r\n/// <reference path=\"KeyStores/Business/RemoveLogic.ts\" />\r\n/// <reference path=\"KeyStores/Business/SetLogic.ts\" />\r\n/// <reference path=\"KeyStores/Business/OpenDbLogic.ts\" />\r\n/// <reference path=\"KeyStores/Business/BaseGetLogic.ts\" />\r\n/// <reference path=\"KeyStores/Business/GetLogic.ts\" />\r\n/// <reference path=\"KeyStores/Business/MainLogic.ts\" />\r\n\r\n// IndexDb Files\r\n\r\n//Model\r\n/// <reference path=\"IndexDb/Model/Column.ts\" />\r\n/// <reference path=\"IndexDb/Model/Table.ts\" />\r\n/// <reference path=\"IndexDb/Model/DataBase.ts\" />\r\n//Business\r\n/// <reference path=\"IndexDb/Business/CreateDbLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/DeleteLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/DropDbLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/InsertLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/OpenDbLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/BaseSelectLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/SelectJoinLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/SelectLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/UpdateLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/ClearLogic.ts\" />\r\n/// <reference path=\"IndexDb/Business/MainLogic.ts\" />\r\n\r\n\r\n//Instance files\r\n/// <reference path=\"KeyStoreInstance.ts\" />\r\n/// <reference path=\"JsStoreInstance.ts\" />\r\n\r\n\r\n"]}