{"version":3,"file":"JsStorage.js","sourceRoot":"","sources":["../JsStore/Script/CodeExecutionHelper.ts","../JsStore/Script/CommonLogic.ts","../JsStore/Script/UtilsLogic.ts","../JsStore/Script/Model/Column.ts","../JsStore/Script/Model/Table.ts","../JsStore/Script/Model/DataBase.ts","../JsStore/Script/Business/BaseLogic.ts","../JsStore/Script/Business/CreateDbLogic.ts","../JsStore/Script/Business/DeleteLogic.ts","../JsStore/Script/Business/DropDbLogic.ts","../JsStore/Script/Business/InsertLogic.ts","../JsStore/Script/Business/OpenDbLogic.ts","../JsStore/Script/Business/BaseSelectLogic.ts","../JsStore/Script/Business/SelectHelperLogic.ts","../JsStore/Script/Business/SelectJoinLogic.ts","../JsStore/Script/Business/SelectLogic.ts","../JsStore/Script/Business/UpdateLogic.ts","../JsStore/Script/Business/ClearLogic.ts","../JsStore/Script/Business/MainLogic.ts","../JsStore/Script/JsStoreInstance.ts","../JsStore/Script/WebWorkerEventLogic.ts","../JsStore/Script/index.ts","../JsStore/Script/Business/BaseCountLogic.ts","../JsStore/Script/Business/CountLogic.ts","../KeyStore/CommonLogic.ts","../KeyStore/Helper.ts","../KeyStore/UtilsLogic.ts","../KeyStore/Business/BaseLogic.ts","../KeyStore/Business/GetLogic.ts","../KeyStore/Business/SetLogic.ts","../KeyStore/Business/RemoveLogic.ts","../KeyStore/Business/InitDbLogic.ts","../KeyStore/Business/MainLogic.ts","../KeyStore/KeyStoreInstance.ts","../KeyStore/index.ts"],"names":[],"mappings":"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","sourcesContent":["module JsStore {\r\n    export enum WebWorkerStatus {\r\n        Registered = \"registerd\",\r\n        Failed = \"failed\",\r\n        NotStarted = \"not_started\"\r\n    };\r\n\r\n    export class CodeExecutionHelper {\r\n        RequestQueue: Array<IWebWorkerRequest> = [];\r\n        WorkerInstance: Worker;\r\n        IsCodeExecuting = false;\r\n        WorkerStatus: WebWorkerStatus = WebWorkerStatus.NotStarted;\r\n\r\n        protected prcoessExecutionOfCode = function (request: IWebWorkerRequest) {\r\n            this.RequestQueue.push(request);\r\n            console.log(\"request pushed:\" + request.Name);\r\n            if (this.RequestQueue.length == 1 && this.WorkerStatus != WebWorkerStatus.NotStarted) {\r\n                console.log(\"request executing from processExecutionOfCode:\" + request.Name);\r\n                this.executeCode();\r\n            }\r\n        }\r\n\r\n        private executeCode = function () {\r\n            if (!this.IsCodeExecuting && this.RequestQueue.length > 0) {\r\n                console.log(\"request executing\" + this.RequestQueue[0].Name)\r\n                this.IsCodeExecuting = true;\r\n                var Request = <IWebWorkerRequest>{\r\n                    Name: this.RequestQueue[0].Name,\r\n                    Query: this.RequestQueue[0].Query\r\n                }\r\n                if (this.WorkerStatus == WebWorkerStatus.Registered) {\r\n                    this.executeCodeUsingWorker(Request);\r\n                } else {\r\n                    this.executeCodeDirect(Request);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        private executeCodeDirect = function (request: IWebWorkerRequest) {\r\n            var That = this;\r\n            new Business.Main(function (results) {\r\n                That.processFinishedRequest(results);\r\n            }).checkConnectionAndExecuteLogic(request);\r\n        }\r\n\r\n        private executeCodeUsingWorker = function (request: IWebWorkerRequest) {\r\n            this.WorkerInstance.postMessage(request);\r\n        }\r\n\r\n        private processFinishedRequest = function (message: IWebWorkerResult) {\r\n            var FinishedRequest: IWebWorkerRequest = this.RequestQueue.shift();\r\n            this.IsCodeExecuting = false;\r\n            if (FinishedRequest) {\r\n                console.log(\"request finished:\" + FinishedRequest.Name);\r\n                if (message.ErrorOccured) {\r\n                    if (FinishedRequest.OnError) {\r\n                        FinishedRequest.OnError(message.ErrorDetails);\r\n                    }\r\n                }\r\n                else {\r\n                    if (FinishedRequest.OnSuccess) {\r\n                        if (message.ReturnedValue != null) {\r\n                            FinishedRequest.OnSuccess(message.ReturnedValue);\r\n                        }\r\n                        else {\r\n                            FinishedRequest.OnSuccess();\r\n                        }\r\n                    }\r\n                }\r\n                this.executeCode();\r\n            }\r\n        }\r\n\r\n        protected createWorker = function () {\r\n            var That = this;\r\n            if (Worker) {\r\n                this.WorkerInstance = new Worker(this.getScriptUrl());\r\n                this.WorkerInstance.onmessage = function (msg) {\r\n                    That.onMessageFromWorker(msg);\r\n                }\r\n                setTimeout(function () {\r\n                    if (That.WorkerStatus != WebWorkerStatus.Failed) {\r\n                        That.WorkerStatus = WebWorkerStatus.Registered;\r\n                    }\r\n                    That.executeCode();\r\n                }, 100);\r\n            }\r\n            else {\r\n                console.warn('JsStore is not runing in web worker');\r\n                That.WorkerStatus = WebWorkerStatus.Failed;\r\n                That.executeCode();\r\n            }\r\n        }\r\n\r\n        private getScriptUrl(fileName: string) {\r\n            var ScriptUrl = \"\";\r\n            var FileName = fileName ? fileName.toLowerCase() : \"jsstorage\";\r\n            var Scripts = document.getElementsByTagName('script');\r\n            for (var i = Scripts.length - 1; i >= 0; i--) {\r\n                ScriptUrl = Scripts[i].src.toLowerCase();\r\n                if (ScriptUrl.length > 0 && ScriptUrl.indexOf(FileName) >= 0) {\r\n                    console.log(ScriptUrl);\r\n                    break;\r\n                }\r\n            }\r\n            return ScriptUrl;\r\n        }\r\n\r\n        private onMessageFromWorker = function (msg) {\r\n            if (typeof msg.data == 'string') {\r\n                var Datas = msg.data.split(':')[1];\r\n                switch (Datas) {\r\n                    case 'WorkerFailed': this.WorkerStatus = WebWorkerStatus.Failed;\r\n                        console.warn('JsStore is not runing in web worker');\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                this.processFinishedRequest(msg.data);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n","module JsStore {\r\n    export enum ErrorType {\r\n        UndefinedColumn,\r\n        UndefinedValue,\r\n        UndefinedColumnName,\r\n        UndefinedColumnValue,\r\n        NotArray,\r\n        NoValueSupplied,\r\n        ColumnNotExist,\r\n        InvalidOp,\r\n        NullValue,\r\n        BadDataType,\r\n        NextJoinNotExist,\r\n        TableNotExist\r\n    }\r\n\r\n    export interface ISelect {\r\n        From: any,\r\n        Where: any,\r\n        WhereIn: Array<IWhereIn>,\r\n        Skip: number,\r\n        Limit: number,\r\n        OnSuccess: Function,\r\n        OnError: Function,\r\n        Order: IOrder\r\n    }\r\n\r\n    export interface IOrder {\r\n        By: string, // Column name\r\n        Type: string\r\n    }\r\n\r\n    export interface ICount {\r\n        From: any,\r\n        Where: any,\r\n        WhereIn: Array<IWhereIn>,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface IWhereIn {\r\n        Column: string,\r\n        Value: {\r\n            Low: any,\r\n            High: any\r\n        },\r\n        Op\r\n    }\r\n\r\n    export interface IUpdate {\r\n        In: string,\r\n        Set: any,\r\n        Where: any,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface IInsert {\r\n        Into: string,\r\n        Values: Array<any>,\r\n        Return: boolean,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface ICondition {\r\n        Column: string,\r\n        Value: string,\r\n        Op: string\r\n    }\r\n\r\n    export interface ITableJoin {\r\n        Column: string,\r\n        Table: string,\r\n        Where: any,\r\n        WhereIn: Array<IWhereIn>,\r\n        Order: IOrder\r\n        JoinType: string,\r\n        NextJoin: INextJoin\r\n    }\r\n\r\n    export interface ISelectJoin {\r\n        From: IJoin, //IJoin\r\n        Count: boolean,\r\n        Skip: number,\r\n        Limit: number,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface IJoin {\r\n        Table1: ITableJoin,\r\n        Join: string, //inner,left,right,outer\r\n        Table2: ITableJoin\r\n    }\r\n\r\n    export interface INextJoin {\r\n        Table: string,\r\n        Column: string\r\n    }\r\n\r\n    export enum ConnectionStatus {\r\n        Connected = \"connected\",\r\n        Closed = \"closed\",\r\n        NotStarted = \"not_started\"\r\n    }\r\n\r\n    export interface JsStoreStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n    export interface IWebWorkerRequest {\r\n        Name: string,\r\n        Query: any,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface IWebWorkerResult {\r\n        ErrorOccured: boolean;\r\n        ErrorDetails: any;\r\n        ReturnedValue: any;\r\n    }\r\n\r\n\r\n}","module JsStore {\r\n    export interface IError {\r\n        Name: string,\r\n        Value: string\r\n    }\r\n    export class Utils {\r\n        static getError(errorType: ErrorType, logError: boolean = false, errorDetail: any) {\r\n            var Error: IError = {\r\n                Name: ErrorType[errorType],\r\n                Value: ''\r\n            };\r\n            switch (errorType) {\r\n                case ErrorType.NotArray: Error.Value = \"Supplied value is not an array\"; break;\r\n                case ErrorType.UndefinedColumn: Error.Value = \"Column is undefined in Where\"; break;\r\n                case ErrorType.UndefinedValue: Error.Value = \"Value is undefined in Where\"; break;\r\n                case ErrorType.UndefinedColumnName: Error.Value = \"Column name is undefined\"; break;\r\n                case ErrorType.UndefinedColumnValue: Error.Value = \"Column value is undefined\"; break;\r\n                case ErrorType.NoValueSupplied: Error.Value = \"No value supplied\"; break;\r\n                case ErrorType.InvalidOp: Error.Value = \"Invalid Op Value '\" + errorDetail['Op'] + \"'\"; break;\r\n                case ErrorType.ColumnNotExist: Error.Value = \"Column '\" + errorDetail['ColumnName'] + \"' does not exist\";\r\n                    break;\r\n                case ErrorType.NullValue: Error.Value = \"Null value is not allowed for column '\" + errorDetail['ColumnName'] + \"'\";\r\n                    break;\r\n                case ErrorType.BadDataType: Error.Value = \"Supplied value for column '\" + errorDetail['ColumnName'] + \"' does not have valid type\";\r\n                    break;\r\n                case ErrorType.NextJoinNotExist: Error.Value = \"Next join details not supplied\";\r\n                    break;\r\n                case ErrorType.TableNotExist: Error.Value = \"Table '\" + errorDetail['TableName'] + \"' does not exist\";;\r\n                    break;\r\n                default: console.error('the error type is not defined');\r\n            }\r\n            if (logError) {\r\n                console.error(\"JsStorage Error :- \" + Error.Value);\r\n            }\r\n            return Error;\r\n        }\r\n\r\n        static convertObjectintoLowerCase(obj: any) {\r\n            var keys = Object.keys(obj);\r\n            var n = keys.length;\r\n            while (n--) {\r\n                var key = keys[n];\r\n                obj[key.toLowerCase()] = obj[key]\r\n                delete obj[key]\r\n            }\r\n        }\r\n\r\n        /**\r\n         * determine and set the DataBase Type\r\n         * \r\n         * \r\n         * @memberOf MainLogic\r\n         */\r\n        static setDbType = function () {\r\n            (self as any).indexedDB = self.indexedDB || (self as any).mozIndexedDB || (self as any).webkitIndexedDB || (self as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                (self as any).IDBTransaction = (self as any).IDBTransaction || (self as any).webkitIDBTransaction || (self as any).msIDBTransaction;\r\n                (self as any).IDBKeyRange = (self as any).IDBKeyRange || (self as any).webkitIDBKeyRange || (self as any).msIDBKeyRange\r\n            }\r\n            else {\r\n                throw 'Your browser doesnot support IndexedDb';\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Model {\r\n\r\n        export interface IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n            Unique: boolean;\r\n            NotNull: boolean;\r\n            DataType: string;\r\n            Default: any;\r\n        }\r\n\r\n        export class Column implements IColumn {\r\n            Name: string;\r\n            AutoIncrement: boolean;\r\n            PrimaryKey: boolean;\r\n            Unique: boolean;\r\n            NotNull: boolean;\r\n            DataType: string;\r\n            Default: any;\r\n\r\n            constructor(key: IColumn, tableName: string) {\r\n                if (key.Name != null) {\r\n                    this.Name = key.Name;\r\n                }\r\n                else {\r\n                    throw \"Column Name is not defined for table:\" + tableName;\r\n                }\r\n                this.AutoIncrement = key.AutoIncrement != null ? key.AutoIncrement : false;\r\n                this.PrimaryKey = key.PrimaryKey != null ? key.PrimaryKey : false;\r\n                this.Unique = key.Unique != null ? key.Unique : false;\r\n                this.NotNull = key.NotNull != null ? key.NotNull : false;\r\n                this.DataType = key.DataType != null ? key.DataType : '';\r\n                this.Default = key.Default;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n","\r\nmodule JsStore {\r\n\r\n    export module Model {\r\n\r\n        export interface ITable {\r\n            Name: string;\r\n            Columns: Array<IColumn>;\r\n            Version: number;\r\n        }\r\n\r\n        export class Table implements ITable {\r\n            Name: string = \"\";\r\n            Columns: Array<Column> = [];\r\n            Version: number;\r\n            //internal Members\r\n            RequireDelete: boolean = false;\r\n            RequireCreation: boolean = false;\r\n            PrimaryKey: string = \"\";\r\n\r\n            constructor(table: ITable, dbName: string) {\r\n                this.Name = table.Name;\r\n                this.Version = table.Version == undefined ? 1 : table.Version;\r\n                var That = this;\r\n                table.Columns.forEach(function (item) {\r\n                    That.Columns.push(new Column(item, table.Name));\r\n                })\r\n\r\n                this.setRequireDelete(dbName);\r\n                this.setDbVersion(dbName);\r\n                this.setPrimaryKey(dbName);\r\n            }\r\n\r\n            //private methods\r\n\r\n            private setPrimaryKey(dbName) {\r\n                var That = this;\r\n                this.Columns.forEach(function (item) {\r\n                    if (item.PrimaryKey) {\r\n                        That.PrimaryKey = item.Name;\r\n                        KeyStore.set(\"JsStore_\" + dbName + \"_\" + That.Name + \"_\" + item.Name, true);\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            private setRequireDelete(dbName: string) {\r\n                var That = this;\r\n                KeyStore.get(\"JsStore_\" + dbName + \"_\" + this.Name + \"_Version\", function (tableVersion) {\r\n                    if (tableVersion == null) {\r\n                        That.RequireCreation = true;\r\n                    }\r\n                    else if (tableVersion != That.Version) {\r\n                        this.RequireDelete = true;\r\n                    }\r\n                });\r\n\r\n            }\r\n\r\n            private setDbVersion(dbName: string) {\r\n                var That = this;\r\n                KeyStore.get('JsStore_' + dbName + '_Db_Version', function (dbVersion) {\r\n                    //setting db version\r\n                    if (!dbVersion) {\r\n                        KeyStore.set('JsStore_' + dbName + '_Db_Version', That.Version);\r\n                    }\r\n                    else if (That.Version > dbVersion) {\r\n                        KeyStore.set('JsStore_' + dbName + '_Db_Version', That.Version);\r\n                    }\r\n\r\n                    //setting table version\r\n                    KeyStore.set(\"JsStore_\" + dbName + \"_\" + That.Name + \"_Version\", That.Version);\r\n\r\n                });\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n","\r\nmodule JsStore {\r\n    export module Model {\r\n        export interface IDataBase {\r\n            Name: string;\r\n            Tables: Array<ITable>;\r\n        }\r\n\r\n        export class DataBase implements IDataBase {\r\n            Name: string;\r\n            Tables: Array<Table> = [];\r\n\r\n            constructor(dataBase: IDataBase) {\r\n                var That = this;\r\n                this.Name = dataBase.Name;\r\n                dataBase.Tables.forEach(function (item) {\r\n                    That.Tables.push(new Table(item, That.Name));\r\n                })\r\n\r\n            }\r\n\r\n            create = function (onSuccess: Function, onError: Function) {\r\n                console.log('create Database called');\r\n                var That = this,\r\n                    createDb = function () {\r\n                        setTimeout(function () {\r\n                            var LastTable = (<ITable>That.Tables[That.Tables.length - 1]);\r\n                            KeyStore.get(\"JsStore_\" + That.Name + \"_\" + LastTable.Name + \"_Version\", function (version) {\r\n                                if (version == LastTable.Version) {\r\n                                    KeyStore.get('JsStore_' + That.Name + '_Db_Version', function (dbVersion) {\r\n                                        Business.ActiveDataBase = That;\r\n                                        new Business.CreateDb(dbVersion, onSuccess, onError)\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    createDb();\r\n                                }\r\n                            });\r\n                        }, 100);\r\n                    }\r\n                createDb();\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class Base {\r\n            Error: IError;\r\n            ErrorOccured: boolean = false;\r\n            ErrorCount = 0;\r\n            RowAffected = 0;\r\n            OnSuccess: Function;\r\n            OnError: Function;\r\n            Transaction: IDBTransaction;\r\n            ObjectStore: IDBObjectStore;\r\n\r\n            protected onErrorOccured = function (e, customError = false) {\r\n                ++this.ErrorCount;\r\n                if (this.ErrorCount == 1) {\r\n                    if (this.OnError != null) {\r\n                        if (!customError) {\r\n                            this.OnError((e as any).target.error);\r\n                        }\r\n                        else {\r\n                            this.OnError(e);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            protected onTransactionTimeout = function (e) {\r\n                console.log('transaction timed out');\r\n            }\r\n\r\n            protected isNull = function (value) {\r\n                return value == null || value.length == 0;\r\n            }\r\n\r\n            protected onExceptionOccured = function (ex: DOMException, info) {\r\n                if (ex.name == \"NotFoundError\") {\r\n                    Utils.getError(ErrorType.TableNotExist, true, info);\r\n                }\r\n                else {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n\r\n            /**\r\n            * For matching the different column value existance\r\n            * \r\n            * @private\r\n            * @param {any} where \r\n            * @param {any} value \r\n            * @returns \r\n            * \r\n            * @memberOf SelectLogic\r\n            */\r\n            protected checkForWhereConditionMatch(where, value) {\r\n                for (var Column in where) {\r\n                    if (Array.isArray(where[Column])) {\r\n                        var Status = true;\r\n                        for (var i = 0, length = where[Column].length; i < length; i++) {\r\n                            if (where[Column][i] == value[Column]) {\r\n                                Status = true;\r\n                                break;\r\n                            }\r\n                            else {\r\n                                Status = false;\r\n                            }\r\n                        };\r\n                        if (!Status) {\r\n                            return Status;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (where[Column] != value[Column]) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n\r\n            private checkWhereSchema(suppliedValue, tableName: string) {\r\n                var CurrentTable: Table,\r\n                    That = this;\r\n                //get current table\r\n                ActiveDataBase.Tables.every(function (table) {\r\n                    if (table.Name == tableName) {\r\n                        CurrentTable = table;\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n\r\n                //loop through table column and find data is valid\r\n                CurrentTable.Columns.forEach(function (column: Column) {\r\n                    if (!That.ErrorOccured) {\r\n                        if (column.Name in suppliedValue) {\r\n                            var Value = suppliedValue[column.Name],\r\n                                executeCheck = function (value) {\r\n                                    //check not null schema\r\n                                    if (column.NotNull && That.isNull(value)) {\r\n                                        That.ErrorOccured = true;\r\n                                        That.Error = Utils.getError(ErrorType.NullValue, false, { ColumnName: column.Name });\r\n                                    }\r\n\r\n                                    //check datatype\r\n                                    if (column.DataType && typeof value != column.DataType) {\r\n                                        That.ErrorOccured = true;\r\n                                        That.Error = Utils.getError(ErrorType.BadDataType, false, { ColumnName: column.Name });\r\n                                    }\r\n                                };\r\n\r\n                            if (Array.isArray(Value)) {\r\n                                Value.forEach(function (item) {\r\n                                    executeCheck(item);\r\n                                })\r\n                            }\r\n                            else {\r\n                                executeCheck(Value);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class CreateDb {\r\n            constructor(dbVersion, onSuccess: Function, onError: Function) {\r\n                var That = this,\r\n                    DbRequest = indexedDB.open(ActiveDataBase.Name, dbVersion);\r\n\r\n                DbRequest.onerror = function (event) {\r\n                    if (onError != null) {\r\n                        onError((event as any).target.error);\r\n                    }\r\n                };\r\n\r\n                DbRequest.onsuccess = function (event) {\r\n                    Status.ConStatus = ConnectionStatus.Connected;\r\n                    DbConnection = DbRequest.result;\r\n                    DbConnection.onclose = function () {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection Closed\";\r\n                    }\r\n\r\n                    DbConnection.onversionchange = function (e) {\r\n                        if (e.newVersion === null) { // An attempt is made to delete the db\r\n                            e.target.close(); // Manually close our connection to the db\r\n                        }\r\n                    };\r\n\r\n                    DbConnection.onerror = function (e) {\r\n                        Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                    }\r\n\r\n                    DbConnection.onabort = function (e) {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection aborted\";\r\n                    }\r\n\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                    //save dbSchema in keystore\r\n                    KeyStore.set(\"JsStore_\" + ActiveDataBase.Name + \"_Schema\", ActiveDataBase);\r\n                };\r\n\r\n                DbRequest.onupgradeneeded = function (event) {\r\n                    var db = (<any>event).target.result;\r\n                    ActiveDataBase.Tables.forEach(function (item) {\r\n                        if (item.RequireDelete) {\r\n                            // Delete the old datastore.    \r\n                            if (db.objectStoreNames.contains(item.Name)) {\r\n                                db.deleteObjectStore(item.Name);\r\n                            }\r\n                            createObjectStore(db, item);\r\n                        }\r\n                        else if (item.RequireCreation) {\r\n                            createObjectStore(db, item);\r\n                        }\r\n                    })\r\n\r\n                }\r\n\r\n                var createObjectStore = function (dbConnection, item: Table) {\r\n                    try {\r\n                        if (item.PrimaryKey.length > 0) {\r\n                            var Store = dbConnection.createObjectStore(item.Name, {\r\n                                keyPath: item.PrimaryKey\r\n                            });\r\n                            item.Columns.forEach(function (column: Column) {\r\n                                if (column.PrimaryKey) {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                }\r\n                                else {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                }\r\n\r\n                                if (column.AutoIncrement) {\r\n                                    KeyStore.set(\"JsStore_\" + ActiveDataBase.Name + \"_\" + item.Name + \"_\" + column.Name + \"_Value\", 0);\r\n                                }\r\n                            })\r\n                        }\r\n                        else {\r\n                            var Store = dbConnection.createObjectStore(item.Name, {\r\n                                autoIncrement: true\r\n                            });\r\n                            item.Columns.forEach(function (column: Column) {\r\n                                if (column.Unique) {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: true });\r\n                                } else {\r\n                                    Store.createIndex(column.Name, column.Name, { unique: false });\r\n                                }\r\n\r\n                                if (column.AutoIncrement) {\r\n                                    KeyStore.set(\"JsStore_\" + ActiveDataBase.Name + \"_\" + item.Name + \"_\" + column.Name + \"_Value\", 0);\r\n                                }\r\n                            })\r\n                        }\r\n                        //setting the table version\r\n                        KeyStore.set(\"JsStore_\" + ActiveDataBase.Name + \"_\" + item.Name + \"_Version\", item.Version);\r\n                    }\r\n                    catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class Delete extends Base {\r\n            Query: IDelete;\r\n            private executeWhereUndefinedLogic = function () {\r\n                var That: Delete = this,\r\n                    CursorOpenRequest = this.ObjectStore.openCursor();\r\n                CursorOpenRequest.onsuccess = function (e) {\r\n                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                    if (Cursor) {\r\n                        Cursor.delete();\r\n                        ++That.RowAffected;\r\n                        (Cursor as any).continue();\r\n                    }\r\n                }\r\n                CursorOpenRequest.onerror = function (e) {\r\n                    That.onErrorOccured(e);\r\n                }\r\n            }\r\n\r\n            private executeWhereDefinedLogic = function () {\r\n                var That = this,\r\n                    executeInnerDeleteLogic = function (column, value) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        };\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                if (That.checkForWhereConditionMatch(That.Query.Where, Cursor.value)) {\r\n                                    Cursor.delete();\r\n                                    ++That.RowAffected;\r\n                                }\r\n                                Cursor.continue();\r\n                            }\r\n\r\n                        }\r\n                    };\r\n\r\n                for (var Column in this.Query.Where) {\r\n                    if (!That.ErrorOccured) {\r\n                        if (That.ObjectStore.indexNames.contains(Column)) {\r\n                            if (Array.isArray(this.Query.Where[Column])) {\r\n                                for (var i = 0; i < this.Query.Where[Column].length; i++) {\r\n                                    executeInnerDeleteLogic(Column, this.Query.Where[Column][i])\r\n                                }\r\n                            }\r\n                            else {\r\n                                executeInnerDeleteLogic(Column, this.Query.Where[Column]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            That.ErrorOccured = true;\r\n                            That.Error = Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            That.onErrorOccured(That.Error, true);\r\n                            return;\r\n                        }\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n                super();\r\n                try {\r\n                    var That = this;\r\n                    this.Query = query;\r\n                    this.Transaction = DbConnection.transaction([query.From], \"readwrite\");\r\n                    this.ObjectStore = this.Transaction.objectStore(query.From);\r\n                    this.Transaction.oncomplete = function () {\r\n                        if (onSuccess != null) {\r\n                            onSuccess(That.RowAffected);\r\n                        }\r\n                    }\r\n                    this.Transaction.onerror = function (e) {\r\n                        That.onErrorOccured(e);\r\n                    }\r\n\r\n                    if (query.Where == undefined) {\r\n                        this.executeWhereUndefinedLogic();\r\n                    }\r\n                    else {\r\n                        this.executeWhereDefinedLogic();\r\n                    }\r\n\r\n                }\r\n                catch (ex) {\r\n                    this.onExceptionOccured(ex, { TableName: query.From });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","module JsStore {\r\n    export module Business {\r\n        export class DropDb {\r\n            constructor(name: string, onSuccess: Function, onError: Function) {\r\n\r\n                var DbDropRequest = window.indexedDB.deleteDatabase(name);\r\n                DbDropRequest.onblocked = function () {\r\n                    if (onError != null) {\r\n                        onError(\"delete database is in progress\");\r\n                    };\r\n                };\r\n                DbDropRequest.onerror = function (e) {\r\n                    if (onError != null) {\r\n                        onError((event as any).target.error);\r\n                    }\r\n                }\r\n                DbDropRequest.onsuccess = function () {\r\n                    Status.ConStatus = ConnectionStatus.Closed;\r\n                    KeyStore.remove('JsStore_' + ActiveDataBase.Name + '_Db_Version');\r\n                    ActiveDataBase.Tables.forEach(function (item: Model.ITable) {\r\n                        KeyStore.remove(\"JsStore_\" + ActiveDataBase.Name + \"_\" + item.Name);\r\n                    });\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class Insert extends Base {\r\n            ValuesAffected = [];\r\n            Query: IInsert;\r\n            ValuesIndex = 0;\r\n            Table: Model.ITable;\r\n            public onTransactionCompleted = function () {\r\n                if (this.OnSuccess != null) {\r\n                    this.OnSuccess(this.IsReturn ? this.ValuesAffected : this.RowAffected);\r\n                }\r\n            }\r\n\r\n            private insertData = function (value) {\r\n                if (value) {\r\n                    var That = this;\r\n                    That.checkSchemaAndModifyValue(value, function () {\r\n                        if (!That.ErrorOccured) {\r\n                            var Transaction = DbConnection.transaction([That.Query.Into], \"readwrite\"),\r\n                                ObjectStore = Transaction.objectStore(That.Query.Into);\r\n                            var AddResult = ObjectStore.add(value);\r\n                            AddResult.onerror = function (e) {\r\n                                That.onErrorOccured(e);\r\n                            }\r\n                            AddResult.onsuccess = function (e) {\r\n                                That.ValuesAffected.push(value);\r\n                                ++That.RowAffected;\r\n                                That.insertData(That.Query.Values[this.ValuesIndex++]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            That.onErrorOccured(That.Error, true);\r\n                        }\r\n                    });\r\n\r\n                }\r\n                else {\r\n                    this.onTransactionCompleted();\r\n                }\r\n            }\r\n\r\n            constructor(query: IInsert, onSuccess: Function, onError: Function) {\r\n                super();\r\n                try {\r\n                    this.Query = query;\r\n                    this.OnSuccess = onSuccess;\r\n                    this.OnError = onError;\r\n                    var That = this;\r\n                    this.Table = this.getTable(query.Into);\r\n                    this.insertData(this.Query.Values[this.ValuesIndex++]);\r\n                }\r\n                catch (ex) {\r\n                    this.onExceptionOccured(ex, { TableName: query.Into });\r\n                }\r\n            }\r\n\r\n            private getTable = function (tableName: string) {\r\n                var CurrentTable: Table,\r\n                    That = this;\r\n                ActiveDataBase.Tables.every(function (table) {\r\n                    if (table.Name == tableName) {\r\n                        CurrentTable = table;\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n                return CurrentTable;\r\n            }\r\n\r\n            /**\r\n             * check the defined schema and based upon that modify or create the value\r\n             * \r\n             * @private\r\n             * @param {any} value \r\n             * @param {string} tableName \r\n             * \r\n             * @memberof InsertLogic\r\n             */\r\n            private checkSchemaAndModifyValue(value, callBack: Function) {\r\n                var That = this,\r\n                    TableName = this.Table.Name,\r\n                    Index = 0,\r\n                    checkAndModifyInternal = function (column) {\r\n                        if (column) {\r\n                            var CheckNotNullAndDataType = function () {\r\n                                //check not null schema\r\n                                if (column.NotNull && value[column.Name] == null) {\r\n                                    That.ErrorOccured = true;\r\n                                    That.Error = Utils.getError(ErrorType.NullValue, false, { ColumnName: column.Name });\r\n                                }\r\n\r\n                                //check datatype\r\n                                if (column.DataType && typeof value[column.Name] != column.DataType) {\r\n                                    That.ErrorOccured = true;\r\n                                    That.Error = Utils.getError(ErrorType.BadDataType, false, { ColumnName: column.Name });\r\n                                }\r\n                                checkAndModifyInternal(That.Table.Columns[Index++]);\r\n                            };\r\n                            if (!That.ErrorOccured) {\r\n                                //check auto increment scheme\r\n                                if (column.AutoIncrement) {\r\n                                    KeyStore.get(\"JsStore_\" + ActiveDataBase.Name + \"_\" + TableName + \"_\" + column.Name + \"_Value\", function (columnValue: number) {\r\n                                        value[column.Name] = ++columnValue;\r\n                                        KeyStore.set(\"JsStore_\" + ActiveDataBase.Name + \"_\" + TableName + \"_\" + column.Name + \"_Value\", columnValue);\r\n                                        CheckNotNullAndDataType();\r\n                                    });\r\n                                }\r\n                                else if (column.Default && value[column.Name] == null) { //check Default Schema\r\n                                    value[column.Name] = column.Default;\r\n                                    CheckNotNullAndDataType();\r\n                                }\r\n                                else {\r\n                                    CheckNotNullAndDataType();\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            callBack();\r\n                        }\r\n                    }\r\n                checkAndModifyInternal(That.Table.Columns[Index++]);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class OpenDb {\r\n            constructor(dbVersion, onSuccess: Function, onError: Function) {\r\n                if (Status.ConStatus != ConnectionStatus.Connected) {\r\n                    if (ActiveDataBase.Name.length > 0) {\r\n                        var DbRequest = window.indexedDB.open(ActiveDataBase.Name, dbVersion),\r\n                            That = this;\r\n                        DbRequest.onerror = function (event) {\r\n                            if (onError != null) {\r\n                                onError((event as any).target.error);\r\n                            }\r\n                        };\r\n\r\n                        DbRequest.onsuccess = function (event) {\r\n                            Status.ConStatus = ConnectionStatus.Connected;\r\n                            DbConnection = DbRequest.result;\r\n                            DbConnection.onclose = function () {\r\n                                Status.ConStatus = ConnectionStatus.Closed;\r\n                                Status.LastError = \"Connection Closed, trying to reconnect\";\r\n                            }\r\n\r\n                            DbConnection.onversionchange = function (e) {\r\n                                if (e.newVersion === null) { // An attempt is made to delete the db\r\n                                    e.target.close(); // Manually close our connection to the db\r\n                                }\r\n                            };\r\n\r\n                            DbConnection.onerror = function (e) {\r\n                                Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                            }\r\n\r\n                            DbConnection.onabort = function (e) {\r\n                                Status.ConStatus = ConnectionStatus.Closed;\r\n                                Status.LastError = \"Connection Aborted\";\r\n                            }\r\n\r\n                            if (onSuccess != null) {\r\n                                onSuccess();\r\n                            }\r\n                        };\r\n                    }\r\n                    else {\r\n                        if (onError != null) {\r\n                            onError(<IError>{\r\n                                Name: \"DbNotFound\",\r\n                                Value: \"DataBase name is not found, please first initiate the db using createDb\"\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class BaseSelect extends Base {\r\n            Results = [];\r\n            SendResultFlag: Boolean = true;\r\n            Sorted: boolean = false;\r\n            protected getKeyRange = function (whereIn: IWhereIn) {\r\n                var KeyRange: IDBKeyRange;\r\n                switch (whereIn.Op) {\r\n                    case '-': KeyRange = IDBKeyRange.bound(whereIn.Value.Low, whereIn.Value.High, true, true); break;\r\n                    case '=-': KeyRange = IDBKeyRange.bound(whereIn.Value.Low, whereIn.Value.High, false, true); break;\r\n                    case '-=': KeyRange = IDBKeyRange.bound(whereIn.Value.Low, whereIn.Value.High, true, false); break;\r\n                    case '=-=': KeyRange = IDBKeyRange.bound(whereIn.Value.Low, whereIn.Value.High, false, false); break;\r\n                    case '>': KeyRange = IDBKeyRange.lowerBound(whereIn.Value, true); break;\r\n                    case '>=': KeyRange = IDBKeyRange.lowerBound(whereIn.Value); break;\r\n                    case '<': KeyRange = IDBKeyRange.upperBound(whereIn.Value, true); break;\r\n                    case '<=': KeyRange = IDBKeyRange.upperBound(whereIn.Value); break;\r\n                    case '~': break;//IDBKeyRange.bound(whereIn.Value, whereIn.Value + '\\uffff', false, false); break;\r\n                    case '=': KeyRange = IDBKeyRange.only(whereIn.Value); break;\r\n                    default: this.ErrorOccured = true; Utils.getError(ErrorType.InvalidOp, true, { Op: whereIn.Op });\r\n                }\r\n                return KeyRange;\r\n\r\n            }\r\n\r\n            protected filterResultBasedOnOp = function (whereIn: IWhereIn) {\r\n                var That = this,\r\n                    Column = whereIn.Column,\r\n                    Value = whereIn.Value,\r\n                    ValuesFound = [],\r\n                    executeGreaterThan = function () {\r\n                        That.Results.forEach(function (item) {\r\n                            if (item[Column] > Value) {\r\n                                ValuesFound.push(item);\r\n                            }\r\n                        });\r\n                        That.Results = ValuesFound;\r\n                    },\r\n                    executeLessThan = function () {\r\n                        That.Results.forEach(function (item) {\r\n                            if (item[Column] > Value) {\r\n                                ValuesFound.push(item);\r\n                            }\r\n                        });\r\n                        That.Results = ValuesFound;\r\n                    },\r\n                    executeContains = function () {\r\n                        if (typeof That.Results[0][Column] == 'string') {\r\n                            Value = (Value as any).toLowerCase();\r\n                            That.Results.forEach(function (item) {\r\n                                if (item[Column].toLowerCase().indexOf(Value) >= 0) {\r\n                                    ValuesFound.push(item);\r\n                                }\r\n                            });\r\n                            That.Results = ValuesFound;\r\n                        }\r\n                        else {\r\n                            executeEqualTo();\r\n                        }\r\n\r\n                    },\r\n                    executeEqualTo = function () {\r\n                        That.Results.forEach(function (item) {\r\n                            if (item[Column] == Value) {\r\n                                ValuesFound.push(item);\r\n                            }\r\n                        });\r\n                        That.Results = ValuesFound;\r\n                    },\r\n                    executeBetweenIn = function () {\r\n                        var LowValue = Value.Low, Highvalue = Value.High;\r\n                        if (whereIn.Op == '-') {\r\n                            That.Results.forEach(function (item) {\r\n                                if (item[Column] > LowValue && item[Column] < Highvalue) {\r\n                                    ValuesFound.push(item);\r\n                                }\r\n                            });\r\n                        }\r\n                        else if (whereIn.Op == '=-') {\r\n                            That.Results.forEach(function (item) {\r\n                                if (item[Column] >= LowValue && item[Column] <= Highvalue) {\r\n                                    ValuesFound.push(item);\r\n                                }\r\n                            });\r\n                        }\r\n                        else if (whereIn.Op == '-=') {\r\n                            That.Results.forEach(function (item) {\r\n                                if (item[Column] >= LowValue && item[Column] < Highvalue) {\r\n                                    ValuesFound.push(item);\r\n                                }\r\n                            });\r\n                        }\r\n                        else if (whereIn.Op == '=-=') {\r\n                            That.Results.forEach(function (item) {\r\n                                if (item[Column] >= LowValue && item[Column] <= Highvalue) {\r\n                                    ValuesFound.push(item);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        That.Results = ValuesFound;\r\n                    },\r\n                    executeGreaterThanEqual = function () {\r\n                        That.Results.forEach(function (item) {\r\n                            if (item[Column] >= Value) {\r\n                                ValuesFound.push(item);\r\n                            }\r\n                        });\r\n                        That.Results = ValuesFound;\r\n                    },\r\n                    executeLessThanEqual = function () {\r\n                        That.Results.forEach(function (item) {\r\n                            if (item[Column] <= Value) {\r\n                                ValuesFound.push(item);\r\n                            }\r\n                        });\r\n                        That.Results = ValuesFound;\r\n                    };\r\n                switch (whereIn.Op) {\r\n                    case '-':\r\n                    case '=-':\r\n                    case '-=':\r\n                    case '=-=': executeBetweenIn(); break;\r\n                    case '>': executeGreaterThan(); break;\r\n                    case '>=': executeGreaterThanEqual(); break;\r\n                    case '<': executeLessThan(); break;\r\n                    case '<=': executeLessThanEqual(); break;\r\n                    case '~': executeContains(); break;\r\n                    case '=': executeEqualTo(); break;\r\n                    default: this.ErrorOccured = true; Utils.getError(ErrorType.InvalidOp, true, { Op: whereIn.Op });\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class SelectHelper extends BaseSelect {\r\n            Query: ISelect;\r\n\r\n            protected executeMultipleWhereInLogic = function (whereInArray: Array<IWhereIn>) {\r\n                var That = this,\r\n                    KeyRange: IDBKeyRange,\r\n                    CurrentIndex = 0,\r\n                    ExecuteLogic = function () {\r\n                        ++CurrentIndex;\r\n                        if (CurrentIndex != whereInArray.length) {\r\n                            That.filterResultBasedOnOp(whereInArray[CurrentIndex]);\r\n                            ExecuteLogic();\r\n                        }\r\n                        else if (That.OnSuccess) {\r\n                            That.OnSuccess(That.Results);\r\n                        }\r\n                    };\r\n                this.SendResultFlag = false;\r\n                this.executeSingleWhereInLogic(whereInArray[CurrentIndex], function () {\r\n                    ExecuteLogic();\r\n                });\r\n            }\r\n\r\n            protected executeSingleWhereInLogic = function (whereIn: IWhereIn, callBack: Function = null) {\r\n                var That = this,\r\n                    KeyRange: IDBKeyRange = this.getKeyRange(whereIn);\r\n\r\n                if (!this.ErrorOccured) {\r\n                    var CursorOpenRequest,\r\n                        OnCursorSuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                That.Results.push(Cursor.value);\r\n                                Cursor.continue();\r\n                            }\r\n                            else if (callBack) {\r\n                                callBack();\r\n                            }\r\n\r\n                        },\r\n                        OnCursorError = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        };\r\n                    if (this.ObjectStore.indexNames.contains(whereIn.Column)) {\r\n                        if (whereIn.Op == '~' && typeof whereIn.Value == 'string') {\r\n                            var Value = (<any>whereIn.Value).toLowerCase(),\r\n                                Column = whereIn.Column;\r\n                            CursorOpenRequest = this.ObjectStore.index(whereIn.Column).openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    if (Cursor.value[Column].toLowerCase().indexOf(Value) >= 0) {\r\n                                        That.Results.push(Cursor.value);\r\n                                    }\r\n                                    Cursor.continue();\r\n                                }\r\n                                else if (callBack) {\r\n                                    callBack();\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            CursorOpenRequest = this.ObjectStore.index(whereIn.Column).openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                        }\r\n                        CursorOpenRequest.onerror = OnCursorError;\r\n                    }\r\n                    else {\r\n                        Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: whereIn.Column });\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\n","module JsStore {\r\n    export module Business {\r\n        export class SelectJoin extends BaseSelect {\r\n            Query: ISelectJoin;\r\n            QueryStack: Array<ITableJoin> = [];\r\n            CurrentQueryStackIndex = 0;\r\n\r\n            private onTransactionCompleted = function (e) {\r\n                if (this.OnSuccess != null && (this.QueryStack.length == this.CurrentQueryStackIndex + 1)) {\r\n                    if (this.Query['Count']) {\r\n                        this.OnSuccess(this.Results.length);\r\n                    }\r\n                    else {\r\n                        if (this.Query['Skip'] && this.Query['Limit']) {\r\n                            this.Results.splice(0, this.Query['Skip']);\r\n                            this.Results.splice(this.Query['Limit'] - 1, this.Results.length);\r\n                        }\r\n                        else if (this.Query['Skip']) {\r\n                            this.Results.splice(0, this.Query['Skip']);\r\n                        }\r\n                        else if (this.Query['Limit']) {\r\n                            this.Results.splice(this.Query['Limit'] - 1, this.Results.length);\r\n                        }\r\n                        this.OnSuccess(this.Results);\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            private executeWhereJoinLogic = function (joinQuery: ITableJoin, query: ITableJoin) {\r\n                var That = <SelectJoin>this,\r\n                    Results = [],\r\n                    JoinIndex = 0,\r\n                    Column = query.Column,\r\n                    TmpResults = That.Results,\r\n                    Item,\r\n                    ResultLength = TmpResults.length;\r\n\r\n                //get the data from query table\r\n                new Select(<ISelect>{\r\n                    From: query.Table,\r\n                    Where: query.Where,\r\n                    WhereIn: query.WhereIn,\r\n                    Order: query.Order\r\n                }, function (results) {\r\n                    //perform join\r\n                    results.forEach(function (value, index) {\r\n                        //search item through each global result\r\n                        for (var i = 0; i < ResultLength; i++) {\r\n                            Item = TmpResults[i][joinQuery.Table][joinQuery.Column];\r\n                            //if (Item == value[query.Column]) {\r\n                            doJoin(Item, value, i);\r\n                            //}\r\n                        }\r\n                    });\r\n                    That.Results = Results;\r\n                    //check if further execution needed\r\n                    if (That.QueryStack.length > That.CurrentQueryStackIndex + 1) {\r\n                        That.startExecutionJoinLogic();\r\n                    }\r\n                    else {\r\n                        That.onTransactionCompleted(null);\r\n                    }\r\n\r\n                }, function (error) {\r\n                    That.onErrorOccured(error);\r\n                });\r\n\r\n                var doJoin = function (value1, value2, itemIndex) {\r\n                    Results[JoinIndex] = {};\r\n                    if (value1 == value2[query.Column]) {\r\n                        Results[JoinIndex][query.Table] = value2;\r\n                        //copy other relative data into current result\r\n                        for (var j = 0; j < That.CurrentQueryStackIndex; j++) {\r\n                            Results[JoinIndex][That.QueryStack[j].Table] = TmpResults[itemIndex][That.QueryStack[j].Table];\r\n                        }\r\n                        ++JoinIndex;\r\n                    }\r\n                    else if (query.JoinType == 'left') {\r\n                        //left join\r\n                        Results[JoinIndex] = {};\r\n                        Results[JoinIndex][query.Table] = null;\r\n                        //copy other relative data into current result\r\n                        for (var j = 0; j < That.CurrentQueryStackIndex; j++) {\r\n                            Results[JoinIndex][That.QueryStack[j].Table] = TmpResults[itemIndex][That.QueryStack[j].Table];\r\n                        }\r\n                        //Results[JoinIndex][joinQuery.Table] = TmpResults[ItemIndex][joinQuery.Table];\r\n                        ++JoinIndex;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            private executeRightJoin = function (joinQuery: ITableJoin, query: ITableJoin) {\r\n                var That = <SelectJoin>this,\r\n                    Results = [],\r\n                    JoinIndex = 0,\r\n                    Column = query.Column,\r\n                    TmpResults = That.Results,\r\n                    Item,\r\n                    ResultLength = TmpResults.length,\r\n                    ItemIndex = 0,\r\n                    Where = {},\r\n                    onExecutionFinished = function () {\r\n                        That.Results = Results;\r\n                        //check if further execution needed\r\n                        if (That.QueryStack.length > That.CurrentQueryStackIndex + 1) {\r\n                            That.startExecutionJoinLogic();\r\n                        }\r\n                        else {\r\n                            That.onTransactionCompleted(null);\r\n                        }\r\n                    },\r\n                    doRightJoin = function (results) {\r\n                        var ValueFound = false;\r\n                        results.forEach(function (item, index) {\r\n                            for (ItemIndex = 0; ItemIndex < ResultLength; ItemIndex++) {\r\n                                if (item[query.Column] == TmpResults[ItemIndex][joinQuery.Table][joinQuery.Column]) {\r\n                                    ValueFound = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            Results[index] = {};\r\n                            Results[index][query.Table] = item;\r\n                            if (ValueFound) {\r\n                                ValueFound = false;\r\n                                for (var j = 0; j < That.CurrentQueryStackIndex; j++) {\r\n                                    Results[index][That.QueryStack[j].Table] = TmpResults[ItemIndex][That.QueryStack[j].Table];\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (var j = 0; j < That.CurrentQueryStackIndex; j++) {\r\n                                    Results[index][That.QueryStack[j].Table] = null;\r\n                                }\r\n                            }\r\n                        });\r\n                    },\r\n                    executeLogic = function () {\r\n                        new Select(<ISelect>{\r\n                            From: query.Table,\r\n                            Where: query.Where,\r\n                            WhereIn: query.WhereIn,\r\n                            Order: query.Order\r\n                        }, function (results) {\r\n                            doRightJoin(results);\r\n                            onExecutionFinished();\r\n                        }, function (error) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(error);\r\n                        });\r\n                    };\r\n                executeLogic();\r\n            }\r\n            private executeWhereUndefinedLogicForJoin = function (joinQuery: ITableJoin, query: ITableJoin) {\r\n                var That = <SelectJoin>this,\r\n                    Results = [],\r\n                    JoinIndex = 0,\r\n                    Column = query.Column,\r\n                    TmpResults = That.Results,\r\n                    Item,\r\n                    ResultLength = TmpResults.length,\r\n                    ItemIndex = 0,\r\n                    Where = {},\r\n                    onExecutionFinished = function () {\r\n                        That.Results = Results;\r\n                        //check if further execution needed\r\n                        if (That.QueryStack.length > That.CurrentQueryStackIndex + 1) {\r\n                            That.startExecutionJoinLogic();\r\n                        }\r\n                        else {\r\n                            That.onTransactionCompleted(null);\r\n                        }\r\n                    },\r\n                    doJoin = function (results) {\r\n                        if (results.length > 0) {\r\n                            results.forEach(function (value) {\r\n                                Results[JoinIndex] = {};\r\n                                Results[JoinIndex][query.Table] = value;\r\n                                //copy other relative data into current result\r\n                                for (var j = 0; j < That.CurrentQueryStackIndex; j++) {\r\n                                    Results[JoinIndex][That.QueryStack[j].Table] = TmpResults[ItemIndex][That.QueryStack[j].Table];\r\n                                }\r\n                                ++JoinIndex;\r\n                            });\r\n                        }\r\n                        else if (query.JoinType == 'left') {\r\n                            //left join\r\n                            Results[JoinIndex] = {};\r\n                            Results[JoinIndex][query.Table] = null;\r\n                            //copy other relative data into current result\r\n                            for (var j = 0; j < That.CurrentQueryStackIndex; j++) {\r\n                                Results[JoinIndex][That.QueryStack[j].Table] = TmpResults[ItemIndex][That.QueryStack[j].Table];\r\n                            }\r\n                            //Results[JoinIndex][joinQuery.Table] = TmpResults[ItemIndex][joinQuery.Table];\r\n                            ++JoinIndex;\r\n                        }\r\n                    },\r\n                    executeLogic = function () {\r\n                        if (ItemIndex < ResultLength) {\r\n                            if (!That.ErrorOccured) {\r\n                                Where[query.Column] = TmpResults[ItemIndex][joinQuery.Table][joinQuery.Column];\r\n                                new Select(<ISelect>{\r\n                                    From: query.Table,\r\n                                    Where: Where,\r\n                                    Order: query.Order\r\n                                }, function (results) {\r\n                                    doJoin(results);\r\n                                    ++ItemIndex;\r\n                                    executeLogic();\r\n                                }, function (error) {\r\n                                    That.ErrorOccured = true;\r\n                                    That.onErrorOccured(error);\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            onExecutionFinished();\r\n                        }\r\n                    };\r\n                executeLogic();\r\n            }\r\n\r\n            private startExecutionJoinLogic() {\r\n                var JoinQuery;\r\n                if (this.CurrentQueryStackIndex >= 1 && this.CurrentQueryStackIndex % 2 == 1) {\r\n                    JoinQuery = <ITableJoin>{\r\n                        Table: this.QueryStack[this.CurrentQueryStackIndex].NextJoin.Table,\r\n                        Column: this.QueryStack[this.CurrentQueryStackIndex].NextJoin.Column\r\n                    }\r\n                    this.CurrentQueryStackIndex++;\r\n                }\r\n                else {\r\n                    JoinQuery = this.QueryStack[this.CurrentQueryStackIndex++];\r\n                }\r\n\r\n                var Query = this.QueryStack[this.CurrentQueryStackIndex];\r\n                if (Query.JoinType == 'right') {\r\n                    this.executeRightJoin(JoinQuery, Query);\r\n                }\r\n                else if (Query.WhereIn || Query.Where) {\r\n                    this.executeWhereJoinLogic(JoinQuery, Query);\r\n                }\r\n                else {\r\n                    this.executeWhereUndefinedLogicForJoin(JoinQuery, Query);\r\n                }\r\n\r\n            }\r\n\r\n            constructor(query: ISelectJoin, onSuccess: Function, onError: Function) {\r\n                super();\r\n                this.OnSuccess = onSuccess;\r\n                this.OnError = onError;\r\n                this.Query = query;\r\n                var That = this,\r\n                    TableList = []; // used to open the multiple object store\r\n\r\n                var convertQueryIntoStack = function (query) {\r\n                    if (query.hasOwnProperty('Table1')) {\r\n                        query.Table2['JoinType'] = (<IJoin>query).Join == undefined ? 'inner' : (<IJoin>query).Join.toLowerCase();\r\n                        That.QueryStack.push(query.Table2);\r\n                        if (That.QueryStack.length % 2 == 0) {\r\n                            That.QueryStack[That.QueryStack.length - 1].NextJoin = query.NextJoin;\r\n                        }\r\n                        TableList.push(query.Table2.Table);\r\n                        return convertQueryIntoStack(query.Table1);\r\n                    }\r\n                    else {\r\n                        That.QueryStack.push(query);\r\n                        TableList.push(query.Table);\r\n                        return;\r\n                    }\r\n                };\r\n                convertQueryIntoStack(query.From);\r\n                this.QueryStack.reverse();\r\n                //get the data for first table\r\n                if (!this.ErrorOccured) {\r\n                    new Select(<ISelect>{\r\n                        From: this.QueryStack[0].Table,\r\n                        Where: this.QueryStack[0].Where,\r\n                        WhereIn: this.QueryStack[0].WhereIn\r\n                    }, function (results) {\r\n                        var TableName = That.QueryStack[0].Table;\r\n                        results.forEach(function (item, index) {\r\n                            That.Results[index] = {};\r\n                            That.Results[index][TableName] = item;\r\n                        });\r\n                        That.startExecutionJoinLogic();\r\n                    }, function (error) {\r\n                        That.onErrorOccured(error);\r\n                    });\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class Select extends SelectHelper {\r\n            private executeWhereInLogic = function () {\r\n                if (Array.isArray(this.Query.WhereIn)) {\r\n                    if (this.Query.WhereIn.length > 0) {\r\n                        this.executeMultipleWhereInLogic(this.Query.WhereIn);\r\n                    }\r\n                    else {\r\n                        this.executeWhereUndefinedLogic();\r\n                    }\r\n                }\r\n                else {\r\n                    this.executeSingleWhereInLogic(this.Query.WhereIn);\r\n                }\r\n            }\r\n\r\n            private executeWhereLogic = function () {\r\n                var Column,\r\n                    SkipRecord = this.Query.Skip,\r\n                    LimitRecord = this.Query.Limit,\r\n                    That: Select = this,\r\n                    executeInnerWhereLogic = function (column, value) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n                        if (SkipRecord && LimitRecord) {\r\n                            var RecordSkipped = false;\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    if (RecordSkipped) {\r\n                                        if (That.Results.length != LimitRecord) {\r\n                                            That.Results.push(Cursor);\r\n                                            Cursor.continue();\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        RecordSkipped = true;\r\n                                        Cursor.advance(SkipRecord - 1);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (SkipRecord) { //skip exist\r\n                            var RecordSkipped = false;\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    if (RecordSkipped) {\r\n                                        That.Results.push(Cursor);\r\n                                        Cursor.continue();\r\n                                    }\r\n                                    else {\r\n                                        RecordSkipped = true;\r\n                                        Cursor.advance(SkipRecord - 1);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (LimitRecord) {\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor && That.Results.length != LimitRecord) {\r\n                                    That.Results.push(Cursor.value);\r\n                                    Cursor.continue();\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            CursorOpenRequest.onsuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    if (That.checkForWhereConditionMatch(That.Query.Where, Cursor.value)) {\r\n                                        That.Results.push(Cursor.value);\r\n                                    }\r\n                                    Cursor.continue();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                for (Column in this.Query.Where) {\r\n                    if (!this.ErrorOccured) {\r\n                        if (this.ObjectStore.indexNames.contains(Column)) {\r\n                            if (Array.isArray(this.Query.Where[Column])) {\r\n                                for (var i = 0; i < this.Query.Where[Column].length; i++) {\r\n                                    executeInnerWhereLogic(Column, this.Query.Where[Column][i])\r\n                                }\r\n                            }\r\n                            else {\r\n                                executeInnerWhereLogic(Column, this.Query.Where[Column]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            That.ErrorOccured = true;\r\n                            That.Error = Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            That.onErrorOccured(That.Error, true);\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            private executeWhereUndefinedLogic = function () {\r\n                var That: Select = this,\r\n                    CursorOpenRequest;\r\n                if (this.Query.Order && this.Query.Order.By) {\r\n                    if (That.ObjectStore.indexNames.contains(this.Query.Order.By)) {\r\n                        var OrderType = this.Query.Order.Type && this.Query.Order.Type.toLowerCase() == 'desc' ? 'prev' : 'next';\r\n                        this.Sorted = true;\r\n                        CursorOpenRequest = this.ObjectStore.index(That.Query.Order.By).openCursor(null, OrderType);\r\n                    }\r\n                    else {\r\n                        Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: this.Query.Order.By });\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    CursorOpenRequest = this.ObjectStore.openCursor();\r\n                }\r\n                CursorOpenRequest.onsuccess = function (e) {\r\n                    var Cursor = (<any>e).target.result;\r\n                    if (Cursor) {\r\n                        That.Results.push(Cursor.value);\r\n                        (Cursor as any).continue();\r\n                    }\r\n\r\n                }\r\n                CursorOpenRequest.onerror = function (e) {\r\n                    That.onErrorOccured(e);\r\n                }\r\n            }\r\n\r\n            constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnSuccess = onSuccess;\r\n                this.OnError = onError;\r\n                try {\r\n                    this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                    this.Transaction.oncomplete = function (e) {\r\n                        if (That.Results.length > 0 && !That.Sorted && query.Order && query.Order.By) {\r\n                            query.Order.Type = query.Order.Type ? query.Order.Type.toLowerCase() : 'asc';\r\n                            var OrderColumn = query.Order.By,\r\n                                sortNumberInAsc = function () {\r\n                                    That.Results.sort(function (a, b) {\r\n                                        return a[OrderColumn] - b[OrderColumn];\r\n                                    });\r\n                                },\r\n                                sortNumberInDesc = function () {\r\n                                    That.Results.sort(function (a, b) {\r\n                                        return b[OrderColumn] - a[OrderColumn];\r\n                                    });\r\n                                },\r\n                                sortAlphabetInAsc = function () {\r\n                                    That.Results.sort(function (a, b) {\r\n                                        return a[OrderColumn].toLowerCase().localeCompare(b[OrderColumn].toLowerCase());\r\n                                    });\r\n                                },\r\n                                sortAlphabetInDesc = function () {\r\n                                    That.Results.sort(function (a, b) {\r\n                                        return b[OrderColumn].toLowerCase().localeCompare(a[OrderColumn].toLowerCase());\r\n                                    });\r\n                                };\r\n                            if (typeof That.Results[0][OrderColumn] == 'string') {\r\n                                if (query.Order.Type == 'asc') {\r\n                                    sortAlphabetInAsc();\r\n                                }\r\n                                else {\r\n                                    sortAlphabetInDesc();\r\n                                }\r\n                            }\r\n                            else if (typeof That.Results[0][OrderColumn] == 'number') {\r\n                                if (query.Order.Type == 'asc') {\r\n                                    sortNumberInAsc();\r\n                                }\r\n                                else {\r\n                                    sortNumberInDesc();\r\n                                }\r\n                            }\r\n                            if (That.OnSuccess) {\r\n                                That.OnSuccess(That.Results);\r\n                            }\r\n\r\n                        }\r\n                        else if (That.SendResultFlag) {\r\n                            if (That.OnSuccess) {\r\n                                That.OnSuccess(That.Results);\r\n                            }\r\n                        }\r\n                    };\r\n                    (<any>this.Transaction).ontimeout = function () {\r\n                        console.log('transaction timed out');\r\n                    }\r\n                    this.ObjectStore = this.Transaction.objectStore(query.From);\r\n                    if (query.WhereIn != undefined) {\r\n                        this.executeWhereInLogic();\r\n                    }\r\n                    else if (query.Where != undefined) {\r\n                        this.executeWhereLogic();\r\n                    }\r\n                    else {\r\n                        this.executeWhereUndefinedLogic();\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    this.onExceptionOccured(ex, { TableName: query.From });\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class Update extends Base {\r\n            Query: IUpdate;\r\n\r\n            private executeWhereUndefinedlogic() {\r\n                var That = this,\r\n                    CursorOpenRequest = this.ObjectStore.openCursor();\r\n                CursorOpenRequest.onsuccess = function (e) {\r\n                    var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                    if (Cursor) {\r\n                        for (var key in That.Query.Set) {\r\n                            Cursor.value[key] = That.Query.Set[key];\r\n                        }\r\n                        Cursor.update(Cursor.value);\r\n                        ++That.RowAffected;\r\n                        (Cursor as any).continue();\r\n                    }\r\n\r\n                }\r\n                CursorOpenRequest.onerror = function (e) {\r\n                    That.onErrorOccured(e);\r\n                }\r\n\r\n            }\r\n\r\n            private executeWhereLogic() {\r\n                var That = this,\r\n                    executeInnerUpdateLogic = function (column, value) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                if (That.checkForWhereConditionMatch(That.Query.Where, Cursor.value)) {\r\n                                    for (var key in That.Query.Set) {\r\n                                        Cursor.value[key] = That.Query.Set[key];\r\n                                    }\r\n                                    Cursor.update(Cursor.value);\r\n                                    ++That.RowAffected;\r\n                                }\r\n                                Cursor.continue();\r\n                            }\r\n\r\n                        }\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n\r\n                    };\r\n                for (var Column in this.Query.Where) {\r\n                    if (!this.ErrorOccured) {\r\n                        if (this.ObjectStore.indexNames.contains(Column)) {\r\n                            if (Array.isArray(this.Query.Where[Column])) {\r\n                                for (var i = 0; i < this.Query.Where[Column].length; i++) {\r\n                                    executeInnerUpdateLogic(Column, this.Query.Where[Column][i])\r\n                                }\r\n                            }\r\n                            else {\r\n                                executeInnerUpdateLogic(Column, this.Query.Where[Column]);\r\n                            }\r\n                        }\r\n                        else {\r\n                            That.ErrorOccured = true;\r\n                            That.Error = Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                            That.onErrorOccured(That.Error, true);\r\n                        }\r\n                        break;\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            constructor(query: IUpdate, onSuccess: Function, onError: Function) {\r\n                try {\r\n                    super();\r\n                    this.OnError = onError;\r\n                    this.checkSchema(query.Set, query.In);\r\n                    if (!this.ErrorOccured) {\r\n                        this.Query = query;\r\n                        this.OnSuccess = onSuccess;\r\n                        this.Transaction = DbConnection.transaction([query.In], \"readwrite\");\r\n                        this.ObjectStore = this.Transaction.objectStore(query.In);\r\n                        var That = this;\r\n                        this.Transaction.oncomplete = function (e) {\r\n                            if (onSuccess != null) {\r\n                                onSuccess(That.RowAffected);\r\n                            }\r\n                        };\r\n                        (<any>this.Transaction).ontimeout = function () {\r\n                            console.log('transaction timed out');\r\n                        }\r\n                        if (query.Where == undefined) {\r\n                            this.executeWhereUndefinedlogic();\r\n                        }\r\n                        else {\r\n                            this.executeWhereLogic();\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.onErrorOccured(this.Error, true);\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    this.onExceptionOccured(ex, { TableName: query.In });\r\n                }\r\n            }\r\n\r\n            private checkSchema(suppliedValue, tableName: string) {\r\n                var CurrentTable: Table,\r\n                    That = this;\r\n                //get current table\r\n                ActiveDataBase.Tables.every(function (table) {\r\n                    if (table.Name == tableName) {\r\n                        CurrentTable = table;\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n\r\n                //loop through table column and find data is valid\r\n                CurrentTable.Columns.forEach(function (column: Column) {\r\n                    if (!That.ErrorOccured) {\r\n                        if (column.Name in suppliedValue) {\r\n                            var executeCheck = function (value) {\r\n                                //check not null schema\r\n                                if (column.NotNull && That.isNull(value)) {\r\n                                    That.ErrorOccured = true;\r\n                                    That.Error = Utils.getError(ErrorType.NullValue, false, { ColumnName: column.Name });\r\n                                }\r\n\r\n                                //check datatype\r\n                                if (column.DataType && typeof value != column.DataType) {\r\n                                    That.ErrorOccured = true;\r\n                                    That.Error = Utils.getError(ErrorType.BadDataType, false, { ColumnName: column.Name });\r\n                                }\r\n                            };\r\n                            executeCheck(suppliedValue[column.Name]);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","module JsStore {\r\n    export module Business {\r\n        export class Clear {\r\n            constructor(tableName: string, onSuccess: Function, onError: Function) {\r\n                var ObjectStore: IDBObjectStore = DbConnection.transaction([tableName], \"readwrite\").Transaction.objectStore(tableName)\r\n                    , ClearRequest = ObjectStore.clear();\r\n\r\n                ClearRequest.onsuccess = function (e) {\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                }\r\n\r\n                ClearRequest.onerror = function (e) {\r\n                    if (onError != null) {\r\n                        onError();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","\r\nmodule JsStore {\r\n    export module Business {\r\n        export var DbConnection,\r\n            ActiveDataBase: DataBase,\r\n            Status: JsStoreStatus = <JsStoreStatus>{\r\n                ConStatus: ConnectionStatus.NotStarted,\r\n                LastError: \"\"\r\n            };\r\n\r\n\r\n        export class Main {\r\n            OnSuccess: Function;\r\n            constructor(onSuccess = null) {\r\n                this.OnSuccess = onSuccess;\r\n            }\r\n\r\n            public checkConnectionAndExecuteLogic = function (request: IWebWorkerRequest) {\r\n                console.log('executing logic from checkConnection:' + request.Name);\r\n                if (request.Name == 'create_db' || request.Name == 'open_db') {\r\n                    this.executeLogic(request);\r\n                }\r\n                else {\r\n                    if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                        this.executeLogic(request);\r\n                    }\r\n                    else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                        var That = this;\r\n                        setTimeout(function () {\r\n                            That.checkConnectionAndExecuteLogic(request);\r\n                        }, 50);\r\n                    }\r\n                    else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n                        var That = this;\r\n                        this.openDb(function () {\r\n                            That.checkConnectionAndExecuteLogic(request);\r\n                        }, function (err) {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            private returnResult = function (result) {\r\n                if (this.OnSuccess) {\r\n                    this.OnSuccess(result);\r\n                }\r\n                else {\r\n                    (self as any).postMessage(result);\r\n                }\r\n            }\r\n\r\n            private executeLogic = function (request: IWebWorkerRequest) {\r\n                var That = this,\r\n                    OnSuccess = function (results) {\r\n                        That.returnResult(<IWebWorkerResult>{\r\n                            ReturnedValue: results\r\n                        });\r\n                    },\r\n                    OnError = function (err) {\r\n                        That.returnResult(<IWebWorkerResult>{\r\n                            ErrorOccured: true,\r\n                            ErrorDetails: err\r\n                        });\r\n                    }\r\n\r\n                switch (request.Name) {\r\n                    case 'select':\r\n                        this.select(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'insert': this.insert(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'update': this.update(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'delete': this.delete(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'create_db': this.createDb(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'clear': this.clear(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'dropDb': this.dropDb(OnSuccess, OnError);\r\n                        break;\r\n                    case 'count': this.count(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'open_db': this.openDb(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            openDb = function (dbName, onSuccess: Function, onError: Function) {\r\n                KeyStore.get(\"JsStore_\" + dbName + '_Db_Version', function (dbVersion) {\r\n                    if (dbVersion != null) {\r\n                        KeyStore.get(\"JsStore_\" + dbName + \"_Schema\", function (result) {\r\n                            ActiveDataBase = result;\r\n                            new OpenDb(dbVersion, onSuccess, onError);\r\n                        });\r\n                    }\r\n                    else {\r\n                        console.error('Database: ' + dbName + \" does not exist\");\r\n                    }\r\n                });\r\n            }\r\n\r\n            public closeDb = function () {\r\n                if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                    DbConnection.close();\r\n                }\r\n            }\r\n\r\n            public dropDb = function (onSuccess: Function, onError: Function) {\r\n                new DropDb(ActiveDataBase.Name, onSuccess, onError);\r\n            }\r\n\r\n            public update = function (query: IUpdate, onSuccess: Function, onError: Function) {\r\n                new Update(query, onSuccess, onError);\r\n            }\r\n\r\n            public insert = function (query: IInsert, onSuccess: Function, onError: Function) {\r\n                if (!Array.isArray(query.Values)) {\r\n                    throw \"Value should be array :- supplied value is not array\";\r\n                }\r\n                else if (query.Values.length > 0) {\r\n                    new Insert(query, onSuccess, onError);\r\n                }\r\n                else {\r\n                    if (onError != null) {\r\n                        onError(Utils.getError(ErrorType.NoValueSupplied, true, null));\r\n                    }\r\n                }\r\n            }\r\n\r\n            public delete = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                new Delete(query, onSuccess, onError);\r\n            }\r\n\r\n            public select = function (query, onSuccess: Function, onError: Function) {\r\n                if (typeof query.From === 'object') {\r\n                    new SelectJoin(<ISelectJoin>query, onSuccess, onError);\r\n                }\r\n                else {\r\n                    new Select(query, onSuccess, onError);\r\n                }\r\n            }\r\n\r\n            public count = function (query, onSuccess: Function, onError: Function) {\r\n                if (typeof query.From === 'object') {\r\n                    query['Count'] = true;\r\n                    new SelectJoin(query, onSuccess, onError);\r\n                }\r\n                else {\r\n                    new Count(query, onSuccess, onError);\r\n                }\r\n            }\r\n\r\n            public createDb = function (dataBase, onSuccess: Function, onError: Function) {\r\n                new DataBase(dataBase).create(onSuccess, onError);\r\n            }\r\n\r\n            public clear = function (tableName: string, onSuccess: Function, onError: Function) {\r\n                new Clear(tableName, onSuccess, onError);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import Model = JsStore.Model;\r\nimport DataBase = Model.DataBase;\r\nimport Column = Model.Column;\r\nimport Table = Model.Table;\r\nmodule JsStore {\r\n\r\n    export class Instance extends CodeExecutionHelper {\r\n        constructor(dbName) {\r\n            super();\r\n            Utils.setDbType();\r\n            if (dbName != null) {\r\n                this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                    Name: 'open_db',\r\n                    Query: dbName\r\n                });\r\n                return this;\r\n            }\r\n            try {\r\n                this.createWorker();\r\n            }\r\n            catch (ex) {\r\n                this.WorkerStatus = WebWorkerStatus.Failed;\r\n                console.warn('JsStore is not runing in web worker');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * creates DataBase\r\n         * \r\n         * @param {IDataBase} dataBase \r\n         * @param {Function} onSuccess \r\n         * @param {Function} [onError=null] \r\n         * @returns \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        createDb(dataBase: Model.IDataBase, onSuccess: Function, onError: Function = null) {\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'create_db',\r\n                OnSuccess: onSuccess,\r\n                OnError: onError,\r\n                Query: dataBase\r\n            });\r\n            return this;\r\n        }\r\n\r\n\r\n        /**\r\n         * drop dataBase\r\n         * \r\n         * @param {Function} onSuccess \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        dropDb(onSuccess: Function, onError: Function = null) {\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'drop_db',\r\n                OnSuccess: onSuccess,\r\n                OnError: onError\r\n            });\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * select data from table\r\n         * \r\n         * @param {IQuery} query \r\n         * @param {Function} [onSuccess=null]  \r\n         * @param {Function} [onError=null] \r\n         * \r\n         * @memberOf Main\r\n         */\r\n        select(query: ISelect, onSuccess: Function = null, onError: Function = null) {\r\n            var OnSuccess = query.OnSuccess ? query.OnSuccess : onSuccess,\r\n                OnError = query.OnError ? query.OnError : onError;\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'select',\r\n                Query: query,\r\n                OnSuccess: OnSuccess,\r\n                OnError: OnError\r\n            });\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * get no of result from table\r\n         * \r\n         * @param {ICount} query \r\n         * @param {Function} [onSuccess=null]  \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        count(query: ICount, onSuccess: Function = null, onError: Function = null) {\r\n            var OnSuccess = query.OnSuccess ? query.OnSuccess : onSuccess,\r\n                OnError = query.OnError ? query.OnError : onError;\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'count',\r\n                Query: query,\r\n                OnSuccess: OnSuccess,\r\n                OnError: OnError\r\n            });\r\n            return this;\r\n        }\r\n\r\n\r\n        /**\r\n         * insert data into table\r\n         * \r\n         * @param {IInsert} query \r\n         * @param {Function} [onSuccess=null] \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        insert(query: IInsert, onSuccess: Function = null, onError: Function = null) {\r\n            var OnSuccess = query.OnSuccess ? query.OnSuccess : onSuccess,\r\n                OnError = query.OnError ? query.OnError : onError;\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'insert',\r\n                Query: query,\r\n                OnSuccess: OnSuccess,\r\n                OnError: OnError\r\n            });\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * update data into table\r\n         * \r\n         * @param {IUpdate} query \r\n         * @param {Function} [onSuccess=null] \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        update(query: IUpdate, onSuccess: Function = null, onError: Function = null) {\r\n            var OnSuccess = query.OnSuccess ? query.OnSuccess : onSuccess,\r\n                OnError = query.OnError ? query.OnError : onError;\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'update',\r\n                Query: query,\r\n                OnSuccess: OnSuccess,\r\n                OnError: OnError\r\n            });\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * delete data from table\r\n         * \r\n         * @param {IDelete} query \r\n         * @param {Function} [onSuccess=null] \r\n         * @param {Function} onError \r\n         * @memberof Instance\r\n         */\r\n        delete(query: IDelete, onSuccess: Function = null, onError: Function = null) {\r\n            var OnSuccess = query.OnSuccess ? query.OnSuccess : onSuccess,\r\n                OnError = query.OnError ? query.OnError : onError;\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'delete',\r\n                Query: query,\r\n                OnSuccess: OnSuccess,\r\n                OnError: OnError\r\n            });\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * delete all data from table\r\n         * \r\n         * @param {string} tableName \r\n         * @param {Function} [onSuccess=null] \r\n         * @param {Function} [onError=null] \r\n         * @memberof Instance\r\n         */\r\n        clear(tableName: string, onSuccess: Function = null, onError: Function = null) {\r\n            this.prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'clear',\r\n                Query: tableName,\r\n                OnSuccess: onSuccess,\r\n                OnError: onerror\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n}\r\n","(!self.alert)\r\n{\r\n    self.onmessage = function (e) {\r\n        console.log(\"WebWorker:\" + e.data.Name);\r\n        var Request = e.data, IndexDbObject = new JsStore.Business.Main();\r\n        IndexDbObject.checkConnectionAndExecuteLogic(Request);\r\n    };\r\n}","\r\n// common files\r\n\r\n/// <reference path=\"CommonLogic.ts\" />\r\n/// <reference path=\"UtilsLogic.ts\" />\r\n\r\n//Model\r\n/// <reference path=\"Model/Column.ts\" />\r\n/// <reference path=\"Model/Table.ts\" />\r\n/// <reference path=\"Model/DataBase.ts\" />\r\n//Business\r\n\r\n/// <reference path=\"Business/BaseLogic.ts\" />\r\n/// <reference path=\"Business/CreateDbLogic.ts\" />\r\n/// <reference path=\"Business/DeleteLogic.ts\" />\r\n/// <reference path=\"Business/DropDbLogic.ts\" />\r\n/// <reference path=\"Business/InsertLogic.ts\" />\r\n/// <reference path=\"Business/OpenDbLogic.ts\" />\r\n/// <reference path=\"Business/BaseSelectLogic.ts\" />\r\n/// <reference path=\"Business/SelectHelperLogic.ts\" />\r\n/// <reference path=\"Business/SelectJoinLogic.ts\" />\r\n/// <reference path=\"Business/SelectLogic.ts\" />\r\n/// <reference path=\"Business/UpdateLogic.ts\" />\r\n/// <reference path=\"Business/ClearLogic.ts\" />\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n\r\n//Instance files\r\n/// <reference path=\"CodeExecutionHelper.ts\" />\r\n\r\n/// <reference path=\"JsStoreInstance.ts\" />\r\n\r\n/// <reference path=\"WebWorkerEventLogic.ts\" />\r\n\r\n\r\n\r\n","module JsStore {\r\n    export module Business {\r\n        export class BaseCount extends BaseSelect {\r\n            ResultCount: number = 0;\r\n            Query: ICount;\r\n\r\n            protected executeMultipleWhereInLogic = function (whereInArray: Array<IWhereIn>) {\r\n                var That = this,\r\n                    WhereIn,\r\n                    KeyRange: IDBKeyRange\r\n\r\n                for (WhereIn in whereInArray) {\r\n                    KeyRange = this.getKeyRange();\r\n                    if (!this.ErrorOccured) {\r\n                        var CursorOpenRequest,\r\n                            OnCursorSuccess = function (e) {\r\n                                var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                                if (Cursor) {\r\n                                    ++That.ResultCount;\r\n                                    Cursor.continue();\r\n                                }\r\n                            },\r\n                            OnCursorError = function (e) {\r\n                                That.ErrorOccured = true;\r\n                                That.OnErrorRequest(e);\r\n                            };\r\n                        if (this.Query.WhereIn.Op == '-') {\r\n                            CursorOpenRequest = this.ObjectStore.openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                            CursorOpenRequest.onerror = OnCursorError;\r\n                        }\r\n                        else if (this.ObjectStore.indexNames.contains(WhereIn.Column)) {\r\n                            CursorOpenRequest = this.ObjectStore.index(WhereIn.Column).openCursor(KeyRange);\r\n                            CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                            CursorOpenRequest.onerror = OnCursorError;\r\n                        }\r\n                        else {\r\n                            Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                        }\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            protected executeSingleWhereInLogic = function (whereIn: IWhereIn) {\r\n                var That: Count = this,\r\n                    KeyRange: IDBKeyRange = this.getKeyRange(whereIn);\r\n\r\n                if (!this.ErrorOccured) {\r\n                    var CursorOpenRequest,\r\n                        OnCursorSuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                ++That.ResultCount;\r\n                                Cursor.continue();\r\n                            }\r\n\r\n                        },\r\n                        OnCursorError = function (e) {\r\n                            this.ErrorOccured = true;\r\n                            this.OnErrorRequest(e);\r\n                        };\r\n                    if (whereIn.Op == '-') {\r\n                        CursorOpenRequest = this.ObjectStore.openCursor(KeyRange);\r\n                        CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                        CursorOpenRequest.onerror = OnCursorError;\r\n                    }\r\n                    else if (this.ObjectStore.indexNames.contains(whereIn.Column)) {\r\n                        CursorOpenRequest = this.ObjectStore.index(whereIn.Column).openCursor(KeyRange);\r\n                        CursorOpenRequest.onsuccess = OnCursorSuccess;\r\n                        CursorOpenRequest.onerror = OnCursorError;\r\n                    }\r\n                    else {\r\n                        Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: whereIn.Column });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","module JsStore {\r\n    export module Business {\r\n        export class Count extends BaseCount {\r\n\r\n            private executeWhereInLogic = function () {\r\n                if (Array.isArray(this.Query.WhereIn)) {\r\n                    this.executeMultipleWhereInLogic(this.Query.WhereIn);\r\n                }\r\n                else {\r\n                    this.executeSingleWhereInLogic(this.Query.WhereIn);\r\n                }\r\n            }\r\n\r\n            private executeWhereLogic = function () {\r\n                var Column,\r\n                    That: Count = this;\r\n\r\n                var executeInnerWhereLogic = function (column, value) {\r\n\r\n                    if (That.ObjectStore.indexNames.contains(column)) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                if (That.checkForWhereConditionMatch(That.Query.Where, Cursor.value)) {\r\n                                    ++That.ResultCount;\r\n                                }\r\n                                Cursor.continue();\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        Utils.getError(ErrorType.ColumnNotExist, true, { ColumnName: Column });\r\n                        return false;\r\n                    }\r\n\r\n                }\r\n\r\n                for (Column in this.Query.Where) {\r\n                    if (Array.isArray(this.Query.Where[Column])) {\r\n                        for (var i = 0, length = this.Query.Where[Column].length; i < length; i++) {\r\n                            var ExecutionStatus = executeInnerWhereLogic(Column, this.Query.Where[Column][i])\r\n                            if (ExecutionStatus == false) {\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        executeInnerWhereLogic(Column, this.Query.Where[Column]);\r\n                    }\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n            private executeWhereUndefinedLogic = function () {\r\n                var That: Count = this;\r\n                if (this.ObjectStore.count) {\r\n                    var CountRequest = this.ObjectStore.count();\r\n                    CountRequest.onsuccess = function () {\r\n                        That.ResultCount += CountRequest.result;\r\n                    }\r\n                }\r\n                else {\r\n                    var CursorOpenRequest = this.ObjectStore.openCursor();\r\n                    CursorOpenRequest.onsuccess = function (e) {\r\n                        var Cursor = (<any>e).target.result;\r\n                        if (Cursor) {\r\n                            ++That.ResultCount;\r\n                            (Cursor as any).continue();\r\n                        }\r\n\r\n                    }\r\n                    CursorOpenRequest.onerror = function (e) {\r\n                        That.onErrorOccured(e);\r\n                    }\r\n                }\r\n            }\r\n\r\n            constructor(query: ICount, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnSuccess = onSuccess;\r\n                this.OnError = onError;\r\n                try {\r\n                    this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                    this.Transaction.oncomplete = function (e) {\r\n                        if (That.SendResultFlag && onSuccess != null) {\r\n                            onSuccess(That.ResultCount);\r\n                        }\r\n                    }\r\n                    this.ObjectStore = this.Transaction.objectStore(query.From);\r\n\r\n                    if (query.WhereIn != undefined) {\r\n                        if (query.Where != undefined) {\r\n                            this.SendResultFlag = false;\r\n                            this.executeWhereLogic();\r\n                        }\r\n                        this.SendResultFlag = true;\r\n                        this.executeWhereInLogic();\r\n\r\n                    }\r\n                    else if (query.Where != undefined) {\r\n                        this.executeWhereLogic();\r\n                    }\r\n                    else {\r\n                        this.executeWhereUndefinedLogic();\r\n                    }\r\n                }\r\n                catch (ex) {\r\n                    if (ex.name == \"NotFoundError\") {\r\n                        Utils.getError(ErrorType.TableNotExist, true, { TableName: query.From });\r\n                    }\r\n                    else {\r\n                        console.warn(ex);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n","module KeyStore {\r\n\r\n    export interface ISelect {\r\n        From: any,\r\n        Where: any\r\n    }\r\n\r\n    export interface IDelete {\r\n        From: string,\r\n        Where: any\r\n    }\r\n\r\n    export enum ConnectionStatus {\r\n        Connected = \"connected\",\r\n        Closed = \"closed\",\r\n        NotStarted = \"not_connected\"\r\n    }\r\n\r\n    export interface KeyStoreStatus {\r\n        ConStatus: ConnectionStatus,\r\n        LastError: string\r\n    }\r\n\r\n    export interface IInsert {\r\n        TableName: string,\r\n        Set: {\r\n            Key: string,\r\n            Value; any\r\n        }\r\n    }\r\n\r\n    export interface IWebWorkerRequest {\r\n        Name: string,\r\n        Query: any,\r\n        OnSuccess: Function,\r\n        OnError: Function\r\n    }\r\n\r\n    export interface IWebWorkerResult {\r\n        ErrorOccured: boolean;\r\n        ErrorDetails: any;\r\n        ReturnedValue: any;\r\n    }\r\n\r\n    export var RequestQueue: Array<IWebWorkerRequest> = [],\r\n        TableName = \"LocalStore\",\r\n        IsCodeExecuting = false;\r\n\r\n}","module KeyStore {\r\n    export var prcoessExecutionOfCode = function (request: IWebWorkerRequest) {\r\n        RequestQueue.push(request);\r\n        if (RequestQueue.length == 1) {\r\n            executeCode();\r\n        }\r\n    }\r\n\r\n    export var executeCode = function () {\r\n        if (!IsCodeExecuting && RequestQueue.length > 0) {\r\n            IsCodeExecuting = true;\r\n            var Request = <IWebWorkerRequest>{\r\n                Name: RequestQueue[0].Name,\r\n                Query: RequestQueue[0].Query\r\n            }\r\n            executeCodeDirect(Request);\r\n        }\r\n    }\r\n\r\n    export var executeCodeDirect = function (request: IWebWorkerRequest) {\r\n        var That = this;\r\n        new Business.Main(function (results) {\r\n            That.processFinishedRequest(results);\r\n        }).checkConnectionAndExecuteLogic(request);\r\n    }\r\n\r\n    export var processFinishedRequest = function (message: IWebWorkerResult) {\r\n        var FinishedRequest: IWebWorkerRequest = RequestQueue.shift();\r\n        IsCodeExecuting = false;\r\n        if (message.ErrorOccured) {\r\n            if (FinishedRequest.OnError) {\r\n                FinishedRequest.OnError(message.ErrorDetails);\r\n            }\r\n            else {\r\n                console.log(message.ErrorDetails);\r\n            }\r\n        }\r\n        else {\r\n            if (FinishedRequest.OnSuccess) {\r\n                if (message.ReturnedValue != null) {\r\n                    FinishedRequest.OnSuccess(message.ReturnedValue);\r\n                }\r\n                else {\r\n                    FinishedRequest.OnSuccess();\r\n                }\r\n            }\r\n        }\r\n        this.executeCode();\r\n    }\r\n\r\n}","module KeyStore {\r\n    export interface IError {\r\n        Name: string,\r\n        Value: string\r\n    }\r\n    export class Utils {\r\n        /**\r\n         * determine and set the DataBase Type\r\n         * \r\n         * \r\n         * @memberOf UtilityLogic\r\n         */\r\n        static setDbType = function () {\r\n            (self as any).indexedDB = self.indexedDB || (self as any).mozIndexedDB || (self as any).webkitIndexedDB || (self as any).msIndexedDB;\r\n            if (indexedDB) {\r\n                (self as any).IDBTransaction = (self as any).IDBTransaction || (self as any).webkitIDBTransaction || (self as any).msIDBTransaction;\r\n                (self as any).IDBKeyRange = (self as any).IDBKeyRange || (self as any).webkitIDBKeyRange || (self as any).msIDBKeyRange\r\n            }\r\n            else if (!self.alert) {\r\n                console.log('worked failed');\r\n                (self as any).postMessage('message:WorkerFailed');\r\n            }\r\n            else {\r\n                throw 'Your browser doesnot support IndexedDb';\r\n            }\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class Base {\r\n            Results = null;\r\n            OnSuccess: Function;\r\n            OnError: Function;\r\n            ErrorOccured: boolean = false;\r\n            ErrorCount = 0;\r\n            Transaction: IDBTransaction;\r\n            ObjectStore: IDBObjectStore;\r\n\r\n            protected onErrorOccured = function (e) {\r\n                ++this.ErrorCount;\r\n                if (this.ErrorCount == 1) {\r\n                    if (this.OnError != null) {\r\n                        this.OnError((e as any).target.error);\r\n                    }\r\n                }\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export class Get extends Base {\r\n            Query: ISelect;\r\n\r\n            private get = function () {\r\n                var That: Get = this,\r\n                    getData = function (column, value) {\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                That.Results = Cursor.value['Value'];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                for (var column in this.Query.Where) {\r\n                    getData(column, this.Query.Where[column]);\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n            constructor(query: ISelect, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnError = onError;\r\n                this.Transaction = DbConnection.transaction([query.From], \"readonly\");\r\n                this.ObjectStore = this.Transaction.objectStore(query.From);\r\n                this.Transaction.oncomplete = function (e) {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(That.Results);\r\n                    }\r\n                }\r\n                this.get();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class Set extends Base {\r\n\r\n            private setData = function (value) {\r\n                var That: Set = this,\r\n                    updateIfExistElseInsert = function () {\r\n                        var CursorOpenRequest = That.ObjectStore.index('Key').openCursor(IDBKeyRange.only(value['Key']));\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.value['Value'] = value['Value'];\r\n                                Cursor.update(Cursor.value);\r\n                            }\r\n                            else {\r\n                                insertData();\r\n                            }\r\n                        }\r\n\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n\r\n                    },\r\n                    insertData = function () {\r\n                        var AddResult = That.ObjectStore.add(value);\r\n                        AddResult.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        }\r\n                    }\r\n                updateIfExistElseInsert();\r\n            }\r\n\r\n            constructor(query: IInsert, onSuccess: Function, onError: Function) {\r\n                super();\r\n                try {\r\n                    var That = this;\r\n                    this.OnError = onError;\r\n                    this.Transaction = DbConnection.transaction([query.TableName], \"readwrite\");\r\n                    this.ObjectStore = this.Transaction.objectStore(query.TableName);\r\n                    this.Transaction.oncomplete = function (e) {\r\n                        if (onSuccess != null) {\r\n                            onSuccess();\r\n                        }\r\n                    };\r\n                    this.setData(query.Set);\r\n                }\r\n                catch (ex) {\r\n                    console.error(ex);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class Remove extends Base {\r\n            Query: IDelete;\r\n            RowAffected: number = 0;\r\n            private remove = function () {\r\n                var That = this,\r\n                    removeData = function (column, value) {\r\n\r\n                        var CursorOpenRequest = That.ObjectStore.index(column).openCursor(IDBKeyRange.only(value));\r\n                        CursorOpenRequest.onerror = function (e) {\r\n                            That.ErrorOccured = true;\r\n                            That.onErrorOccured(e);\r\n                        };\r\n                        CursorOpenRequest.onsuccess = function (e) {\r\n                            var Cursor: IDBCursorWithValue = (<any>e).target.result;\r\n                            if (Cursor) {\r\n                                Cursor.delete();\r\n                                ++That.RowAffected;\r\n                                Cursor.continue();\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                for (var Column in this.Query.Where) {\r\n                    if (!That.ErrorOccured) {\r\n                        removeData(Column, That.Query.Where[Column]);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            constructor(query: IDelete, onSuccess: Function, onError: Function) {\r\n                super();\r\n                var That = this;\r\n                this.Query = query;\r\n                this.OnError = onError;\r\n                this.Transaction = DbConnection.transaction([query.From], \"readwrite\");\r\n                this.ObjectStore = this.Transaction.objectStore(query.From);\r\n\r\n                this.Transaction.oncomplete = function () {\r\n                    if (onSuccess != null) {\r\n                        onSuccess(That.RowAffected);\r\n                    }\r\n                }\r\n                this.Transaction.onerror = function (e) {\r\n                    That.onErrorOccured(e);\r\n                }\r\n\r\n                this.remove();\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    export module Business {\r\n        export class InitDb {\r\n            constructor(dbName: string, tableName: string, onSuccess: Function, onError: Function) {\r\n                var That = this,\r\n                    DbRequest = self.indexedDB.open(dbName, 1);\r\n\r\n                DbRequest.onerror = function (event) {\r\n                    if (onError != null) {\r\n                        onError((event as any).target.error);\r\n                    }\r\n                };\r\n\r\n                DbRequest.onsuccess = function (event) {\r\n                    Status.ConStatus = ConnectionStatus.Connected;\r\n                    DbConnection = DbRequest.result;\r\n                    DbConnection.onclose = function () {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection Closed\";\r\n                    }\r\n\r\n                    DbConnection.onversionchange = function (e) {\r\n                        if (e.newVersion === null) { // An attempt is made to delete the db\r\n                            e.target.close(); // Manually close our connection to the db\r\n                        }\r\n                    };\r\n\r\n                    DbConnection.onerror = function (e) {\r\n                        Status.LastError = \"Error occured in connection :\" + e.target.result;\r\n                    }\r\n\r\n                    DbConnection.onabort = function (e) {\r\n                        Status.ConStatus = ConnectionStatus.Closed;\r\n                        Status.LastError = \"Connection aborted\";\r\n                    }\r\n\r\n                    if (onSuccess != null) {\r\n                        onSuccess();\r\n                    }\r\n                };\r\n\r\n                DbRequest.onupgradeneeded = function (event) {\r\n                    var db = (<any>event).target.result,\r\n                        Column = \"Key\";\r\n                    db.createObjectStore(tableName, {\r\n                        keyPath: Column\r\n                    }).createIndex(Column, Column, { unique: true });\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","module KeyStore {\r\n    export module Business {\r\n        export var DbConnection,\r\n            Status: KeyStoreStatus = <KeyStoreStatus>{\r\n                ConStatus: ConnectionStatus.NotStarted,\r\n                LastError: \"\"\r\n            };\r\n        export class Main {\r\n            OnSuccess: Function;\r\n            constructor(onSuccess = null) {\r\n                this.OnSuccess = onSuccess;\r\n            }\r\n\r\n            public checkConnectionAndExecuteLogic = function (request: IWebWorkerRequest) {\r\n                if (request.Name == 'create_db' || request.Name == 'open_db') {\r\n                    this.executeLogic(request);\r\n                }\r\n                else {\r\n                    if (Status.ConStatus == ConnectionStatus.Connected) {\r\n                        this.executeLogic(request);\r\n                    }\r\n                    else if (Status.ConStatus == ConnectionStatus.NotStarted) {\r\n                        var That = this;\r\n                        setTimeout(function () {\r\n                            That.checkConnectionAndExecuteLogic(request);\r\n                        }, 50);\r\n                    }\r\n                    else if (Status.ConStatus == ConnectionStatus.Closed) {\r\n                        var That = this;\r\n                        this.createDb(TableName);\r\n                        setTimeout(function () {\r\n                            That.checkConnectionAndExecuteLogic(request);\r\n                        }, 50);\r\n                    }\r\n                }\r\n            }\r\n\r\n            private returnResult = function (result) {\r\n                if (this.OnSuccess) {\r\n                    this.OnSuccess(result);\r\n                }\r\n            }\r\n\r\n            private executeLogic = function (request: IWebWorkerRequest) {\r\n                var That = this,\r\n                    OnSuccess = function (results) {\r\n                        That.returnResult(<IWebWorkerResult>{\r\n                            ReturnedValue: results\r\n                        });\r\n                    },\r\n                    OnError = function (err) {\r\n                        That.returnResult(<IWebWorkerResult>{\r\n                            ErrorOccured: true,\r\n                            ErrorDetails: err\r\n                        });\r\n                    }\r\n\r\n                switch (request.Name) {\r\n                    case 'get':\r\n                        this.get(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'set': this.set(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'remove': this.remove(request.Query, OnSuccess, OnError);\r\n                        break;\r\n                    case 'create_db': this.createDb(request.Query, OnSuccess, OnError); break;\r\n                }\r\n            }\r\n\r\n            public set = function (query: IInsert, onSuccess: Function, onError: Function) {\r\n                var ObjInsert = new Set(query, onSuccess, onError);\r\n            }\r\n\r\n            public remove = function (query: IDelete, onSuccess: Function, onError: Function) {\r\n                var ObjDelete = new Remove(query, onSuccess, onError);\r\n            }\r\n\r\n            public get = function (query: ISelect, onSuccess: Function, onError: Function) {\r\n                new Get(query, onSuccess, onError);\r\n            }\r\n\r\n            public createDb = function (tableName, onSuccess: Function, onError: Function) {\r\n                var DbName = \"KeyStore\";\r\n                new InitDb(DbName, tableName, onSuccess, onError);\r\n            }\r\n        }\r\n    }\r\n}\r\n","module KeyStore {\r\n    /**\r\n     * Initialize KeyStore\r\n     * \r\n     */\r\n    export var init = function () {\r\n        Utils.setDbType();\r\n        if (indexedDB) {\r\n            prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n                Name: 'create_db',\r\n                Query: TableName\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n    * return the value by key\r\n    * \r\n    * @param {string} key \r\n    * @param {Function} onSuccess \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var get = function (key: string, onSuccess: Function, onError: Function = null) {\r\n        var Query = <ISelect>{\r\n            From: this.TableName,\r\n            Where: {\r\n                Key: key\r\n            }\r\n        };\r\n        prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n            Name: 'get',\r\n            Query: Query,\r\n            OnSuccess: onSuccess,\r\n            OnError: onError\r\n        });\r\n        return this;\r\n    };\r\n\r\n    /**\r\n    * insert or update value\r\n    * \r\n    * @param {any} key \r\n    * @param {any} value \r\n    * @param {Function} [onSuccess=null] \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var set = function (key, value, onSuccess: Function = null, onError: Function = null) {\r\n        var Query = <IInsert>{\r\n            TableName: this.TableName,\r\n            Set: {\r\n                Key: key,\r\n                Value: value\r\n            }\r\n        }\r\n        prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n            Name: 'set',\r\n            Query: Query,\r\n            OnSuccess: onSuccess,\r\n            OnError: onError\r\n        });\r\n        return this;\r\n    };\r\n\r\n    /**\r\n    * delete value\r\n    * \r\n    * @param {string} key \r\n    * @param {Function} [onSuccess=null] \r\n    * @param {Function} [onError=null] \r\n    */\r\n    export var remove = function (key: string, onSuccess: Function = null, onError: Function = null) {\r\n        var Query = <IDelete>{\r\n            From: this.TableName,\r\n            Where: {\r\n                Key: key\r\n            }\r\n        }\r\n        prcoessExecutionOfCode(<IWebWorkerRequest>{\r\n            Name: 'remove',\r\n            Query: Query,\r\n            OnSuccess: onSuccess,\r\n            OnError: onError\r\n        });\r\n        return this;\r\n    }\r\n}\r\n\r\nKeyStore.init();","// Common\r\n\r\n/// <reference path=\"UtilsLogic.ts\" />\r\n/// <reference path=\"CommonLogic.ts\" />\r\n/// <reference path=\"Helper.ts\" />\r\n\r\n//Business\r\n\r\n/// <reference path=\"Business/BaseLogic.ts\" />\r\n/// <reference path=\"Business/GetLogic.ts\" />\r\n/// <reference path=\"Business/SetLogic.ts\" />\r\n/// <reference path=\"Business/RemoveLogic.ts\" />\r\n/// <reference path=\"Business/InitDbLogic.ts\" />\r\n/// <reference path=\"Business/MainLogic.ts\" />\r\n\r\n//Instance\r\n\r\n/// <reference path=\"KeyStoreInstance.ts\" />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}