!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(module,exports){
/*!
 * @license :jsstore - V2.4.1 - 11/09/2018
 * https://github.com/ujjwalguptaofficial/JsStore
 * Copyright (c) 2018 @Ujjwal Gupta; Licensed MIT
 */
var JsStoreWorker=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n=r(1);r.d(t,"QueryExecutor",function(){return n.QueryExecutor});var o=r(73);r.d(t,"initialize",function(){return o.initialize})},function(e,t,r){"use strict";r.r(t),r.d(t,"QueryExecutor",function(){return T});var n=r(2),o=r(18),i=r(3),u=r(19),s=r(22),c=r(17),a=r(4),l=r(23),h=r(25),f=r(26),p=r(29),_=r(42),y=r(49),d=r(53),b=r(60),O=r(21),v=r(68),g=r(69),E=r(70),m=r(72),T=function(){function e(e){this.onQueryFinished=e}return e.prototype.checkConnectionAndExecuteLogic=function(e){var t=this;switch(o.LogHelper.log("checking connection and executing request:"+e.name),e.name){case i.API.CreateDb:case i.API.IsDbExist:case i.API.GetDbVersion:case i.API.GetDbList:case i.API.GetDbSchema:case i.API.Get:case i.API.Set:case i.API.ChangeLogStatus:case i.API.OpenDb:this.executeLogic_(e);break;default:switch(this.dbStatus_.conStatus){case i.CONNECTION_STATUS.Connected:this.executeLogic_(e);break;case i.CONNECTION_STATUS.Closed:!0===this.isDbDeletedByBrowser_?this.createDb_(null,function(){t.isDbDeletedByBrowser_=!1,t.checkConnectionAndExecuteLogic(e)},e.onError):this.openDb_(this.activeDb_.name,function(){t.checkConnectionAndExecuteLogic(e)},e.onError)}}},e.prototype.changeLogStatus_=function(e,t,r){u.Config.isLogEnabled=e,t()},e.prototype.returnResult_=function(e){!0===u.Config.isRuningInWorker?self.postMessage(e):this.onQueryFinished(e)},e.prototype.executeLogic_=function(e){var t=this,r=function(e){t.returnResult_({returnedValue:e})},n=function(e){t.returnResult_({errorDetails:e,errorOccured:!0})};switch(e.name){case i.API.Select:this.select_(e.query,r,n);break;case i.API.Insert:this.insert_(e.query,r,n);break;case i.API.Update:this.update_(e.query,r,n);break;case i.API.Remove:this.remove_(e.query,r,n);break;case i.API.IsDbExist:this.isDbExist_(e.query,r,n);break;case i.API.GetDbVersion:this.getDbVersion_(e.query,r);break;case i.API.GetDbList:this.getDbList_(r);break;case i.API.GetDbSchema:this.getDbSchema_(e.query,r);break;case i.API.OpenDb:!0===this.isDbDeletedByBrowser_?this.createDb_(null,function(){t.isDbDeletedByBrowser_=!1,r()},n):this.openDb_(e.query,r,n);break;case i.API.CreateDb:this.createDb_(e.query,r,n);break;case i.API.Clear:this.clear_(e.query,r,n);break;case i.API.DropDb:this.dropDb_(r,n);break;case i.API.Count:this.count_(e.query,r,n);break;case i.API.BulkInsert:this.bulkInsert_(e.query,r,n);break;case i.API.ExportJson:this.exportJson_(e.query,r,n);break;case i.API.Get:this.get_(e.query,r,n);break;case i.API.Set:this.set_(e.query,r,n);break;case i.API.ChangeLogStatus:this.changeLogStatus_(e.query,r,n);break;case i.API.Transaction:this.transaction(e.query,r,n);break;default:console.error("The Api:-"+e.name+" does not support.")}},e.prototype.getDbSchema_=function(e,t){n.IdbHelper.getDbSchema(e,t)},Object.defineProperty(e.prototype,"isDbDeletedByBrowser_",{get:function(){return n.IdbHelper.isDbDeletedByBrowser},set:function(e){n.IdbHelper.isDbDeletedByBrowser=e},enumerable:!0,configurable:!0}),e.prototype.getDbList_=function(e){n.IdbHelper.getDbList(e)},Object.defineProperty(e.prototype,"activeDb_",{get:function(){return n.IdbHelper.activeDb},set:function(e){n.IdbHelper.activeDb=e},enumerable:!0,configurable:!0}),e.prototype.openDb_=function(e,t,r){var n=this;this.getDbVersion_(e,function(u){if(0!==u)n.activeDbVersion_=u,n.getDbSchema_(e,function(e){n.activeDb_=e,new s.OpenDb(t,r).execute()});else{var c=new o.LogHelper(i.ERROR_TYPE.DbNotExist,{DbName:e});c.logError(),r(c.get())}})},e.prototype.closeDb_=function(){n.IdbHelper.dbStatus.conStatus===i.CONNECTION_STATUS.Connected&&(n.IdbHelper.dbStatus.conStatus=i.CONNECTION_STATUS.ClosedByJsStore,n.IdbHelper.dbConnection.close())},e.prototype.dropDb_=function(e,t){this.closeDb_(),new c.DropDb(e,t).deleteDb()},e.prototype.update_=function(e,t,r){var n=new m.QueryHelper(i.API.Update,e);(n.checkAndModify(),null==n.error)?new b.Instance(e,t,r).execute():r(n.error)},e.prototype.insert_=function(e,t,r){var n=new m.QueryHelper(i.API.Insert,e);n.checkAndModify().then(function(){e=n.query,new y.Instance(e,t,r).execute()}).catch(r)},e.prototype.bulkInsert_=function(e,t,r){var n=new m.QueryHelper(i.API.BulkInsert,e);(n.checkAndModify(),null==n.error)?new g.BulkInsert(e,t,r).execute():r(n.error)},e.prototype.remove_=function(e,t,r){var n=new m.QueryHelper(i.API.Remove,e);(n.checkAndModify(),null==n.error)?new d.Instance(e,t,r).execute():r(n.error)},e.prototype.select_=function(e,t,r){if("object"==typeof e.from)new p.Join(e,t,r);else{var n=new m.QueryHelper(i.API.Select,e);if(n.checkAndModify(),null==n.error)new p.Instance(e,t,r).execute();else r(n.error)}},e.prototype.count_=function(e,t,r){if("object"==typeof e.from){e.count=!0;new p.Join(e,t,r)}else{var n=new m.QueryHelper(i.API.Count,e);if(n.checkAndModify(),null==n.error)new _.Instance(e,t,r).execute();else r(n.error)}},e.prototype.createDb_=function(e,t,r){var o=this,i=function(){a.set("JsStore_"+o.activeDb_.name+"_Schema",o.activeDb_),new l.DbHelper(n.IdbHelper.activeDb).createMetaData(function(e){new h.CreateDb(e,t,r)})};null==e?i():(this.closeDb_(),this.getDbVersion_(e.name,function(t){o.activeDbVersion_=t||1,n.IdbHelper.activeDb=new f.DataBase(e),i()}))},Object.defineProperty(e.prototype,"activeDbVersion_",{get:function(){return n.IdbHelper.activeDbVersion},set:function(e){n.IdbHelper.activeDbVersion=e},enumerable:!0,configurable:!0}),e.prototype.getDbVersion_=function(e,t){n.IdbHelper.getDbVersion(e,t)},Object.defineProperty(e.prototype,"dbStatus_",{get:function(){return n.IdbHelper.dbStatus},enumerable:!0,configurable:!0}),e.prototype.clear_=function(e,t,r){new v.Clear(e,t,r).execute()},e.prototype.exportJson_=function(e,t,r){this.select_(e,function(e){var r=URL.createObjectURL(new Blob([JSON.stringify(e)],{type:"text/json"}));t(r)},function(e){r(e)})},e.prototype.getType_=function(e){return O.Util.getType(e)},e.prototype.isDbExist_=function(e,t,r){if(this.dbStatus_.conStatus!==i.CONNECTION_STATUS.UnableToStart)this.getType_(e)===i.DATA_TYPE.String?this.getDbVersion_(e,function(e){t(Boolean(e))}):this.getDbVersion_(e.dbName,function(r){t(e.table.version<=r)});else{var n={message:null,type:this.dbStatus_.lastError};switch(n.type){case i.ERROR_TYPE.IndexedDbBlocked:n.message="IndexedDB is blocked";break;case i.ERROR_TYPE.IndexedDbUndefined:n.message="IndexedDB is not supported"}r(n)}},e.prototype.get_=function(e,t,r){a.get(e,t,r)},e.prototype.set_=function(e,t,r){a.set(e.key,e.value,t,r)},e.prototype.transaction=function(e,t,r){new E.Instance(e,t,r).execute()},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"IdbHelper",function(){return u});var n=r(3),o=r(4),i=r(17),u=function(){function e(){}return e.callDbDroppedByBrowser=function(t){e.dbStatus.conStatus===n.CONNECTION_STATUS.Connected&&(e.isDbDeletedByBrowser=!0,!0===t&&new i.DropDb(e.onDbDroppedByBrowser,null).deleteMetaData())},e.createTransaction=function(t,r,o){if(null===e.transaction){o=o||n.IDB_MODE.ReadWrite,e.transaction=e.dbConnection.transaction(t,o);var i=function(){e.transaction=null,r()};e.transaction.oncomplete=i,e.transaction.onabort=i}},e.setDbList=function(e){return new Promise(function(t,r){o.set("DataBase_List",e,t,r)})},e.updateDbStatus=function(t,r){void 0===r?e.dbStatus.conStatus=t:e.dbStatus={conStatus:t,lastError:r}},e.getDbList=function(e){o.get("DataBase_List",function(t){e(t=null==t?[]:t)})},e.getDbVersion=function(e,t){var r=this;o.get("JsStore_"+e+"_Db_Version",function(e){t.call(r,Number(e))})},e.getDbSchema=function(e,t){o.get("JsStore_"+e+"_Schema",function(e){t(e)})},e.getTable=function(t){return e.activeDb.tables.find(function(e){return e.name===t})},e.transaction=null,e.activeDbVersion=0,e.dbStatus={conStatus:n.CONNECTION_STATUS.NotStarted,lastError:null},e}()},function(e,t,r){"use strict";var n,o,i,u,s,c,a,l;r.r(t),r.d(t,"OCCURENCE",function(){return n}),r.d(t,"WEBWORKER_STATUS",function(){return o}),r.d(t,"CONNECTION_STATUS",function(){return i}),r.d(t,"DATA_TYPE",function(){return u}),r.d(t,"ERROR_TYPE",function(){return s}),r.d(t,"QUERY_OPTION",function(){return c}),r.d(t,"IDB_MODE",function(){return a}),r.d(t,"API",function(){return l}),function(e){e.First="f",e.Last="l",e.Any="a"}(n||(n={})),function(e){e.Registered="registerd",e.Failed="failed",e.NotStarted="not_started"}(o||(o={})),function(e){e.Connected="connected",e.Closed="closed",e.NotStarted="not_started",e.UnableToStart="unable_to_start",e.ClosedByJsStore="closed_by_jsstore"}(i||(i={})),function(e){e.String="string",e.Object="object",e.Array="array",e.Number="number",e.Boolean="boolean",e.Null="null",e.DateTime="date_time"}(u||(u={})),function(e){e.UndefinedColumn="undefined_column",e.UndefinedValue="undefined_value",e.UndefinedColumnName="undefined_column_name",e.UndefinedDbName="undefined_database_name",e.UndefinedColumnValue="undefined_column_value",e.NotArray="not_array",e.NoValueSupplied="no_value_supplied",e.ColumnNotExist="column_not_exist",e.EnableSearchOff="enable_search_off",e.InvalidOp="invalid_operator",e.NullValue="null_value",e.BadDataType="bad_data_type",e.NextJoinNotExist="next_join_not_exist",e.TableNotExist="table_not_exist",e.DbNotExist="db_not_exist",e.ConnectionAborted="connection_aborted",e.ConnectionClosed="connection_closed",e.NotObject="not_object",e.InvalidConfig="invalid_config",e.DbBlocked="Db_blocked",e.IndexedDbUndefined="indexeddb_undefined",e.IndexedDbBlocked="indexeddb_blocked",e.InvalidColumn="invalid_column"}(s||(s={})),function(e){e.Where="where",e.Like="like",e.In="in",e.Between="-",e.GreaterThan=">",e.LessThan="<",e.GreaterThanEqualTo=">=",e.LessThanEqualTo="<=",e.NotEqualTo="!=",e.Aggregate="aggregate",e.Max="max",e.Min="min",e.Avg="avg",e.Count="count",e.Sum="sum",e.Or="or",e.Skip="skip",e.Limit="limit",e.And="and",e.IgnoreCase="ignoreCase"}(c||(c={})),function(e){e.ReadOnly="readonly",e.ReadWrite="readwrite"}(a||(a={})),function(e){e.CreateDb="create_db",e.IsDbExist="is_db_exist",e.GetDbVersion="get_db_version",e.GetDbList="get_db_list",e.Get="get",e.Set="set",e.Select="select",e.Insert="insert",e.Update="update",e.Remove="remove",e.GetDbSchema="get_db_schema",e.OpenDb="open_db",e.Clear="clear",e.DropDb="drop_db",e.Count="count",e.BulkInsert="bulk_insert",e.ExportJson="export_json",e.ChangeLogStatus="change_log_status",e.Transaction="transaction",e.FinishTransaction="finish_transaction"}(l||(l={}))},function(e,t,r){"use strict";r.r(t);var n=r(5);r.d(t,"init",function(){return n.init}),r.d(t,"get",function(){return n.get}),r.d(t,"set",function(){return n.set}),r.d(t,"remove",function(){return n.remove})},function(e,t,r){"use strict";r.r(t),r.d(t,"init",function(){return i}),r.d(t,"get",function(){return u}),r.d(t,"set",function(){return s}),r.d(t,"remove",function(){return c});var n=r(6),o=r(8),i=function(){n.Utils.setDbType(),indexedDB&&o.QueryExecutor.prcoessQuery({Name:"create_db",Query:null})},u=function(e,t,r){void 0===r&&(r=null),o.QueryExecutor.prcoessQuery({Name:"get",OnError:r,OnSuccess:t,Query:e})},s=function(e,t,r,n){var i={Key:e,Value:t};o.QueryExecutor.prcoessQuery({Name:"set",OnError:n,OnSuccess:r,Query:i})},c=function(e,t,r){void 0===t&&(t=null),void 0===r&&(r=null),o.QueryExecutor.prcoessQuery({Name:"remove",OnError:r,OnSuccess:t,Query:e})}},function(e,t,r){"use strict";r.r(t),r.d(t,"Utils",function(){return i});var n=r(7),o=r(8),i=function(){function e(){}return e.setDbType=function(){indexedDB||(indexedDB=self.mozIndexedDB||self.webkitIndexedDB||self.msIndexedDB),indexedDB?(IDBTransaction=IDBTransaction||self.webkitIDBTransaction||self.msIDBTransaction,self.IDBKeyRange=self.IDBKeyRange||self.webkitIDBKeyRange||self.msIDBKeyRange):n.IdbHelper.dbStatus={conStatus:n.CONNECTION_STATUS.UnableToStart,lastError:n.ERROR_TYPE.IndexedDbUndefined}},e.updateDbStatus=function(e,t){void 0===t?o.QueryExecutor.dbStatus.conStatus=e:o.QueryExecutor.dbStatus={conStatus:e,lastError:t}},e}()},function(e,t,r){"use strict";r.r(t);var n=r(2);r.d(t,"IdbHelper",function(){return n.IdbHelper});var o=r(3);r.d(t,"OCCURENCE",function(){return o.OCCURENCE}),r.d(t,"WEBWORKER_STATUS",function(){return o.WEBWORKER_STATUS}),r.d(t,"CONNECTION_STATUS",function(){return o.CONNECTION_STATUS}),r.d(t,"DATA_TYPE",function(){return o.DATA_TYPE}),r.d(t,"ERROR_TYPE",function(){return o.ERROR_TYPE}),r.d(t,"QUERY_OPTION",function(){return o.QUERY_OPTION}),r.d(t,"IDB_MODE",function(){return o.IDB_MODE}),r.d(t,"API",function(){return o.API})},function(e,t,r){"use strict";r.r(t),r.d(t,"QueryExecutor",function(){return i});var n=r(9),o=r(10),i=function(){function e(){}return e.prcoessQuery=function(e){this.requestQueue.push(e),1===this.requestQueue.length&&this.executeCode()},e.executeCode=function(){var e=this;if(!this.isCodeExecuting&&this.requestQueue.length>0){this.isCodeExecuting=!0;var t={Name:this.requestQueue[0].Name,Query:this.requestQueue[0].Query};new o.Main(function(t){e.onQueryFinished(t)}).checkConnectionAndExecuteLogic(t)}},e.onQueryFinished=function(e){var t=this.requestQueue.shift();this.isCodeExecuting=!1,e.ErrorOccured?t.OnError?t.OnError(e.ErrorDetails):console.error(e.ErrorDetails):t.OnSuccess&&t.OnSuccess(e.ReturnedValue),this.executeCode()},e.requestQueue=[],e.tableName="LocalStore",e.columnName="Key",e.isCodeExecuting=!1,e.dbStatus={conStatus:n.CONNECTION_STATUS.NotStarted,lastError:""},e}()},function(e,t,r){"use strict";var n;r.r(t),r.d(t,"CONNECTION_STATUS",function(){return n}),function(e){e.Connected="connected",e.Closed="closed",e.NotStarted="not_connected"}(n||(n={}))},function(e,t,r){"use strict";r.r(t),r.d(t,"Main",function(){return l});var n=r(8),o=r(9),i=r(11),u=r(14),s=r(15),c=r(16),a=r(13),l=function(){function e(e){void 0===e&&(e=null),this.onSuccess=e}return e.prototype.set=function(e,t,r){new u.Set(e,t,r).execute()},e.prototype.remove=function(e,t,r){new i.Remove(e,t,r).execute()},e.prototype.get=function(e,t,r){new c.Get(e,t,r).execute()},e.prototype.createDb=function(e,t){new s.InitDb("KeyStore",e,t)},e.prototype.checkConnectionAndExecuteLogic=function(e){var t=this;if("create_db"===e.Name||"open_db"===e.Name)this.executeLogic(e);else switch(n.QueryExecutor.dbStatus.conStatus){case o.CONNECTION_STATUS.Connected:this.executeLogic(e);break;case o.CONNECTION_STATUS.NotStarted:setTimeout(function(){this.checkConnectionAndExecuteLogic(e)}.bind(this),100);break;case o.CONNECTION_STATUS.Closed:a.IdbHelper._isDbDeletedByBrowser&&this.createDb(function(){a.IdbHelper._isDbDeletedByBrowser=!1,t.checkConnectionAndExecuteLogic(e)},function(e){console.error(e)})}},e.prototype.returnResult=function(e){this.onSuccess&&this.onSuccess(e)},e.prototype.executeLogic=function(e){var t=this,r=function(e){t.returnResult({ReturnedValue:e})},n=function(e){t.returnResult({ErrorDetails:e,ErrorOccured:!0})};switch(e.Name){case"get":this.get(e.Query,r,n);break;case"set":this.set(e.Query,r,n);break;case"remove":this.remove(e.Query,r,n);break;case"create_db":this.createDb(r,n)}},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Remove",function(){return c});var n,o=r(12),i=r(8),u=r(13),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.rowAffected=0,o.key=t,o.onSuccess=r,o.onError=n,o}return s(t,e),t.prototype.execute=function(){var e=this;this.initTransaction();var t,r,n;this.errorOccured||(t=i.QueryExecutor.columnName,r=this.key,(n=e.objectStore.index(t).openCursor(IDBKeyRange.only(r))).onerror=function(t){e.errorOccured=!0,e.onErrorOccured(t)},n.onsuccess=function(t){var r=t.target.result;r&&(r.delete(),++e.rowAffected,r.continue())})},t.prototype.initTransaction=function(){u.IdbHelper.createTransaction([i.QueryExecutor.tableName],this.onTransactionCompleted.bind(this)),this.objectStore=u.IdbHelper._transaction.objectStore(i.QueryExecutor.tableName)},t.prototype.onTransactionCompleted=function(){!1===this.errorOccured&&this.onSuccess(this.rowAffected)},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"Base",function(){return n});var n=function(){function e(){this.results=null,this.errorOccured=!1,this.errorCount=0}return e.prototype.onErrorOccured=function(e){++this.errorCount,1===this.errorCount&&null!=this.onError&&this.onError(e.target.error),console.error(e)},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"IdbHelper",function(){return i});var n=r(8),o=r(9),i=function(){function e(){}return e.callDbDroppedByBrowser=function(){this._isDbDeletedByBrowser=n.QueryExecutor.dbStatus.conStatus===o.CONNECTION_STATUS.Connected},e.createTransaction=function(e,t,r){var n=this;null===this._transaction&&(r=r||"readwrite",this._transaction=this._dbConnection.transaction(e,r),this._transaction.oncomplete=function(){n._transaction=null,t()},this._transaction.ontimeout=function(){this._transaction=null,console.error("transaction timed out")})},e._transaction=null,e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Set",function(){return c});var n,o=r(12),i=r(13),u=r(8),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess&&o.onSuccess(null)};try{o.query=t,o.onSuccess=r,o.onError=n}catch(e){console.error(e)}return o}return s(t,e),t.prototype.execute=function(){var e,t=this,r=function(){t.objectStore.add(t.query).onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}};this.initTransaction(),(e=t.objectStore.index(u.QueryExecutor.columnName).openCursor(IDBKeyRange.only(t.query[u.QueryExecutor.columnName]))).onsuccess=function(e){var n=e.target.result;n?n.update(t.query):r()},e.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t.prototype.initTransaction=function(){i.IdbHelper.createTransaction([u.QueryExecutor.tableName],this.onTransactionCompleted_),this.objectStore=i.IdbHelper._transaction.objectStore(u.QueryExecutor.tableName)},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"tempDatas",function(){}),r.d(t,"InitDb",function(){return c});var n=r(7),o=r(9),i=r(6),u=r(13),s=r(8),c=function(){return function(e,t,r){var c=self.indexedDB.open(e,1);u.IdbHelper._isDbDeletedByBrowser=!1,c.onerror=function(e){"InvalidStateError"===e.target.error.name&&(n.IdbHelper.dbStatus={conStatus:n.CONNECTION_STATUS.UnableToStart,lastError:n.ERROR_TYPE.IndexedDbBlocked}),null!=r&&r(e.target.error)},c.onsuccess=function(e){s.QueryExecutor.dbStatus.conStatus=o.CONNECTION_STATUS.Connected,u.IdbHelper._dbConnection=c.result,u.IdbHelper._dbConnection.onclose=function(){u.IdbHelper.callDbDroppedByBrowser(),i.Utils.updateDbStatus(o.CONNECTION_STATUS.Closed,n.ERROR_TYPE.ConnectionClosed)},u.IdbHelper._dbConnection.onversionchange=function(e){null===e.newVersion&&(e.target.close(),u.IdbHelper.callDbDroppedByBrowser(),i.Utils.updateDbStatus(o.CONNECTION_STATUS.Closed,n.ERROR_TYPE.ConnectionClosed))},u.IdbHelper._dbConnection.onerror=function(e){s.QueryExecutor.dbStatus.lastError="Error occured in connection :"+e.target.result},u.IdbHelper._dbConnection.onabort=function(e){s.QueryExecutor.dbStatus={conStatus:o.CONNECTION_STATUS.Closed,lastError:"Connection aborted"}},null!=t&&t()},c.onupgradeneeded=function(e){e.target.result.createObjectStore(s.QueryExecutor.tableName,{keyPath:"Key"}).createIndex("Key","Key",{unique:!0})}}}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Get",function(){return c});var n,o=r(12),i=r(8),u=r(13),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.results)},o.key=t,o.onSuccess=r,o.onError=n,o}return s(t,e),t.prototype.execute=function(){var e,t,r,n=this;this.initTransaction_(),e=i.QueryExecutor.columnName,t=this.key,(r=n.objectStore.index(e).openCursor(IDBKeyRange.only(t))).onerror=function(e){n.errorOccured=!0,n.onErrorOccured(e)},r.onsuccess=function(e){var t=e.target.result;t&&(n.results=t.value.Value)}},t.prototype.initTransaction_=function(){u.IdbHelper.createTransaction([i.QueryExecutor.tableName],this.onTransactionCompleted_,"readonly"),this.objectStore=u.IdbHelper._transaction.objectStore(i.QueryExecutor.tableName)},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"DropDb",function(){return a});var n,o=r(4),i=r(3),u=r(18),s=r(20),c=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=function(e){function t(t,r){var n=e.call(this)||this;return n.onSuccess_=t,n.onError_=r,n}return c(t,e),t.prototype.deleteMetaData=function(){var e=this;o.remove("JsStore_"+this.dbName+"_Db_Version"),this.activeDb.tables.forEach(function(t){o.remove("JsStore_"+e.dbName+"_"+t.name+"_Version"),t.columns.forEach(function(r){r.autoIncrement&&o.remove("JsStore_"+e.dbName+"_"+t.name+"_"+r.name+"_Value")})}),this.getDbList(function(t){t.splice(t.indexOf(e.dbName),1),e.setDbList(t).then(function(){o.remove("JsStore_"+e.dbName+"_Schema",e.onSuccess_)})})},t.prototype.deleteDb=function(){var e=this;setTimeout(function(){var t=indexedDB.deleteDatabase(e.dbName);t.onblocked=function(){null!=e.onError_&&e.onError_(new u.LogHelper(i.ERROR_TYPE.DbBlocked).get())},t.onerror=function(t){null!=e.onError_&&e.onError_(event.target.error)},t.onsuccess=function(){e.dbStatus.conStatus=i.CONNECTION_STATUS.Closed,e.deleteMetaData()}},100)},t}(s.BaseDb)},function(e,t,r){"use strict";r.r(t),r.d(t,"LogHelper",function(){return i});var n=r(3),o=r(19),i=function(){function e(e,t){void 0===t&&(t=null),this.type=e,this.info_=t,this.message=this.getMsg_()}return e.prototype.throw=function(){throw this.get()},e.log=function(e){o.Config.isLogEnabled&&console.log(e)},e.prototype.logError=function(){console.error(this.get())},e.prototype.logWarning=function(){console.warn(this.get())},e.prototype.get=function(){return{message:this.message,type:this.type}},e.prototype.getMsg_=function(){var e;switch(this.type){case n.ERROR_TYPE.NotArray:e="Supplied value is not an array";break;case n.ERROR_TYPE.UndefinedColumn:e="Column is undefined in Where";break;case n.ERROR_TYPE.UndefinedValue:e="Value is undefined in Where";break;case n.ERROR_TYPE.UndefinedColumnName:e="Column name is undefined '"+this.info_.TableName+"'";break;case n.ERROR_TYPE.UndefinedDbName:e="Database name is not supplied";break;case n.ERROR_TYPE.UndefinedColumnValue:e="Column value is undefined";break;case n.ERROR_TYPE.NoValueSupplied:e="No value is supplied";break;case n.ERROR_TYPE.InvalidOp:e="Invalid Op Value '"+this.info_.Op+"'";break;case n.ERROR_TYPE.ColumnNotExist:e="Column '"+this.info_.ColumnName+"' does not exist";break;case n.ERROR_TYPE.EnableSearchOff:e="Search is turned off for the Column '"+this.info_.ColumnName+"'";break;case n.ERROR_TYPE.NullValue:e="Null value is not allowed for column '"+this.info_.ColumnName+"'";break;case n.ERROR_TYPE.BadDataType:e="Supplied value for column '"+this.info_.ColumnName+"' does not have valid type";break;case n.ERROR_TYPE.NextJoinNotExist:e="Next join details not supplied";break;case n.ERROR_TYPE.TableNotExist:e="Table '"+this.info_.TableName+"' does not exist";break;case n.ERROR_TYPE.DbNotExist:e="Database '"+this.info_.DbName+"' does not exist";break;case n.ERROR_TYPE.NotObject:e="supplied value is not object";break;case n.ERROR_TYPE.InvalidOp:e="Invalid Config '"+this.info_.Config+" '";break;case n.ERROR_TYPE.DbBlocked:e="database is blocked, cant be deleted right now";break;case n.ERROR_TYPE.InvalidColumn:e="Invalid column name "+this.info_.column;break;default:e=this.message}return e},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Config",function(){return n});var n=function(){function e(){}return e.isLogEnabled=!1,e.isRuningInWorker=!1,e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseDb",function(){return i});var n=r(2),o=r(21),i=function(){function e(){}return Object.defineProperty(e.prototype,"dbName",{get:function(){return n.IdbHelper.activeDb.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbStatus",{get:function(){return n.IdbHelper.dbStatus},set:function(e){n.IdbHelper.dbStatus=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbConnection",{get:function(){return n.IdbHelper.dbConnection},set:function(e){n.IdbHelper.dbConnection=e},enumerable:!0,configurable:!0}),e.prototype.updateDbStatus=function(e,t){n.IdbHelper.updateDbStatus(e,t)},e.prototype.onDbDroppedByBrowser=function(e){n.IdbHelper.callDbDroppedByBrowser(e)},Object.defineProperty(e.prototype,"dbVersion",{get:function(){return parseInt(n.IdbHelper.activeDbVersion)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activeDb",{get:function(){return n.IdbHelper.activeDb},enumerable:!0,configurable:!0}),e.prototype.getDbList=function(e){n.IdbHelper.getDbList(e)},e.prototype.setDbList=function(e){return n.IdbHelper.setDbList(e)},e.prototype.isNullOrEmpty=function(e){return o.Util.isNullOrEmpty(e)},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Util",function(){return o});var n=r(3),o=function(){function e(){}return e.isNull=function(e){if(null==e)return!0;switch(typeof e){case"string":return 0===e.length;case"number":return isNaN(e)}return!1},e.isNullOrEmpty=function(e){return null==e||0===e.length},e.isString=function(e){return typeof e===n.DATA_TYPE.String},e.isArray=function(e){return Array.isArray(e)},e.isObject=function(e){return typeof e===n.DATA_TYPE.Object},e.getObjectFirstKey=function(e){for(var t in e)return t;return null},e.getType=function(e){if(null==e)return n.DATA_TYPE.Null;var t=typeof e;switch(t){case"object":if(Array.isArray(e))return n.DATA_TYPE.Array;if(e.getDate&&e.getTime)return n.DATA_TYPE.DateTime;default:return t}},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"OpenDb",function(){return c});var n,o=r(3),i=r(18),u=r(20),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r){var n=e.call(this)||this;return n.onSuccess_=t,n.onError_=r,n}return s(t,e),t.prototype.execute=function(){var e=this;if(this.isNullOrEmpty(this.dbName)){new i.LogHelper(o.ERROR_TYPE.UndefinedDbName).throw()}else{var t=indexedDB.open(this.dbName,this.dbVersion);t.onerror=function(t){null!=e.onError_&&e.onError_(t.target.error)},t.onsuccess=function(r){e.dbStatus.conStatus=o.CONNECTION_STATUS.Connected,e.dbConnection=t.result,e.dbConnection.onclose=function(t){e.onDbDroppedByBrowser(),e.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed)},e.dbConnection.onversionchange=function(t){null===t.newVersion&&null===t.newVersion&&(t.target.close(),e.onDbDroppedByBrowser(!0),e.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed))},e.dbConnection.onerror=function(t){e.dbStatus.lastError="Error occured in connection :"+t.target.result},null!=e.onSuccess_&&e.onSuccess_(),e.setPrimaryKey_()}}},t.prototype.setPrimaryKey_=function(){var e=this;this.activeDb.tables.forEach(function(t,r){t.columns.every(function(t){return e.activeDb.tables[r].primaryKey=t.primaryKey?t.name:"",!t.primaryKey})})},t}(u.BaseDb)},function(e,t,r){"use strict";r.r(t),r.d(t,"DbHelper",function(){return o});var n=r(24),o=function(){function e(e){this.tables=[],this.name=e.name,this.tables=e.tables}return e.prototype.createMetaData=function(e){var t=this,r=0,o=[],i=function(){if(r<t.tables.length){var u=t.tables[r],s=new n.TableHelper(u);s.createMetaData(t.name,function(){s.callback=null,o.push(s),i()}),++r}else e(o)};i()},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"TableHelper",function(){return i});var n=r(4),o=r(2),i=function(){function e(e){this.columns=[],this.requireDelete=!1,this.requireCreation=!1,this.name=e.name,this.version=e.version,this.columns=e.columns,this.setPrimaryKey_()}return e.prototype.createMetaData=function(e,t){this.callback=t,this.setRequireDelete_(e),this.setDbVersion_(e)},e.prototype.setPrimaryKey_=function(){var e=this;this.columns.every(function(t){return e.primaryKey=t.primaryKey?t.name:"",!t.primaryKey})},e.prototype.setRequireDelete_=function(e){var t=this;n.get("JsStore_"+e+"_"+this.name+"_Version",function(e){null==e?t.requireCreation=!0:e<t.version&&(t.requireDelete=!0)})},e.prototype.setDbVersion_=function(e){o.IdbHelper.activeDbVersion=o.IdbHelper.activeDbVersion>this.version?o.IdbHelper.activeDbVersion:this.version,n.set("JsStore_"+e+"_Db_Version",o.IdbHelper.activeDbVersion),n.set("JsStore_"+e+"_"+this.name+"_Version",o.IdbHelper.activeDbVersion,this.callback),this.version=o.IdbHelper.activeDbVersion},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"CreateDb",function(){return c});var n,o=r(3),i=r(4),u=r(20),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var u=e.call(this)||this,s=[],c=indexedDB.open(u.dbName,u.dbVersion);return c.onerror=function(e){null!=n&&n(e.target.error)},c.onsuccess=function(e){u.dbStatus.conStatus=o.CONNECTION_STATUS.Connected,u.dbConnection=c.result,u.dbConnection.onclose=function(e){u.onDbDroppedByBrowser(),u.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed)},u.dbConnection.onversionchange=function(e){null===e.newVersion&&(e.target.close(),u.onDbDroppedByBrowser(!0),u.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed))},u.dbConnection.onerror=function(e){u.dbStatus.lastError="Error occured in connection :"+e.target.result},u.savedbNameIntoDbList(),null!=r&&r(s)},c.onupgradeneeded=function(e){var r=e.target.result,n=function(e,t){try{if(e.primaryKey.length>0){u.activeDb.tables[t].primaryKey=e.primaryKey;var n=r.createObjectStore(e.name,{keyPath:e.primaryKey});e.columns.forEach(function(t){if(!0===t.enableSearch){var r=t.primaryKey?{unique:!0}:{unique:t.unique};r.multiEntry=t.multiEntry,n.createIndex(t.name,t.name,r),t.autoIncrement&&i.set("JsStore_"+u.dbName+"_"+e.name+"_"+t.name+"_Value",0)}})}else{var o=r.createObjectStore(e.name,{autoIncrement:!0});e.columns.forEach(function(t){var r={unique:t.unique,multiEntry:t.multiEntry};o.createIndex(t.name,t.name,r),t.autoIncrement&&i.set("JsStore_"+u.dbName+"_"+e.name+"_"+t.name+"_Value",0)})}s.push(e.name),i.set("JsStore_"+u.dbName+"_"+e.name+"_Version",e.version)}catch(e){console.error(e)}};t.forEach(function(e,t){e.requireDelete?(r.objectStoreNames.contains(e.name)&&r.deleteObjectStore(e.name),n(e,t)):e.requireCreation&&n(e,t)})},u}return s(t,e),t.prototype.savedbNameIntoDbList=function(){var e=this;this.getDbList(function(t){t.indexOf(e.dbName)<0&&(t.push(e.dbName),e.setDbList(t))})},t}(u.BaseDb)},function(e,t,r){"use strict";r.r(t),r.d(t,"DataBase",function(){return o});var n=r(27),o=function(){return function(e){var t=this;this.tables=[],this.name=e.name,e.tables.forEach(function(e){t.tables.push(new n.Table(e))})}}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Table",function(){return o});var n=r(28),o=function(){return function(e){var t=this;this.columns=[],this.name=e.name,this.version=null==e.version?1:e.version,e.columns.forEach(function(r){t.columns.push(new n.Column(r,e.name))})}}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Column",function(){return i});var n=r(18),o=r(3),i=function(){return function(e,t){null!=e.name?this.name=e.name:new n.LogHelper(o.ERROR_TYPE.UndefinedColumnName,{TableName:t}).throw(),this.autoIncrement=null!=e.autoIncrement&&e.autoIncrement,this.primaryKey=null!=e.primaryKey&&e.primaryKey,this.unique=null!=e.unique&&e.unique,this.notNull=null!=e.notNull&&e.notNull,this.dataType=null!=e.dataType?e.dataType:e.autoIncrement?"number":null,this.default=e.default,this.multiEntry=null!=e.multiEntry&&e.multiEntry,this.enableSearch=null==e.enableSearch||e.enableSearch}}()},function(e,t,r){"use strict";r.r(t);var n=r(30);r.d(t,"Instance",function(){return n.Instance});var o=r(41);r.d(t,"Join",function(){return o.Join})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return s});var n,o=r(31),i=r(3),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){if(!1===o.errorOccured)if(o.processOrderBy(),!1===o.errorOccured){if(!0===o.isOrderWithLimit&&(o.results=o.results.slice(0,o.query.limit)),o.query.distinct){var e=[],t=o.results[0];for(var r in t)e.push(r);var n=o.getPrimaryKey(o.query.from),i=e.indexOf(n);e.splice(i,1),o.query.groupBy=e.length>0?e:null}o.query.groupBy?o.query.aggregate?o.executeAggregateGroupBy():o.processGroupBy():o.query.aggregate&&o.processAggregateQry(),o.onSuccess(o.results)}else o.onErrorOccured(o.error,!0)},o.onError=n,o.onSuccess=r,o.query=t,o.skipRecord=t.skip,o.limitRecord=t.limit,o.tableName=t.from,t.order&&t.order.by&&null!=t.limit&&(o.isOrderWithLimit=!0),o}return u(t,e),t.prototype.execute=function(){try{null!=this.query.where?(this.initTransaction_(),this.isArray(this.query.where)?this.processWhereArrayQry():this.processWhere_()):(this.initTransaction_(),this.executeWhereUndefinedLogic())}catch(e){this.errorOccured=!0,this.onExceptionOccured(e,{TableName:this.query.from})}},t.prototype.processWhereArrayQry=function(){var e=this;this.isArrayQry=!0;var t,r=this.query.where,n=this.getPrimaryKey(this.query.from),o=!0,u=[],s=function(){if(t===i.QUERY_OPTION.And){var s=function(){var t=[];e.results.forEach(function(e){var r;r=e[n],u.findIndex(function(e){return e[n]===r})>=0&&t.push(e)}),u=t,t=null};u.length>0?s():!0===o?u=e.results:s()}else u.length>0?(e.results=u.concat(e.results),e.removeDuplicates(),u=e.results):u=e.results;o=!1,r.length>0?(e.results=[],c()):(e.results=u,!0===e.isSubQuery&&e.onTransactionCompleted_())},c=function(){e.query.where=r.shift(),e.query.where[i.QUERY_OPTION.Or]&&1===Object.keys(e.query.where).length?(t=i.QUERY_OPTION.Or,e.query.where=e.query.where[i.QUERY_OPTION.Or],e.onWhereArrayQrySuccess=s):(t=i.QUERY_OPTION.And,e.onWhereArrayQrySuccess=s),e.processWhere_()};c()},t.prototype.onQueryFinished=function(){!0===this.isOr?this.orQuerySuccess_():!0===this.isArrayQry?this.onWhereArrayQrySuccess():!0!==this.isTransaction&&!0!==this.isSubQuery||this.onTransactionCompleted_()},t.prototype.initTransaction_=function(){this.createTransaction([this.tableName],this.onTransactionCompleted_,i.IDB_MODE.ReadOnly),this.objectStore=this.transaction.objectStore(this.tableName)},t.prototype.processWhere_=function(){this.query.where.or&&this.processOrLogic_(),this.goToWhereLogic()},t.prototype.orQueryFinish_=function(){this.isOr=!1,this.results=this.orInfo.results,this.orInfo=void 0,this.removeDuplicates(),this.onQueryFinished()},t.prototype.orQuerySuccess_=function(){if(this.orInfo.results=this.orInfo.results.concat(this.results),!this.query.limit||this.query.limit>this.orInfo.results.length){this.results=[];var e=this.getObjectFirstKey(this.orInfo.orQuery);if(null!=e){var t={};t[e]=this.orInfo.orQuery[e],delete this.orInfo.orQuery[e],this.query.where=t,this.goToWhereLogic()}else this.orQueryFinish_()}else this.orQueryFinish_()},t.prototype.processOrLogic_=function(){this.isOr=!0,this.orInfo={orQuery:this.query.where.or,results:[]},delete this.query.where.or},t}(o.Helper)},function(e,t,r){"use strict";r.r(t),r.d(t,"Helper",function(){return c});var n,o=r(32),i=r(3),u=r(18),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(){return e.call(this)||this}return s(t,e),t.prototype.processOrderBy=function(){var e=this,t=this.query.order;if(t&&this.results.length>0&&!this.sorted&&t.by){t.type=t.type?t.type.toLowerCase():"asc";var r=t.by,n=this.getColumnInfo(r);null==n?(this.errorOccured=!0,this.error=new u.LogHelper(i.ERROR_TYPE.InvalidColumn,{column:r})):n.dataType===i.DATA_TYPE.String?"asc"===t.type?e.results.sort(function(e,t){return e[r].toLowerCase().localeCompare(t[r].toLowerCase())}):e.results.sort(function(e,t){return t[r].toLowerCase().localeCompare(e[r].toLowerCase())}):n.dataType===i.DATA_TYPE.Number&&("asc"===t.type?e.results.sort(function(e,t){return e[r]-t[r]}):e.results.sort(function(e,t){return t[r]-e[r]}))}},t.prototype.processAggregateQry=function(){var e,t=this.results,r={};for(var n in this.results=void 0,this.query.aggregate){var o=this.query.aggregate[n],u=this.getType(o);switch(n){case"count":var s=function(){var r=0;for(var n in t)r+=t[n][e]?1:0;return r};if(u===i.DATA_TYPE.String)r["count("+(e=o)+")"]=s();else if(u===i.DATA_TYPE.Array)for(var c in o)r["count("+(e=o[c])+")"]=s();break;case"max":var a=function(){var r=0;for(var n in t)r=r>t[n][e]?r:t[n][e];return r};if(u===i.DATA_TYPE.String)r["max("+(e=o)+")"]=a();else if(u===i.DATA_TYPE.Array)for(var c in o)r["max("+(e=o[c])+")"]=a();break;case"min":var l=function(){var r=1/0,n=1/0;for(var o in t)r=r<(n=t[o][e]?t[o][e]:1/0)?r:n;return r};if(u===i.DATA_TYPE.String)r["min("+(e=o)+")"]=l();else if(u===i.DATA_TYPE.Array)for(var c in o)r["min("+(e=o[c])+")"]=l();break;case"sum":var h=function(){var r=0;for(var n in t)r+=t[n][e];return r};if(u===i.DATA_TYPE.String)r["sum("+(e=o)+")"]=h();else if(u===i.DATA_TYPE.Array)for(var c in o)r["sum("+(e=o[c])+")"]=h();break;case"avg":var f=function(){var r=0;for(var n in t)r+=t[n][e];return r/t.length};if(u===i.DATA_TYPE.String)r["avg("+(e=o)+")"]=f();else if(u===i.DATA_TYPE.Array)for(var c in o)r["avg("+(e=o[c])+")"]=f()}}for(var n in r)t[0][n]=r[n];this.results=t},t}(o.GroupByHelper)},function(e,t,r){"use strict";r.r(t),r.d(t,"GroupByHelper",function(){return s});var n,o=r(33),i=r(3),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return e.call(this)||this}return u(t,e),t.prototype.processGroupBy=function(){var e=this.query.groupBy,t=this.results,r={};if(this.results=this.query.groupBy=void 0,this.getType(e)===i.DATA_TYPE.String)for(var n in t)r[t[n][e]]=t[n];else{var o=void 0;for(var n in t){for(var u in o="",e)o+=t[n][e[u]];r[o]=t[n]}}for(var n in t=[],r)t.push(r[n]);this.results=t},t.prototype.executeAggregateGroupBy=function(){var e,t,r,n,o=this,u=this.query.groupBy,s=this.results,c={},a=this.query.aggregate;this.query.aggregate=void 0,this.results=void 0;var l=function(){for(var u in a){var l=a[u],h=o.getType(l);switch(u){case i.QUERY_OPTION.Count:var f=function(){return r=(r=c[t])?r["count("+n+")"]:0,r+=s[e][n]?1:0};if(h===i.DATA_TYPE.String)n=l,s[e]["count("+n+")"]=f();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],s[e]["count("+n+")"]=f();break;case i.QUERY_OPTION.Max:var _=function(){return r=(r=c[t])?r["max("+n+")"]:0,s[e][n]=s[e][n]?s[e][n]:0,r>s[e][n]?r:s[e][n]};if(h===i.DATA_TYPE.String)n=l,s[e]["max("+n+")"]=_();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],s[e]["max("+n+")"]=_();break;case i.QUERY_OPTION.Min:var y=function(){return r=(r=c[t])?r["min("+n+")"]:1/0,s[e][n]=s[e][n]?s[e][n]:1/0,r<s[e][n]?r:s[e][n]};if(h===i.DATA_TYPE.String)n=l,s[e]["min("+n+")"]=y();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],s[e]["min("+n+")"]=y();break;case i.QUERY_OPTION.Sum:var d=function(){return r=(r=c[t])?r["sum("+n+")"]:0,r+=s[e][n]?s[e][n]:0};if(h===i.DATA_TYPE.String)n=l,s[e]["sum("+n+")"]=d();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],s[e]["sum("+n+")"]=d();break;case i.QUERY_OPTION.Avg:var b=function(){var o=(r=c[t])?r["sum("+n+")"]:0;o+=s[e][n]?s[e][n]:0,s[e]["sum("+n+")"]=o,r=r?r["count("+n+")"]:0,r+=s[e][n]?1:0,s[e]["count("+n+")"]=r};if(h===i.DATA_TYPE.String)n=l,b();else if(h===i.DATA_TYPE.Array)for(var p in l)n=l[p],b()}}};if(this.getType(u)===i.DATA_TYPE.String)for(e in s)t=s[e][u],l(),c[t]=s[e];else for(e in s){for(var h in t="",u)t+=s[e][u[h]];l(),c[t]=s[e]}for(var f in s=[],c)s.push(c[f]);if(a.avg)if(this.getType(a.avg)===i.DATA_TYPE.String)for(e in s){var p=s[e]["sum("+a.avg+")"],_=s[e]["count("+a.avg+")"];s[e]["avg("+a.avg+")"]=p/_,a.count!==a.avg&&delete s[e]["count("+a.avg+")"],a.sum!==a.avg&&delete s[e]["sum("+a.avg+")"]}else{var y=this.getType(a.count)===i.DATA_TYPE.String,d=this.getType(a.sum)===i.DATA_TYPE.String;for(e in s)for(var h in a.avg){var b=a.avg[h],O=s[e]["sum("+b+")"],v=s[e]["count("+b+")"];s[e]["avg("+b+")"]=O/v,y&&(a.count!==b?delete s[e]["count("+b+")"]:-1===a.count.indexOf(b)&&delete s[e]["count("+b+")"]),d&&(a.sum!==b?delete s[e]["sum("+b+")"]:-1===a.sum.indexOf(b)&&delete s[e]["sum("+b+")"])}}this.results=s},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return u});var n,o=r(34),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeSkipAndLimitForWhere_=function(){var e,t=this,r=!1;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r&&t.results.length!==t.limitRecord?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSkipForWhere_=function(){var e,t=this,r=!1;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeLimitForWhere_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)&&t.results.length!==t.limitRecord&&t.whereCheckerInstance.check(e.value)?(t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSimpleForWhere_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeWhereLogic=function(e,t,r,n){var o=this;t=r?t[r]:t,this.cursorOpenRequest=this.objectStore.index(e).openCursor(this.getKeyRange(t,r),n),this.cursorOpenRequest.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},!1===this.isOrderWithLimit?this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForWhere_():this.skipRecord?this.executeSkipForWhere_():this.limitRecord?this.executeLimitForWhere_():this.executeSimpleForWhere_():this.skipRecord?this.executeSkipForWhere_():this.executeSimpleForWhere_()},t}(o.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return u});var n,o=r(35),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,r){this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r,this.cursorOpenRequest=this.objectStore.index(e).openCursor(),this.cursorOpenRequest.onerror=this.onCursorError,this.skipRecord&&this.limitRecord?this.executeSkipAndLimit_():this.skipRecord?this.executeSkip_():this.limitRecord?this.executeLimit_():this.executeSimple_()},t.prototype.executeSkipAndLimit_=function(){var e,t=this,r=function(e){0===n?t.results.push(e):--n},n=this.skipRecord;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){e=n.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&r(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){e=n.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&r(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSkip_=function(){var e,t=this,r=this.skipRecord,n=function(e){0===r?t.results.push(e):--r};this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&n(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&n(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeLimit_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){e=r.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){e=r.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSimple_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?(t.filterOnOccurence(e.key)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return u});var n,o=r(36),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForIn_(e,t):this.skipRecord?this.executeSkipForIn_(e,t):this.limitRecord?this.executeLimitForIn_(e,t):this.executeSimpleForIn_(e,t)},t.prototype.executeSkipAndLimitForIn_=function(e,t){var r,n,o=this,i=this.skipRecord,u=this.objectStore.index(e),s=function(e){0===i?o.results.push(e):--i},c=t.length,a=0,l=function(){++a===c&&o.onQueryFinished()};if(this.checkFlag)for(var h=0;h<c;h++)this.errorOccured||((n=u.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){r=e.target.result,o.results.length!==o.limitRecord&&r?(o.whereCheckerInstance.check(r.value)&&s(r.value),r.continue()):l()},n.onerror=this.onCursorError);else for(h=0;h<c;h++)this.errorOccured||((n=u.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){r=e.target.result,o.results.length!==o.limitRecord&&r?(s(r.value),r.continue()):l()},n.onerror=this.onCursorError)},t.prototype.executeSkipForIn_=function(e,t){var r,n,o=this,i=this.skipRecord,u=this.objectStore.index(e),s=function(e){0===i?o.results.push(e):--i},c=t.length,a=0,l=function(){++a===c&&o.onQueryFinished()};if(this.checkFlag)for(var h=0;h<c;h++)this.errorOccured||((n=u.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&s(r.value),r.continue()):l()},n.onerror=this.onCursorError);else for(h=0;h<c;h++)this.errorOccured||((n=u.openCursor(IDBKeyRange.only(t[h]))).onsuccess=function(e){(r=e.target.result)?(s(r.value),r.continue()):l()},n.onerror=this.onCursorError)},t.prototype.executeLimitForIn_=function(e,t){var r,n,o=this,i=this.objectStore.index(e),u=t.length,s=0,c=function(){++s===u&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<u;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)&&o.results.length!==o.limitRecord?(o.whereCheckerInstance.check(r.value)&&o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError);else for(a=0;a<u;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)&&o.results.length!==o.limitRecord?(o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError)},t.prototype.executeSimpleForIn_=function(e,t){var r,n,o=this,i=this.objectStore.index(e),u=t.length,s=0,c=function(){++s===u&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<u;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError);else for(a=0;a<u;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(o.results.push(r.value),r.continue()):c()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return c});var n,o=r(37),i=r(18),u=r(3),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.executeWhereUndefinedLogic=function(){if(this.query.order&&this.query.order.by)if(this.objectStore.indexNames.contains(this.query.order.by)){var e=this.query.order.type&&"desc"===this.query.order.type.toLowerCase()?"prev":"next";this.sorted=!0,this.cursorOpenRequest=this.objectStore.index(this.query.order.by).openCursor(null,e)}else{new i.LogHelper(u.ERROR_TYPE.ColumnNotExist,{ColumnName:this.query.order.by}).throw()}else this.cursorOpenRequest=this.objectStore.openCursor();this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForNoWhere_():this.skipRecord?this.executeSkipForNoWhere_():this.limitRecord?this.executeLimitForNotWhere_():this.executeSimpleForNotWhere_(),this.cursorOpenRequest.onerror=function(e){this._errorOccured=!0,this.onErrorOccured(e)}.bind(this)},t.prototype.executeSkipAndLimitForNoWhere_=function(){var e,t=this,r=!1;this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSkipForNoWhere_=function(){var e,t=this,r=!1;this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?r?(t.results.push(e.value),e.continue()):(r=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSimpleForNotWhere_=function(){var e;this.cursorOpenRequest.onsuccess=function(t){(e=t.target.result)?(this.results.push(e.value),e.continue()):this.onQueryFinished()}.bind(this)},t.prototype.executeLimitForNotWhere_=function(){var e,t=this;this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t}(o.BaseSelect)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseSelect",function(){return u});var n,o=r(38),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.results=[],t.sorted=!1,t.isSubQuery=!1,t.isOrderWithLimit=!1,t}return i(t,e),t.prototype.removeDuplicates=function(){var e=this.results;this.results=void 0;var t=this.getPrimaryKey(this.query.from),r={};for(var n in e)r[e[n][t]]=e[n];for(var n in e=[],r)e.push(r[n]);this.results=e},t.prototype.onQueryFinished=function(){},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"Base",function(){return a});var n,o=r(39),i=r(40),u=r(18),s=r(3),c=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.errorOccured=!1,t.errorCount=0,t.rowAffected=0,t.checkFlag=!1,t.onCursorError=function(e){t.errorOccured=!0,t.onErrorOccured(e)},t.goToWhereLogic=function(){var e=this,t=this.getObjectFirstKey(this.query.where);if(!0===this.query.ignoreCase&&(this.query.where=this.makeQryInCaseSensitive(this.query.where)),this.objectStore.indexNames.contains(t)){var r=this.query.where[t];if("object"==typeof r){this.checkFlag=Boolean(Object.keys(r).length>1||Object.keys(this.query.where).length>1),!0===this.checkFlag&&(this.whereCheckerInstance=new i.WhereChecker(this.query.where));var n=this.getObjectFirstKey(r);switch(n){case s.QUERY_OPTION.Like:var o=r[s.QUERY_OPTION.Like].split("%"),c=void 0,a=void 0;o[1]?(c=o[1],a=o.length>2?s.OCCURENCE.Any:s.OCCURENCE.Last):(c=o[0],a=s.OCCURENCE.First),a===s.OCCURENCE.First?(this.getAllCombinationOfWord(c).forEach(function(r){e.executeWhereLogic(t,{"-":{low:r,high:r+"￿"}},"-","next")}),delete this.query.where[t][s.QUERY_OPTION.Like]):this.executeLikeLogic(t,c,a);break;case s.QUERY_OPTION.In:this.executeInLogic(t,r[s.QUERY_OPTION.In]);break;case s.QUERY_OPTION.Between:case s.QUERY_OPTION.GreaterThan:case s.QUERY_OPTION.LessThan:case s.QUERY_OPTION.GreaterThanEqualTo:case s.QUERY_OPTION.LessThanEqualTo:this.executeWhereLogic(t,r,n,"next");break;case s.QUERY_OPTION.Aggregate:break;default:this.executeWhereLogic(t,r,null,"next")}}else this.checkFlag=Boolean(Object.keys(this.query.where).length>1),!0===this.checkFlag&&(this.whereCheckerInstance=new i.WhereChecker(this.query.where)),this.executeWhereLogic(t,r,null,"next")}else{this.errorOccured=!0;var l=null==this.getColumnInfo(t)?new u.LogHelper(s.ERROR_TYPE.ColumnNotExist,{ColumnName:t}):new u.LogHelper(s.ERROR_TYPE.EnableSearchOff,{ColumnName:t});this.onErrorOccured(l,!0)}},t}return c(t,e),t.prototype.onErrorOccured=function(e,t){if(void 0===t&&(t=!1),++this.errorCount,1===this.errorCount)if(t)e.logError(),this.onError(e.get());else{var r=void 0;e.name?(r=new u.LogHelper(e.name)).message=e.message:(r=new u.LogHelper(e.target.error.name)).message=e.target.error.message,r.logError(),this.onError(r.get())}},t.prototype.onExceptionOccured=function(e,t){switch(e.name){case"NotFoundError":var r=new u.LogHelper(s.ERROR_TYPE.TableNotExist,t);this.onErrorOccured(r,!0);break;default:console.error(e)}},t.prototype.getColumnInfo=function(e){var t;return this.getTable(this.tableName).columns.every(function(r){return r.name!==e||(t=r,!1)}),t},t.prototype.makeQryInCaseSensitive=function(e){var t,r,n=[];for(var o in e)switch(t=e[o],this.getType(t)){case s.DATA_TYPE.String:n=n.concat(this.getAllCombinationOfWord(t)),e[o]={},e[o][s.QUERY_OPTION.In]=n;break;case s.DATA_TYPE.Object:for(var i in t)if(r=t[i],this.isString(r))switch(i){case s.QUERY_OPTION.In:n=n.concat(this.getAllCombinationOfWord(r,!0));break;case s.QUERY_OPTION.Like:break;default:n=n.concat(this.getAllCombinationOfWord(r))}e[o][s.QUERY_OPTION.In]=n}return e},t}(o.BaseHelper)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseHelper",function(){return u});var n=r(3),o=r(2),i=r(21),u=function(){function e(){}return Object.defineProperty(e.prototype,"activeDb",{get:function(){return o.IdbHelper.activeDb},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbConnection",{get:function(){return o.IdbHelper.dbConnection},enumerable:!0,configurable:!0}),e.prototype.getObjectFirstKey=function(e){return i.Util.getObjectFirstKey(e)},e.prototype.isNull=function(e){return i.Util.isNull(e)},e.prototype.getType=function(e){return i.Util.getType(e)},e.prototype.isObject=function(e){return i.Util.isObject(e)},e.prototype.isString=function(e){return i.Util.isString(e)},e.prototype.isArray=function(e){return i.Util.isArray(e)},Object.defineProperty(e.prototype,"transaction",{get:function(){return o.IdbHelper.transaction},enumerable:!0,configurable:!0}),e.prototype.createTransaction=function(e,t,r){o.IdbHelper.createTransaction(e,t,r)},e.prototype.filterOnOccurence=function(e){var t=!1;switch(e=e.toLowerCase(),this.compSymbol){case n.OCCURENCE.Any:e.indexOf(this.compValue)>=0&&(t=!0);break;case n.OCCURENCE.First:0===e.indexOf(this.compValue)&&(t=!0);break;case n.OCCURENCE.Last:e.lastIndexOf(this.compValue)===e.length-this.compValueLength&&(t=!0);break;default:e!==this.compValue&&(t=!0)}return t},e.prototype.isTableExist=function(e){return this.activeDb.tables.findIndex(function(t){return t.name===e})>=0},e.prototype.getTable=function(e){return o.IdbHelper.getTable(e)},e.prototype.getKeyRange=function(e,t){var r;switch(t){case n.QUERY_OPTION.Between:r=IDBKeyRange.bound(e.low,e.high,!1,!1);break;case n.QUERY_OPTION.GreaterThan:r=IDBKeyRange.lowerBound(e,!0);break;case n.QUERY_OPTION.GreaterThanEqualTo:r=IDBKeyRange.lowerBound(e);break;case n.QUERY_OPTION.LessThan:r=IDBKeyRange.upperBound(e,!0);break;case n.QUERY_OPTION.LessThanEqualTo:r=IDBKeyRange.upperBound(e);break;default:r=IDBKeyRange.only(e)}return r},e.prototype.getPrimaryKey=function(e){var t=this.getTable(e).primaryKey;return t||this.getKeyPath(e)},e.prototype.getKeyPath=function(e){return this.dbConnection.transaction([e],"readonly").objectStore(e).keyPath},e.prototype.getAllCombinationOfWord=function(e,t){if(t){for(var r=[],n=0,o=e.length;n<o;n++)r=r.concat(this.getCombination_(e[n]));return r}return this.getCombination_(e)},e.prototype.getCombination_=function(e){var t=[],r=function(e,n,o){if(o===e.length)t.push(n.join(""));else{var i=e.charAt(o);n[o]=i.toLowerCase(),r(e,n,o+1),n[o]=i.toUpperCase(),r(e,n,o+1)}};return r(e,[],0),t},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"WhereChecker",function(){return o});var n=r(3),o=function(){function e(e){this.where=e}return e.prototype.check=function(e){var t;for(var r in this.status=!0,this.where){if(!this.status)break;if("object"==typeof(t=this.where[r]))for(var o in t){if(!this.status)break;switch(o){case n.QUERY_OPTION.In:this.checkIn(r,e[r]);break;case n.QUERY_OPTION.Like:this.checkLike(r,e[r]);break;case n.QUERY_OPTION.Between:case n.QUERY_OPTION.GreaterThan:case n.QUERY_OPTION.LessThan:case n.QUERY_OPTION.GreaterThanEqualTo:case n.QUERY_OPTION.LessThanEqualTo:case n.QUERY_OPTION.NotEqualTo:this.checkComparisionOp(r,e[r],o)}}else if(t!==e[r]){this.status=!1;break}}return this.status},e.prototype.checkIn=function(e,t){for(var r=0,o=this.where[e][n.QUERY_OPTION.In],i=o.length;r<i;r++){if(o[r]===t){this.status=!0;break}this.status=!1}},e.prototype.checkLike=function(e,t){var r,o,i,u=this.where[e][n.QUERY_OPTION.Like].split("%");switch(u[1]?(o=u[1],r=u.length>2?n.OCCURENCE.Any:n.OCCURENCE.Last):(o=u[0],r=n.OCCURENCE.First),t=t.toLowerCase(),r){case n.OCCURENCE.Any:(i=t.indexOf(o.toLowerCase()))<0&&(this.status=!1);break;case n.OCCURENCE.First:((i=t.indexOf(o.toLowerCase()))>0||i<0)&&(this.status=!1);break;default:(i=t.lastIndexOf(o.toLowerCase()))<t.length-o.length&&(this.status=!1)}},e.prototype.checkComparisionOp=function(e,t,r){var o=this.where[e][r];switch(r){case n.QUERY_OPTION.GreaterThan:t<=o&&(this.status=!1);break;case n.QUERY_OPTION.LessThan:t>=o&&(this.status=!1);break;case n.QUERY_OPTION.LessThanEqualTo:t>o&&(this.status=!1);break;case n.QUERY_OPTION.GreaterThanEqualTo:t<o&&(this.status=!1);break;case n.QUERY_OPTION.Between:(t<o.Low||t>o.High)&&(this.status=!1);break;case n.QUERY_OPTION.NotEqualTo:t===o&&(this.status=!1)}},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Join",function(){return c});var n,o=r(37),i=r(30),u=r(3),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;o.queryStack=[],o.currentQueryStackIndex=0,o.onSuccess=r,o.onError=n,o.query=t;var u=[],s=function(e){return void 0!==e.table1?(e.table2.joinType=void 0===e.join?"inner":e.join.toLowerCase(),o.queryStack.push(e.table2),o.queryStack.length%2==0&&(o.queryStack[o.queryStack.length-1].nextJoin=e.nextJoin),u.push(e.table2.table),s(e.table1)):(o.queryStack.push(e),void u.push(e.table))};(s(t.from),o.queryStack.reverse(),o.errorOccured)||new i.Instance({from:o.queryStack[0].table,where:o.queryStack[0].where},function(e){var t=o.queryStack[0].table;e.forEach(function(e,r){o.results[r]={},o.results[r][t]=e}),o.startExecutionJoinLogic_()},o.onErrorOccured).execute();return o}return s(t,e),t.prototype.onTransactionCompleted_=function(e){null!=this.onSuccess&&this.queryStack.length===this.currentQueryStackIndex+1&&(this.query[u.QUERY_OPTION.Count]?this.onSuccess(this.results.length):(this.query[u.QUERY_OPTION.Skip]&&this.query[u.QUERY_OPTION.Limit]?(this.results.splice(0,this.query[u.QUERY_OPTION.Skip]),this.results.splice(this.query[u.QUERY_OPTION.Limit]-1,this.results.length)):this.query[u.QUERY_OPTION.Skip]?this.results.splice(0,this.query[u.QUERY_OPTION.Skip]):this.query[u.QUERY_OPTION.Limit]&&this.results.splice(this.query[u.QUERY_OPTION.Limit]-1,this.results.length),this.onSuccess(this.results)))},t.prototype.executeWhereJoinLogic_=function(e,t){var r,n=this,o=[],u=(t.column,this.results),s=u.length,c=0;new i.Instance({from:t.table,order:t.order,where:t.where},function(t){t.forEach(function(t,n){for(var o=0;o<s;o++)r=u[o][e.table][e.column],a(r,t,o)}),n.results=o,n.queryStack.length>n.currentQueryStackIndex+1?n.startExecutionJoinLogic_():n.onTransactionCompleted_(null)},this.onErrorOccured).execute();var a=function(e,r,i){if(o[c]={},e===r[t.column]){o[c][t.table]=r;for(var s=0;s<n.currentQueryStackIndex;s++)o[c][n.queryStack[s].table]=u[i][n.queryStack[s].table];++c}else if("left"===t.joinType){o[c]={},o[c][t.table]=null;for(s=0;s<n.currentQueryStackIndex;s++)o[c][n.queryStack[s].table]=u[i][n.queryStack[s].table];++c}}},t.prototype.executeRightJoin_=function(e,t){var r=this,n=[],o=(t.column,this.results),u=o.length,s=0;new i.Instance({from:t.table,order:t.order,where:t.where},function(i){!function(i){var c=!1;i.forEach(function(r,i){for(s=0;s<u;s++)if(r[t.column]===o[s][e.table][e.column]){c=!0;break}if(n[i]={},n[i][t.table]=r,c){c=!1;for(var a=0;a<this.currentQueryStackIndex;a++)n[i][this.queryStack[a].table]=o[s][this.queryStack[a].table]}else for(a=0;a<this.currentQueryStackIndex;a++)n[i][this.queryStack[a].table]=null},r)}(i),r.results=n,r.queryStack.length>r.currentQueryStackIndex+1?r.startExecutionJoinLogic_():r.onTransactionCompleted_(null)},r.onErrorOccured).execute()},t.prototype.executeWhereUndefinedLogicForJoin_=function(e,t){var r=this,n=[],o=(t.column,this.results),u={},s=o.length,c=0,a=0,l=function(){a<s?r.errorOccured||(u[t.column]=o[a][e.table][e.column],new i.Instance({from:t.table,order:t.order,where:u},function(e){!function(e){if(e.length>0)e.forEach(function(e){n[c]={},n[c][t.table]=e;for(var i=0;i<r.currentQueryStackIndex;i++)n[c][r.queryStack[i].table]=o[a][r.queryStack[i].table];++c});else if("left"===t.joinType){n[c]={},n[c][t.table]=null;for(var i=0;i<r.currentQueryStackIndex;i++)n[c][r.queryStack[i].table]=o[a][r.queryStack[i].table];++c}}(e),++a,l()},r.onErrorOccured.bind(r)).execute()):(r.results=n,r.queryStack.length>r.currentQueryStackIndex+1?r.startExecutionJoinLogic_():r.onTransactionCompleted_(null))};l()},t.prototype.startExecutionJoinLogic_=function(){var e;this.currentQueryStackIndex>=1&&this.currentQueryStackIndex%2==1?(e={column:this.queryStack[this.currentQueryStackIndex].nextJoin.column,table:this.queryStack[this.currentQueryStackIndex].nextJoin.table},this.currentQueryStackIndex++):e=this.queryStack[this.currentQueryStackIndex++];var t=this.queryStack[this.currentQueryStackIndex];"right"===t.joinType?this.executeRightJoin_(e,t):t.where?this.executeWhereJoinLogic_(e,t):this.executeWhereUndefinedLogicForJoin_(e,t)},t}(o.BaseSelect)},function(e,t,r){"use strict";r.r(t);var n=r(43);r.d(t,"Instance",function(){return n.Instance})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return c});var n,o=r(44),i=r(29),u=r(3),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onError=n,o.onSuccess=r,o.query=t,o}return s(t,e),t.prototype.execute=function(){var e=this;try{if(null!=this.query.where)if(this.query.where.or||this.isArray(this.query.where))new i.Instance(this.query,function(t){e.resultCount=t.length,e.onTransactionCompleted_()},this.onError).execute();else this.initTransaction_(),this.goToWhereLogic();else this.initTransaction_(),this.executeWhereUndefinedLogic()}catch(e){this.onExceptionOccured(e,{TableName:this.query.from})}},t.prototype.initTransaction_=function(){this.createTransaction([this.query.from],this.onTransactionCompleted_,u.IDB_MODE.ReadOnly),this.objectStore=this.transaction.objectStore(this.query.from)},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return u});var n,o=r(45),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereLogic=function(e,t,r){var n,o,i=this;t=r?t[r]:t,this.checkFlag?(n=this.objectStore.index(e).openCursor(this.getKeyRange(t,r))).onsuccess=function(e){(o=e.target.result)?(i.whereCheckerInstance.check(o.value)&&++i.resultCount,o.continue()):i.onQueryFinished()}:this.objectStore.count?(n=this.objectStore.index(e).count(this.getKeyRange(t,r))).onsuccess=function(){i.resultCount=n.result,i.onQueryFinished()}:(n=this.objectStore.index(e).openCursor(this.getKeyRange(t,r))).onsuccess=function(e){(o=e.target.result)?(++i.resultCount,o.continue()):i.onQueryFinished()},n.onerror=function(e){i.errorOccured=!0,i.onErrorOccured(e)}},t}(o.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return u});var n,o=r(46),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,r){var n,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r;var i=this.objectStore.index(e).openCursor();i.onerror=this.onCursorError,this.checkFlag?i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&o.whereCheckerInstance.check(n.value)&&++o.resultCount,n.continue()):o.onQueryFinished()}:i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&++o.resultCount,n.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return u});var n,o=r(47),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){var r,n,o=this,i=this.objectStore.index(e),u=t.length,s=0,c=function(){++s===u&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<u;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&++o.resultCount,r.continue()):c()},n.onerror=this.onCursorError);else if(this.objectStore.count)for(a=0;a<u;a++)this.errorOccured||((n=i.count(IDBKeyRange.only(t[a]))).onsuccess=function(e){o.resultCount+=e.target.result,c()},n.onerror=this.onCursorError);else for(a=0;a<u;a++)this.errorOccured||((n=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(r=e.target.result)?(++o.resultCount,r.continue()):c()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return u});var n,o=r(48),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e=this;if(this.objectStore.count){var t=this.objectStore.count();t.onsuccess=function(){e.resultCount=t.result,e.onQueryFinished()},t.onerror=this.onCursorError}else{var r,n=this.objectStore.openCursor();n.onsuccess=function(e){(r=e.target.result)?(++this._resultCount,r.continue()):this.onQueryFinished()}.bind(this),n.onerror=this.onCursorError}},t}(o.BaseCount)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseCount",function(){return u});var n,o=r(38),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.resultCount=0,t.onTransactionCompleted_=function(){!1===t.errorOccured&&t.onSuccess(t.resultCount)},t}return i(t,e),t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t}(o.Base)},function(e,t,r){"use strict";r.r(t);var n=r(50);r.d(t,"Instance",function(){return n.Instance});var o=r(51);r.d(t,"ValuesChecker",function(){return o.ValuesChecker})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return u});var n,o=r(38),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(t,r,n){var o=e.call(this)||this;return o.valuesAffected_=[],o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(!0===o.query.return?o.valuesAffected_:o.rowAffected)},o.onError=n,o.query=t,o.onSuccess=r,o.tableName=o.query.into,o}return i(t,e),t.prototype.execute=function(){try{this.insertData_(this.query.values)}catch(e){this.onExceptionOccured(e,{TableName:this.tableName})}},t.prototype.onQueryFinished_=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.insertData_=function(e){var t,r,n=this,o=0;t=!0===this.query.return?function(i){if(i){var u=r.add(i);u.onerror=n.onErrorOccured.bind(n),u.onsuccess=function(r){n.valuesAffected_.push(i),t.call(n,e[o++])}}else n.onQueryFinished_()}:function(i){if(i){var u=r.add(i);u.onerror=n.onErrorOccured.bind(n),u.onsuccess=function(r){++n.rowAffected,t.call(n,e[o++])}}else n.onQueryFinished_()},this.createTransaction([this.query.into],this.onTransactionCompleted_),r=this.transaction.objectStore(this.query.into),t(e[o++])},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"ValuesChecker",function(){return u});var n=r(52),o=r(2),i=r(4),u=function(){function e(e,t){this.table=e,this.values=t}return e.prototype.checkAndModifyValues=function(){var e=this;return new Promise(function(t,r){e.getAutoIncrementValues_().then(function(o){e.valueCheckerObj=new n.ValueChecker(e.table,o),e.startChecking().then(t).catch(r)}).catch(r)})},e.prototype.getAutoIncrementValues_=function(){var e=this,t=this.table.columns.filter(function(e){return e.autoIncrement});return new Promise(function(r,n){var u={},s=0,c=function(){if(s<t.length){var a=t[s],l="JsStore_"+o.IdbHelper.activeDb.name+"_"+e.table.name+"_"+a.name+"_Value";i.get(l,function(e){u[a.name]=e,++s,c()},n)}else r(u)};c()})},e.prototype.startChecking=function(){var e=this;return new Promise(function(t,r){var n=!1;if(e.values.every(function(t){return!(n=e.valueCheckerObj.checkAndModifyValue(t))}),n){var u=e.valueCheckerObj.log.get();r(u)}else{var s=Object.keys(e.valueCheckerObj.autoIncrementValue),c=0,a=function(){if(c<s.length){var n=s[c++],u="JsStore_"+o.IdbHelper.activeDb.name+"_"+e.table.name+"_"+n+"_Value";i.set(u,e.valueCheckerObj.autoIncrementValue[n],a,r)}else t()};a()}})},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"ValueChecker",function(){return u});var n=r(21),o=r(3),i=r(18),u=function(){function e(e,t){this.errorOccured=!1,this.autoIncrementValue={},this.table=e,this.autoIncrementValue=t}return e.prototype.checkAndModifyValue=function(e){var t=this;return this.value=e,this.table.columns.every(function(e){return t.checkAndModifyColumnValue_(e),!t.errorOccured}),this.errorOccured},e.prototype.isNull_=function(e){return n.Util.isNull(e)},e.prototype.getType_=function(e){return n.Util.getType(e)},e.prototype.checkNotNullAndDataType_=function(e){e.notNull&&this.isNull_(this.value[e.name])?this.onValidationError_(o.ERROR_TYPE.NullValue,{ColumnName:e.name}):e.dataType&&!this.isNull_(this.value[e.name])&&this.getType_(this.value[e.name])!==e.dataType&&this.onValidationError_(o.ERROR_TYPE.BadDataType,{ColumnName:e.name})},e.prototype.checkAndModifyColumnValue_=function(e){e.autoIncrement?this.value[e.name]=++this.autoIncrementValue[e.name]:e.default&&this.isNull_(this.value[e.name])&&(this.value[e.name]=e.default),this.checkNotNullAndDataType_(e)},e.prototype.onValidationError_=function(e,t){this.errorOccured=!0,this.log=new i.LogHelper(e,t)},e}()},function(e,t,r){"use strict";r.r(t);var n=r(54);r.d(t,"Instance",function(){return n.Instance})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return c});var n,o=r(55),i=r(29),u=r(3),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.rowAffected)},o.query=t,o.onSuccess=r,o.onError=n,o}return s(t,e),t.prototype.execute=function(){try{this.initTransaction_(),null!=this.query.where?this.isArray(this.query.where)?this.processWhereArrayQry():this.processWhere_():this.executeWhereUndefinedLogic()}catch(e){this.errorOccured=!0,this.onExceptionOccured(e,{TableName:this.query.from})}},t.prototype.processWhereArrayQry=function(){var e=this,t=new i.Instance(this.query,function(t){var r=[],n=e.getPrimaryKey(e.query.from);t.forEach(function(e){r.push(e[n])}),t=null,e.query.where={},e.query.where[n]={},e.query.where[n][u.QUERY_OPTION.In]=r,e.processWhere_()},this.onError);t.isSubQuery=!0,t.execute()},t.prototype.processWhere_=function(){this.query.where.or&&this.processOrLogic(),this.goToWhereLogic()},t.prototype.initTransaction_=function(){this.createTransaction([this.query.from],this.onTransactionCompleted_),this.objectStore=this.transaction.objectStore(this.query.from)},t.prototype.onQueryFinished=function(){!0===this.isOr?this.orQuerySuccess_():!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.orQuerySuccess_=function(){var e=this.getObjectFirstKey(this._orInfo.OrQuery);if(null!=e){var t={};t[e]=this._orInfo.OrQuery[e],delete this._orInfo.OrQuery[e],this.query.where=t,this.goToWhereLogic()}else this.isOr=!0},t.prototype.processOrLogic=function(){this.isOr=!0,this._orInfo={OrQuery:this.query.where.or},delete this.query.where.or},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return u});var n,o=r(56),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereLogic=function(e,t,r){var n,o,i=this;t=r?t[r]:t,o=this.objectStore.index(e).openCursor(this.getKeyRange(t,r)),this.checkFlag?o.onsuccess=function(e){(n=e.target.result)?(i.whereCheckerInstance.check(n.value)&&(n.delete(),++i.rowAffected),n.continue()):i.onQueryFinished()}:o.onsuccess=function(e){(n=e.target.result)?(n.delete(),++i.rowAffected,n.continue()):i.onQueryFinished()},o.onerror=function(e){i.errorOccured=!0,i.onErrorOccured(e)}},t}(o.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return u});var n,o=r(57),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,r){var n,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r;var i=this.objectStore.index(e).openCursor();i.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.checkFlag?i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&o.whereCheckerInstance.check(n.value)&&(n.delete(),++o.rowAffected),n.continue()):o.onQueryFinished()}:i.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&(n.delete(),++o.rowAffected),n.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return u});var n,o=r(58),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){var r,n,o=this,i=t.length,u=0,s=function(){++u===i&&o.onQueryFinished()};if(this.checkFlag)for(var c=0;c<i;c++)this.errorOccured||((n=this.objectStore.index(e).openCursor(IDBKeyRange.only(t[c]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&(r.delete(),++o.rowAffected),r.continue()):s()},n.onerror=this.onCursorError);else for(c=0;c<i;c++)this.errorOccured||((n=this.objectStore.index(e).openCursor(IDBKeyRange.only(t[c]))).onsuccess=function(e){(r=e.target.result)?(r.delete(),++o.rowAffected,r.continue()):s()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return u});var n,o=r(59),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e,t=this,r=this.objectStore.openCursor();r.onsuccess=function(r){(e=r.target.result)?(e.delete(),++t.rowAffected,e.continue()):t.onQueryFinished()},r.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t}(o.BaseRemove)},function(e,t,r){"use strict";r.r(t),r.d(t,"BaseRemove",function(){return u});var n,o=r(38),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.onQueryFinished=function(){},t}(o.Base)},function(e,t,r){"use strict";r.r(t);var n=r(61);r.d(t,"Instance",function(){return n.Instance});var o=r(67);r.d(t,"SchemaChecker",function(){return o.SchemaChecker})},function(e,t,r){"use strict";r.r(t),r.d(t,"Instance",function(){return c});var n,o=r(62),i=r(29),u=r(3),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e){function t(t,r,n){var o=e.call(this)||this;return o.onSuccess=r,o.onError=n,o.query=t,o.tableName=o.query.in,o}return s(t,e),t.prototype.execute=function(){try{this.initTransaction(),null!=this.query.where?this.query.where.or||Array.isArray(this.query.where)?this.executeComplexLogic_():this.goToWhereLogic():this.executeWhereUndefinedLogic()}catch(e){this.errorOccured=!0,this.onExceptionOccured.call(this,e,{TableName:this.query.in})}},t.prototype.executeComplexLogic_=function(){var e=this,t=new i.Instance({from:this.query.in,where:this.query.where,ignoreCase:this.query.ignoreCase},function(t){var r,n,o=e.getPrimaryKey(e.query.in),i=[];t.forEach(function(e){i.push(e[o])}),t=null;var s=((r={})[o]=((n={})[u.QUERY_OPTION.In]=i,n),r);e.query[u.QUERY_OPTION.Where]=s,e.initTransaction(),e.goToWhereLogic()},this.onError);t.isSubQuery=!0,t.execute()},t}(o.Where)},function(e,t,r){"use strict";r.r(t),r.d(t,"Where",function(){return s});var n,o=r(63),i=r(64),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.executeWhereLogic=function(e,t,r){var n,i,u=this;t=r?t[r]:t,i=this.objectStore.index(e).openCursor(this.getKeyRange(t,r)),this.checkFlag?i.onsuccess=function(e){(n=e.target.result)?(u.whereCheckerInstance.check(n.value)&&(n.update(Object(o.updateValue)(u.query.set,n.value)),++u.rowAffected),n.continue()):u.onQueryFinished()}:i.onsuccess=function(e){(n=e.target.result)?(n.update(Object(o.updateValue)(u.query.set,n.value)),++u.rowAffected,n.continue()):u.onQueryFinished()},i.onerror=function(e){u.errorOccured=!0,u.onErrorOccured(e)}},t}(i.Like)},function(e,t,r){"use strict";r.r(t),r.d(t,"updateValue",function(){return c}),r.d(t,"BaseUpdate",function(){return a});var n,o=r(38),i=r(3),u=r(21),s=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),c=function(e,t){for(var r in e)if(u.Util.getType(e[r])!==i.DATA_TYPE.Object)t[r]=e[r];else for(var n in e[r]){switch(n){case"+":t[r]+=e[r][n];break;case"-":t[r]-=e[r][n];break;case"*":t[r]*=e[r][n];break;case"/":t[r]/=e[r][n];break;default:t[r]=e[r]}break}return t},a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.onTransactionCompleted_=function(){!1===t.errorOccured&&t.onSuccess(t.rowAffected)},t}return s(t,e),t.prototype.initTransaction=function(){this.createTransaction([this.query.in],this.onTransactionCompleted_),this.objectStore=this.transaction.objectStore(this.query.in)},t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"Like",function(){return s});var n,o=r(65),i=r(63),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.executeLikeLogic=function(e,t,r){var n,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=r;var u=this.objectStore.index(e).openCursor();u.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.checkFlag?u.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&o.whereCheckerInstance.check(n.value)&&(n.update(Object(i.updateValue)(o.query.set,n.value)),++o.rowAffected),n.continue()):o.onQueryFinished()}:u.onsuccess=function(e){(n=e.target.result)?(o.filterOnOccurence(n.key)&&(n.update(Object(i.updateValue)(o.query.set,n.value)),++o.rowAffected),n.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,r){"use strict";r.r(t),r.d(t,"In",function(){return s});var n,o=r(66),i=r(63),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.executeInLogic=function(e,t){var r,n,o=this,u=this.objectStore.index(e),s=t.length,c=0,a=function(){++c===s&&o.onQueryFinished()};if(this.checkFlag)for(var l=0;l<s;l++)this.errorOccured||((n=u.openCursor(IDBKeyRange.only(t[l]))).onsuccess=function(e){(r=e.target.result)?(o.whereCheckerInstance.check(r.value)&&(r.update(Object(i.updateValue)(o.query.set,r.value)),++o.rowAffected),r.continue()):a()},n.onerror=this.onCursorError);else for(l=0;l<s;l++)this.errorOccured||((n=u.openCursor(IDBKeyRange.only(t[l]))).onsuccess=function(e){(r=e.target.result)?(r.update(Object(i.updateValue)(o.query.set,r.value)),++o.rowAffected,r.continue()):a()},n.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,r){"use strict";r.r(t),r.d(t,"NotWhere",function(){return u});var n,o=r(63),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e,t=this,r=this.objectStore.openCursor();r.onsuccess=function(r){(e=r.target.result)?(e.update(Object(o.updateValue)(t.query.set,e.value)),++t.rowAffected,e.continue()):t.onQueryFinished()},r.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t}(o.BaseUpdate)},function(e,t,r){"use strict";r.r(t),r.d(t,"SchemaChecker",function(){return u});var n=r(18),o=r(3),i=r(21),u=function(){function e(e){this.table=e}return e.prototype.check=function(e,t){var r=this,i=null;return typeof e===o.DATA_TYPE.Object?this.table?this.table.columns.every(function(t){return null===i&&(t.name in e&&(i=r.checkByColumn_(t,e[t.name])),!0)}):i=new n.LogHelper(o.ERROR_TYPE.TableNotExist,{TableName:t}):i=new n.LogHelper(o.ERROR_TYPE.NotObject),null!=i?i.get():null},e.prototype.isNull_=function(e){return i.Util.isNull(e)},e.prototype.getType_=function(e){return i.Util.getType(e)},e.prototype.checkByColumn_=function(e,t){var r=null;!0===e.notNull&&this.isNull_(t)&&(r=new n.LogHelper(o.ERROR_TYPE.NullValue,{ColumnName:e.name}));var i=this.getType_(t),u=null!=t;if(e.dataType&&u&&i!==e.dataType&&"object"!==i&&(r=new n.LogHelper(o.ERROR_TYPE.BadDataType,{ColumnName:e.name})),u&&"object"===i)for(var s=["+","-","*","/"],c=0,a=Object.keys(t);c<a.length;c++){var l=a[c];s.indexOf(l)<0&&e.dataType&&i!==e.dataType&&(r=new n.LogHelper(o.ERROR_TYPE.BadDataType,{ColumnName:e.name}));break}return r},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"Clear",function(){return s});var n,o=r(38),i=r(4),u=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),s=function(e){function t(t,r,n){var o=e.call(this)||this;return o.query=t,o.onSuccess=r,o.onError=n,o}return u(t,e),t.prototype.execute=function(){var e=this;this.createTransaction([this.query],function(){!1===e.errorOccured&&e.onSuccess()});var t=this.transaction.objectStore(this.query).clear();t.onsuccess=function(t){e.getTable(e.query).columns.forEach(function(t){t.autoIncrement&&i.set("JsStore_"+e.activeDb.name+"_"+e.query+"_"+t.name+"_Value",0)})},t.onerror=function(t){e.errorOccured=!0,e.onErrorOccured(t)}},t}(o.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"BulkInsert",function(){return u});var n,o=r(38),i=(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),u=function(e){function t(t,r,n){var o=e.call(this)||this;return o.query=t,o.onSuccess=r,o.onError=n,o}return i(t,e),t.prototype.execute=function(){try{this.bulkinsertData(this.query.values),this.query.values=null}catch(e){this.onExceptionOccured(e,{TableName:this.query.into})}},t.prototype.bulkinsertData=function(e){var t=this;this.createTransaction([this.query.into],function(){t.onSuccess()}),this.objectStore=this.transaction.objectStore(this.query.into);for(var r=0,n=e.length;r<n;r++)this.objectStore.add(e[r])},t}(o.Base)},function(e,t,r){"use strict";r.r(t);var n=r(71);r.d(t,"Instance",function(){return n.Instance})},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Instance",function(){return Instance});var _base__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(38),_select_index__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(29),_count_index__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(42),_insert_index__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(49),_remove_index__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(53),_update_index__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(60),_enums__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(3),_query_helper__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(72),__extends=(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},function(e,t){function r(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),extendStatics,Instance=function(_super){function Instance(e,t,r){var n=_super.call(this)||this;return n.requestQueue=[],n.isQueryExecuting=!1,n.isTransactionStarted=!1,n.query=e,n.onError=r,n.onSuccess=t,n.results={},n}return __extends(Instance,_super),Instance.prototype.execute=function(){var _this=this,select=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Select,query:e})},insert=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Insert,query:e})},update=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Update,query:e})},remove=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Remove,query:e})},count=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Count,query:e})},setResult=function(e,t){_this.results[e]=t},abort=function(){_this.abortTransaction()},txLogic=null;eval("txLogic ="+this.query.logic),txLogic.call(this,this.query.data),this.checkQueries().then(function(){_this.startTransaction_()}).catch(function(e){_this.onError(e)})},Instance.prototype.startTransaction_=function(){try{this.isTransactionStarted=!0,this.initTransaction_(this.query.tables),this.processExecutionOfQry()}catch(e){this.errorOccured=!0,this.onExceptionOccured(e,{TableName:this.query.tables})}},Instance.prototype.initTransaction_=function(e){this.createTransaction(e,this.onTransactionCompleted_.bind(this))},Instance.prototype.onTransactionCompleted_=function(){this.onSuccess(this.results)},Instance.prototype.onRequestFinished_=function(e){var t=this.requestQueue.shift();t&&(this.errorOccured?this.abortTransaction():(this.isQueryExecuting=!1,t.onSuccess&&t.onSuccess(e),this.processExecutionOfQry()))},Instance.prototype.abortTransaction=function(){null!=this.transaction&&this.transaction.abort()},Instance.prototype.executeRequest=function(e){var t;switch(this.isQueryExecuting=!0,e.name){case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Select:t=new _select_index__WEBPACK_IMPORTED_MODULE_1__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Insert:t=new _insert_index__WEBPACK_IMPORTED_MODULE_3__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Update:t=new _update_index__WEBPACK_IMPORTED_MODULE_5__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Remove:t=new _remove_index__WEBPACK_IMPORTED_MODULE_4__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Count:t=new _count_index__WEBPACK_IMPORTED_MODULE_2__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this))}t.isTransaction=!0,t.execute()},Instance.prototype.pushRequest=function(e){return this.requestQueue.push(e),this.processExecutionOfQry(),new Promise(function(t,r){e.onSuccess=function(e){t(e)},e.onError=function(e){r(e)}})},Instance.prototype.processExecutionOfQry=function(){this.requestQueue.length>0&&!1===this.isQueryExecuting&&!0===this.isTransactionStarted&&this.executeRequest(this.requestQueue[0])},Instance.prototype.checkQueries=function(){var e=this,t=0;return new Promise(function(r,n){var o=function(){if(t<e.requestQueue.length){var i=e.requestQueue[t++];new _query_helper__WEBPACK_IMPORTED_MODULE_7__.QueryHelper(i.name,i.query).checkAndModify().then(function(){o()}).catch(function(e){n(e)})}else r()};o()})},Instance}(_base__WEBPACK_IMPORTED_MODULE_0__.Base)},function(e,t,r){"use strict";r.r(t),r.d(t,"QueryHelper",function(){return a});var n=r(3),o=r(2),i=r(18),u=r(21),s=r(60),c=r(49),a=function(){function e(e,t){this.api=e,this.query=t}return e.prototype.checkAndModify=function(){var e=this;return new Promise(function(t,r){var o=function(){null==e.error?t():r(e.error)};switch(e.api){case n.API.Select:case n.API.Remove:case n.API.Count:e.checkFetchQuery_(),o();break;case n.API.Insert:e.checkInsertQuery_().then(o).catch(function(t){e.error=t,o()});break;case n.API.Update:e.checkUpdateQuery_(),o();break;case n.API.BulkInsert:e.checkBulkInsert_();break;default:throw new Error("invalid api")}})},e.prototype.isInsertQryValid_=function(e){var t,r=this.getTable_(this.query.into);if(r)switch(this.getType_(this.query.values)){case n.DATA_TYPE.Array:break;case n.DATA_TYPE.Null:t=new i.LogHelper(n.ERROR_TYPE.NoValueSupplied);break;default:t=new i.LogHelper(n.ERROR_TYPE.NotArray)}else t=new i.LogHelper(n.ERROR_TYPE.TableNotExist,{TableName:this.query.into});return null!=e&&e(r),null==t?null:t.get()},e.prototype.checkBulkInsert_=function(){this.error=this.isInsertQryValid_(null)},e.prototype.checkInsertQuery_=function(){var e=this;return new Promise(function(t,r){var n,o=e.isInsertQryValid_(function(e){n=e});if(null==o)if(!0===e.query.skipDataCheck)t();else{var i=new c.ValuesChecker(n,e.query.values);i.checkAndModifyValues().then(function(){e.query.values=i.values,t()}).catch(r)}else r(o)})},e.prototype.checkUpdateQuery_=function(){this.error=new s.SchemaChecker(this.getTable_(this.query.in)).check(this.query.set,this.query.in),null==this.error&&this.addGreatAndLessToNotOp_()},e.prototype.checkFetchQuery_=function(){!0===this.isTableExist_(this.query.from)?null!=this.query.where&&this.addGreatAndLessToNotOp_():this.error=new i.LogHelper(n.ERROR_TYPE.TableNotExist,{TableName:this.query.from}).get()},e.prototype.isTableExist_=function(e){return this.activeDb_.tables.findIndex(function(t){return t.name===e})>=0},Object.defineProperty(e.prototype,"activeDb_",{get:function(){return o.IdbHelper.activeDb},enumerable:!0,configurable:!0}),e.prototype.getTable_=function(e){return o.IdbHelper.getTable(e)},e.prototype.addGreatAndLessToNotOp_=function(){var e=this.query.where,t=function(e,t){return t.findIndex(function(t){return null!=e[t][n.QUERY_OPTION.NotEqualTo]})>=0},r=function(e,t){var r;return t.forEach(function(t){null!=(r=e[t])[n.QUERY_OPTION.NotEqualTo]&&(e[t][n.QUERY_OPTION.GreaterThan]=r[n.QUERY_OPTION.NotEqualTo],void 0===e[n.QUERY_OPTION.Or]?(e[n.QUERY_OPTION.Or]={},e[n.QUERY_OPTION.Or][t]={}):void 0===e[n.QUERY_OPTION.Or][t]&&(e[n.QUERY_OPTION.Or][t]={}),e[n.QUERY_OPTION.Or][t][n.QUERY_OPTION.LessThan]=r[n.QUERY_OPTION.NotEqualTo],delete e[t][n.QUERY_OPTION.NotEqualTo])}),e};switch(this.getType_(e)){case n.DATA_TYPE.Object:var o=Object.keys(e);if(t(e,o))if(1===o.length)this.query.where=r(e,o);else{var i=[];o.forEach(function(t){var n;i.push(r(((n={})[t]=e[t],n),[t]))}),this.query.where=i}break;default:var u=[];e.forEach(function(e){var n=Object.keys(e);t(e,n)&&(e=r(e,n)),u.push(e)}),this.query.where=u}},e.prototype.getType_=function(e){return u.Util.getType(e)},e.prototype.isArray_=function(e){return u.Util.isArray(e)},e}()},function(e,t,r){"use strict";r.r(t),r.d(t,"initialize",function(){return s});var n=r(4),o=r(18),i=r(1),u=r(19),s=function(){void 0===self.alert&&"undefined"==typeof ServiceWorkerGlobalScope&&(u.Config.isRuningInWorker=!0,self.onmessage=function(e){var t;t="Request executing from WebWorker, request name: "+e.data.name,o.LogHelper.log(t),(new i.QueryExecutor).checkConnectionAndExecuteLogic(e.data)})};s(),n.init()}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,