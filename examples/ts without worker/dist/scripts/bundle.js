!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){
/*!
 * @license :jsstore - V2.3.0 - 02/08/2018
 * https://github.com/ujjwalguptaofficial/JsStore
 * Copyright (c) 2018 @Ujjwal Gupta; Licensed MIT
 */
e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=n(1);n.d(t,"Instance",function(){return r.Instance});var o=n(2);n.d(t,"ERROR_TYPE",function(){return o.ERROR_TYPE}),n.d(t,"WORKER_STATUS",function(){return o.WORKER_STATUS}),n.d(t,"DATA_TYPE",function(){return o.DATA_TYPE}),n.d(t,"COL_OPTION",function(){return o.COL_OPTION}),n.d(t,"API",function(){return o.API});var i=n(5);n.d(t,"Config",function(){return i.Config});var s=n(6);n.d(t,"enableLog",function(){return s.enableLog});var u=n(7);n.d(t,"Column",function(){return u.Column})},function(e,t,n){"use strict";n.r(t),n.d(t,"Instance",function(){return c});var r,o=n(2),i=n(3),s=n(5),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t){return e.call(this,t)||this}return u(t,e),t.prototype.openDb=function(e){return this.pushApi({name:o.API.OpenDb,query:e})},t.prototype.createDb=function(e){return this.pushApi({name:o.API.CreateDb,query:e})},t.prototype.dropDb=function(){return this.pushApi({name:o.API.DropDb,query:null})},t.prototype.select=function(e){return this.pushApi({name:o.API.Select,query:e})},t.prototype.count=function(e){return this.pushApi({name:o.API.Count,query:e})},t.prototype.insert=function(e){return this.pushApi({name:o.API.Insert,query:e})},t.prototype.update=function(e){return this.pushApi({name:o.API.Update,query:e})},t.prototype.remove=function(e){return this.pushApi({name:o.API.Remove,query:e})},t.prototype.clear=function(e){return this.pushApi({name:o.API.Clear,query:e})},t.prototype.bulkInsert=function(e){return this.pushApi({name:o.API.BulkInsert,query:e})},t.prototype.exportJson=function(e){var t=this;return new Promise(function(n,r){t.pushApi({name:o.API.ExportJson,query:e}).then(function(t){!function(t){var n=document.createElement("a");n.href=t,n.download=e.from+".json",n.click()}(t),n()}).catch(function(e){r(e)})})},t.prototype.setLogStatus=function(e){s.Config.isLogEnabled=e||s.Config.isLogEnabled,this.pushApi({name:o.API.ChangeLogStatus,query:s.Config.isLogEnabled})},t.prototype.getDbVersion=function(e){return this.pushApi({name:o.API.GetDbVersion,query:e})},t.prototype.isDbExist=function(e){return this.pushApi({name:o.API.IsDbExist,query:e})},t.prototype.getDbList=function(){return this.pushApi({name:o.API.GetDbList,query:null})},t.prototype.getDbSchema=function(e){return this.pushApi({name:o.API.GetDbSchema,query:e})},t.prototype.get=function(e){return this.pushApi({name:o.API.Get,query:e})},t.prototype.set=function(e,t){return this.pushApi({name:o.API.Set,query:{key:e,value:t}})},t.prototype.terminate=function(){return this.pushApi({name:o.API.Terminate,query:null})},t.prototype.transaction=function(e){return e.logic=e.logic.toString(),this.pushApi({name:o.API.Transaction,query:e})},t}(i.InstanceHelper)},function(e,t,n){"use strict";var r,o,i,s,u;n.r(t),n.d(t,"ERROR_TYPE",function(){return r}),n.d(t,"WORKER_STATUS",function(){return o}),n.d(t,"DATA_TYPE",function(){return i}),n.d(t,"COL_OPTION",function(){return s}),n.d(t,"API",function(){return u}),function(e){e.WorkerNotSupplied="worker_not_supplied",e.IndexedDbUndefined="indexeddb_undefined"}(r||(r={})),function(e){e.Registered="registerd",e.Failed="failed",e.NotStarted="not_started"}(o||(o={})),function(e){e.String="string",e.Object="object",e.Array="array",e.Number="number",e.Boolean="boolean",e.Null="null",e.DateTime="date_time"}(i||(i={})),function(e){e.PrimaryKey="primary_key",e.AutoIncrement="auto_increment",e.Unique="unique",e.NotNull="not_null",e.MultiEntry="multi_entry"}(s||(s={})),function(e){e.CreateDb="create_db",e.IsDbExist="is_db_exist",e.GetDbVersion="get_db_version",e.GetDbList="get_db_list",e.Get="get",e.Set="set",e.Select="select",e.Insert="insert",e.Update="update",e.Remove="remove",e.GetDbSchema="get_db_schema",e.OpenDb="open_db",e.Clear="clear",e.DropDb="drop_db",e.Count="count",e.BulkInsert="bulk_insert",e.ExportJson="export_json",e.ChangeLogStatus="change_log_status",e.Terminate="terminate",e.Transaction="transaction"}(u||(u={}))},function(e,t,n){"use strict";n.r(t),n.d(t,"InstanceHelper",function(){return s});var r=n(4),o=n(2),i=n(5),s=function(){function e(e){this.isDbOpened_=!1,this.requestQueue_=[],this.isCodeExecuting_=!1,this.whiteListApi_=[o.API.CreateDb,o.API.IsDbExist,o.API.GetDbVersion,o.API.GetDbList,o.API.OpenDb,o.API.GetDbSchema,o.API.Get,o.API.Set,o.API.ChangeLogStatus,o.API.Terminate],e?(this.worker_=e,this.worker_.onmessage=this.onMessageFromWorker_.bind(this)):(i.Config.isRuningInWorker=!1,this.queryExecutor_=new JsStoreWorker.QueryExecutor(this.processFinishedQuery_.bind(this)))}return e.prototype.onMessageFromWorker_=function(e){this.processFinishedQuery_(e.data)},e.prototype.processFinishedQuery_=function(e){var t=this.requestQueue_.shift();if(t){if(r.LogHelper.log("request finished : "+t.name),e.errorOccured)t.onError&&t.onError(e.errorDetails);else if(t.onSuccess){["open_db","create_db"].indexOf(t.name)>=0&&(this.isDbOpened_=!0),t.onSuccess(e.returnedValue)}this.isCodeExecuting_=!1,this.executeQry_()}},e.prototype.pushApi=function(e){var t=this;return new Promise(function(n,r){e.onSuccess=function(e){n(e)},e.onError=function(e){r(e)},t.prcoessExecutionOfQry_(e)})},e.prototype.prcoessExecutionOfQry_=function(e){this.requestQueue_.push(e),this.executeQry_(),r.LogHelper.log("request pushed: "+e.name)},e.prototype.executeQry_=function(){var e=this;if(!this.isCodeExecuting_&&this.requestQueue_.length>0){if(this.isDbOpened_)return void this.sendRequestToWorker_(this.requestQueue_[0]);var t=this.requestQueue_.findIndex(function(t){return e.whiteListApi_.indexOf(t.name)>=0});t>=0&&(this.requestQueue_.splice(0,0,this.requestQueue_.splice(t,1)[0]),this.sendRequestToWorker_(this.requestQueue_[0]))}},e.prototype.sendRequestToWorker_=function(e){if(this.isCodeExecuting_=!0,r.LogHelper.log("request executing : "+e.name),e.name===o.API.Terminate)!0===i.Config.isRuningInWorker&&this.worker_.terminate(),this.isDbOpened_=!1,this.processFinishedQuery_({returnedValue:null});else{var t={name:e.name,query:e.query};!0===i.Config.isRuningInWorker?this.worker_.postMessage(t):this.queryExecutor_.checkConnectionAndExecuteLogic(t)}},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"LogHelper",function(){return i});var r=n(2),o=n(5),i=function(){function e(e,t){void 0===t&&(t=null),this.type=e,this._info=t,this.message=this.getMsg()}return e.prototype.throw=function(){throw this.get()},e.log=function(e){o.Config.isLogEnabled&&console.log(e)},e.prototype.logError=function(){console.error(this.get())},e.prototype.logWarning=function(){console.warn(this.get())},e.prototype.get=function(){return{message:this.message,type:this.type}},e.prototype.getMsg=function(){var e;switch(this.type){case r.ERROR_TYPE.WorkerNotSupplied:e="Worker object is not passed in instance constructor";break;case r.ERROR_TYPE.IndexedDbUndefined:e="Browser does not support indexeddb";break;default:e=this.message}return e},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Config",function(){return r});var r=function(){function e(){}return e.isLogEnabled=!1,e.isRuningInWorker=!0,e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"enableLog",function(){return o});var r=n(5),o=function(){r.Config.isLogEnabled=!0}},function(e,t,n){"use strict";n.r(t);var r=n(8);n.d(t,"Column",function(){return r.Column})},function(e,t,n){"use strict";n.r(t),n.d(t,"Column",function(){return o});var r=n(2),o=function(){function e(e){this.name=e}return e.prototype.options=function(e){var t=this;return e.forEach(function(e){switch(e){case r.COL_OPTION.AutoIncrement:t.autoIncrement=!0;break;case r.COL_OPTION.MultiEntry:t.multiEntry=!0;break;case r.COL_OPTION.NotNull:t.notNull=!0;break;case r.COL_OPTION.PrimaryKey:t.primaryKey=!0;break;case r.COL_OPTION.Unique:t.unique=!0}}),this},e.prototype.setDataType=function(e){return this.dataType=e,this},e.prototype.setDefault=function(e){return this.default=e,this},e.prototype.disableSearch=function(){return this.enableSearch=!1,this},e}()}])},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],s=n.document,u=Object.getPrototypeOf,c=i.slice,a=i.concat,l=i.push,f=i.indexOf,p={},h=p.toString,d=p.hasOwnProperty,y=d.toString,g=y.call(Object),v={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},_=function(e){return null!=e&&e===e.window},m={type:!0,src:!0,noModule:!0};function O(e,t,n){var r,o=(t=t||s).createElement("script");if(o.text=e,n)for(r in m)n[r]&&(o[r]=n[r]);t.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[h.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)},x=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!b(e)&&!_(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.3.1",constructor:E,length:0,toArray:function(){return c.call(this)},get:function(e){return null==e?c.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:i.sort,splice:i.splice},E.extend=E.fn.extend=function(){var e,t,n,r,o,i,s=arguments[0]||{},u=1,c=arguments.length,a=!1;for("boolean"==typeof s&&(a=s,s=arguments[u]||{},u++),"object"==typeof s||b(s)||(s={}),u===c&&(s=this,u--);u<c;u++)if(null!=(e=arguments[u]))for(t in e)n=s[t],s!==(r=e[t])&&(a&&r&&(E.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,i=n&&Array.isArray(n)?n:[]):i=n&&E.isPlainObject(n)?n:{},s[t]=E.extend(a,i,r)):void 0!==r&&(s[t]=r));return s},E.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=u(e))||"function"==typeof(n=d.call(t,"constructor")&&t.constructor)&&y.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){O(e)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(x,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?E.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,s=!n;o<i;o++)!t(e[o],o)!==s&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,s=[];if(C(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&s.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&s.push(o);return a.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=i[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var w=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,o,i,s,u,c,a,l,f,p,h,d,y,g,v,b,_,m="sizzle"+1*new Date,O=e.document,T=0,E=0,x=se(),C=se(),w=se(),S=function(e,t){return e===t&&(f=!0),0},I={}.hasOwnProperty,k=[],D=k.pop,A=k.push,N=k.push,P=k.slice,R=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",Q="\\["+L+"*("+j+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+L+"*\\]",B=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+Q+")*)|.*)\\)|)",U=new RegExp(L+"+","g"),H=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),W=new RegExp("^"+L+"*,"+L+"*"),F=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),Y=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),M=new RegExp(B),V=new RegExp("^"+j+"$"),K={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+Q),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+q+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,X=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){p()},oe=be(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{N.apply(k=P.call(O.childNodes),O.childNodes),k[O.childNodes.length].nodeType}catch(e){N={apply:k.length?function(e,t){A.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,o){var i,u,a,l,f,d,v,b=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!o&&((t?t.ownerDocument||t:O)!==h&&p(t),t=t||h,y)){if(11!==T&&(f=z.exec(e)))if(i=f[1]){if(9===T){if(!(a=t.getElementById(i)))return r;if(a.id===i)return r.push(a),r}else if(b&&(a=b.getElementById(i))&&_(t,a)&&a.id===i)return r.push(a),r}else{if(f[2])return N.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!w[e+" "]&&(!g||!g.test(e))){if(1!==T)b=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=m),u=(d=s(e)).length;u--;)d[u]="#"+l+" "+ve(d[u]);v=d.join(","),b=X.test(e)&&ye(t.parentNode)||t}if(v)try{return N.apply(r,b.querySelectorAll(v)),r}catch(e){}finally{l===m&&t.removeAttribute("id")}}}return c(e.replace(H,"$1"),t,r,o)}function se(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ue(e){return e[m]=!0,e}function ce(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ae(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function de(e){return ue(function(t){return t=+t,ue(function(n,r){for(var o,i=e([],n.length,t),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))})})}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},i=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=ie.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:O;return s!==h&&9===s.nodeType&&s.documentElement?(d=(h=s).documentElement,y=!i(h),O!==h&&(o=h.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ce(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=$.test(h.getElementsByClassName),n.getById=ce(function(e){return d.appendChild(e).id=m,!h.getElementsByName||!h.getElementsByName(m).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&y){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&y){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&y)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=$.test(h.querySelectorAll))&&(ce(function(e){d.appendChild(e).innerHTML="<a id='"+m+"'></a><select id='"+m+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+L+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+L+"*(?:value|"+q+")"),e.querySelectorAll("[id~="+m+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+m+"+*").length||g.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+L+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),d.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=$.test(b=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ce(function(e){n.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),v.push("!=",B)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=$.test(d.compareDocumentPosition),_=t||$.test(d.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},S=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===h||e.ownerDocument===O&&_(O,e)?-1:t===h||t.ownerDocument===O&&_(O,t)?1:l?R(l,e)-R(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,s=[e],u=[t];if(!o||!i)return e===h?-1:t===h?1:o?-1:i?1:l?R(l,e)-R(l,t):0;if(o===i)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?le(s[r],u[r]):s[r]===O?-1:u[r]===O?1:0},h):h},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&p(e),t=t.replace(Y,"='$1']"),n.matchesSelector&&y&&!w[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=b.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ie(t,h,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!==h&&p(e),_(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==h&&p(e);var o=r.attrHandle[t.toLowerCase()],i=o&&I.call(r.attrHandle,t.toLowerCase())?o(e,t,!y):void 0;return void 0!==i?i:n.attributes||!y?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.escape=function(e){return(e+"").replace(te,ne)},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(S),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return l=null,e},o=ie.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:ue,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&M.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+L+")"+e+"("+L+"|$)"))&&x(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=ie.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(U," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),u="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,c){var a,l,f,p,h,d,y=i!==s?"nextSibling":"previousSibling",g=t.parentNode,v=u&&t.nodeName.toLowerCase(),b=!c&&!u,_=!1;if(g){if(i){for(;y;){for(p=t;p=p[y];)if(u?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;d=y="only"===e&&!d&&"nextSibling"}return!0}if(d=[s?g.firstChild:g.lastChild],s&&b){for(_=(h=(a=(l=(f=(p=g)[m]||(p[m]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&a[1])&&a[2],p=h&&g.childNodes[h];p=++h&&p&&p[y]||(_=h=0)||d.pop();)if(1===p.nodeType&&++_&&p===t){l[e]=[T,h,_];break}}else if(b&&(_=h=(a=(l=(f=(p=t)[m]||(p[m]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&a[1]),!1===_)for(;(p=++h&&p&&p[y]||(_=h=0)||d.pop())&&((u?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++_||(b&&((l=(f=p[m]||(p[m]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,_]),p!==t)););return(_-=o)===r||_%r==0&&_/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return o[m]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,n){for(var r,i=o(e,t),s=i.length;s--;)e[r=R(e,i[s])]=!(n[r]=i[s])}):function(e){return o(e,0,n)}):o}},pseudos:{not:ue(function(e){var t=[],n=[],r=u(e.replace(H,"$1"));return r[m]?ue(function(e,t,n,o){for(var i,s=r(e,null,o,[]),u=e.length;u--;)(i=s[u])&&(e[u]=!(t[u]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:ue(function(e){return function(t){return ie(e,t).length>0}}),contains:ue(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:ue(function(e){return V.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=y?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===d},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:de(function(){return[0]}),last:de(function(e,t){return[t-1]}),eq:de(function(e,t,n){return[n<0?n+t:n]}),even:de(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:de(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:de(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:de(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ge(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,o=t.next,i=o||r,s=n&&"parentNode"===i,u=E++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,c){var a,l,f,p=[T,u];if(c){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(l=(f=t[m]||(t[m]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((a=l[i])&&a[0]===T&&a[1]===u)return p[2]=a[2];if(l[i]=p,p[2]=e(t,n,c))return!0}return!1}}function _e(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function me(e,t,n,r,o){for(var i,s=[],u=0,c=e.length,a=null!=t;u<c;u++)(i=e[u])&&(n&&!n(i,r,o)||(s.push(i),a&&t.push(u)));return s}function Oe(e,t,n,r,o,i){return r&&!r[m]&&(r=Oe(r)),o&&!o[m]&&(o=Oe(o,i)),ue(function(i,s,u,c){var a,l,f,p=[],h=[],d=s.length,y=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ie(e,t[r],n);return n}(t||"*",u.nodeType?[u]:u,[]),g=!e||!i&&t?y:me(y,p,e,u,c),v=n?o||(i?e:d||r)?[]:s:g;if(n&&n(g,v,u,c),r)for(a=me(v,h),r(a,[],u,c),l=a.length;l--;)(f=a[l])&&(v[h[l]]=!(g[h[l]]=f));if(i){if(o||e){if(o){for(a=[],l=v.length;l--;)(f=v[l])&&a.push(g[l]=f);o(null,v=[],a,c)}for(l=v.length;l--;)(f=v[l])&&(a=o?R(i,f):p[l])>-1&&(i[a]=!(s[a]=f))}}else v=me(v===s?v.splice(d,v.length):v),o?o(null,s,v,c):N.apply(s,v)})}function Te(e){for(var t,n,o,i=e.length,s=r.relative[e[0].type],u=s||r.relative[" "],c=s?1:0,l=be(function(e){return e===t},u,!0),f=be(function(e){return R(t,e)>-1},u,!0),p=[function(e,n,r){var o=!s&&(r||n!==a)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,o}];c<i;c++)if(n=r.relative[e[c].type])p=[be(_e(p),n)];else{if((n=r.filter[e[c].type].apply(null,e[c].matches))[m]){for(o=++c;o<i&&!r.relative[e[o].type];o++);return Oe(c>1&&_e(p),c>1&&ve(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(H,"$1"),n,c<o&&Te(e.slice(c,o)),o<i&&Te(e=e.slice(o)),o<i&&ve(e))}p.push(n)}return _e(p)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,s=ie.tokenize=function(e,t){var n,o,i,s,u,c,a,l=C[e+" "];if(l)return t?0:l.slice(0);for(u=e,c=[],a=r.preFilter;u;){for(s in n&&!(o=W.exec(u))||(o&&(u=u.slice(o[0].length)||u),c.push(i=[])),n=!1,(o=F.exec(u))&&(n=o.shift(),i.push({value:n,type:o[0].replace(H," ")}),u=u.slice(n.length)),r.filter)!(o=K[s].exec(u))||a[s]&&!(o=a[s](o))||(n=o.shift(),i.push({value:n,type:s,matches:o}),u=u.slice(n.length));if(!n)break}return t?u.length:u?ie.error(e):C(e,c).slice(0)},u=ie.compile=function(e,t){var n,o=[],i=[],u=w[e+" "];if(!u){for(t||(t=s(e)),n=t.length;n--;)(u=Te(t[n]))[m]?o.push(u):i.push(u);(u=w(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,s,u,c,l){var f,d,g,v=0,b="0",_=i&&[],m=[],O=a,E=i||o&&r.find.TAG("*",l),x=T+=null==O?1:Math.random()||.1,C=E.length;for(l&&(a=s===h||s||l);b!==C&&null!=(f=E[b]);b++){if(o&&f){for(d=0,s||f.ownerDocument===h||(p(f),u=!y);g=e[d++];)if(g(f,s||h,u)){c.push(f);break}l&&(T=x)}n&&((f=!g&&f)&&v--,i&&_.push(f))}if(v+=b,n&&b!==v){for(d=0;g=t[d++];)g(_,m,s,u);if(i){if(v>0)for(;b--;)_[b]||m[b]||(m[b]=D.call(c));m=me(m)}N.apply(c,m),l&&!i&&m.length>0&&v+t.length>1&&ie.uniqueSort(c)}return l&&(T=x,a=O),_};return n?ue(i):i}(i,o))).selector=e}return u},c=ie.select=function(e,t,n,o){var i,c,a,l,f,p="function"==typeof e&&e,h=!o&&s(e=p.selector||e);if(n=n||[],1===h.length){if((c=h[0]=h[0].slice(0)).length>2&&"ID"===(a=c[0]).type&&9===t.nodeType&&y&&r.relative[c[1].type]){if(!(t=(r.find.ID(a.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(i=K.needsContext.test(e)?0:c.length;i--&&(a=c[i],!r.relative[l=a.type]);)if((f=r.find[l])&&(o=f(a.matches[0].replace(Z,ee),X.test(c[0].type)&&ye(t.parentNode)||t))){if(c.splice(i,1),!(e=o.length&&ve(c)))return N.apply(n,o),n;break}}return(p||u(e,h))(o,t,!y,n,!t||X.test(e)&&ye(t.parentNode)||t),n},n.sortStable=m.split("").sort(S).join("")===m,n.detectDuplicates=!!f,p(),n.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ae("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ae("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||ae(q,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ie}(n);E.find=w,E.expr=w.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=w.uniqueSort,E.text=w.getText,E.isXMLDoc=w.isXML,E.contains=w.contains,E.escapeSelector=w.escape;var S=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&E(e).is(n))break;r.push(e)}return r},I=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=E.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){return b(t)?E.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?E.grep(e,function(e){return e===t!==n}):"string"!=typeof t?E.grep(e,function(e){return f.call(t,e)>-1!==n}):E.filter(t,e,n)}E.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,o[t],n);return r>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var P,R=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||P,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:R.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),A.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=s.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,P=E(s);var q=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function j(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],s="string"!=typeof e&&E(e);if(!k.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?E.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?f.call(E(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return I((e.parentNode||{}).firstChild,e)},children:function(e){return I(e.firstChild)},contents:function(e){return D(e,"iframe")?e.contentDocument:(D(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},function(e,t){E.fn[e]=function(n,r){var o=E.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=E.filter(r,o)),this.length>1&&(L[e]||E.uniqueSort(o),q.test(e)&&o.reverse()),this.pushStack(o)}});var Q=/[^\x20\t\r\n\f]+/g;function B(e){return e}function U(e){throw e}function H(e,t,n,r){var o;try{e&&b(o=e.promise)?o.call(e).done(t).fail(n):e&&b(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(Q)||[],function(e,n){t[n]=!0}),t}(e):E.extend({},e);var t,n,r,o,i=[],s=[],u=-1,c=function(){for(o=o||e.once,r=t=!0;s.length;u=-1)for(n=s.shift();++u<i.length;)!1===i[u].apply(n[0],n[1])&&e.stopOnFalse&&(u=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},a={add:function(){return i&&(n&&!t&&(u=i.length-1,s.push(n)),function t(n){E.each(n,function(n,r){b(r)?e.unique&&a.has(r)||i.push(r):r&&r.length&&"string"!==T(r)&&t(r)})}(arguments),n&&!t&&c()),this},remove:function(){return E.each(arguments,function(e,t){for(var n;(n=E.inArray(t,i,n))>-1;)i.splice(n,1),n<=u&&u--}),this},has:function(e){return e?E.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=s=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return a.fireWith(this,arguments),this},fired:function(){return!!r}};return a},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return E.Deferred(function(n){E.each(t,function(t,r){var o=b(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var i=0;function s(e,t,r,o){return function(){var u=this,c=arguments,a=function(){var n,a;if(!(e<i)){if((n=r.apply(u,c))===t.promise())throw new TypeError("Thenable self-resolution");a=n&&("object"==typeof n||"function"==typeof n)&&n.then,b(a)?o?a.call(n,s(i,t,B,o),s(i,t,U,o)):(i++,a.call(n,s(i,t,B,o),s(i,t,U,o),s(i,t,B,t.notifyWith))):(r!==B&&(u=void 0,c=[n]),(o||t.resolveWith)(u,c))}},l=o?a:function(){try{a()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,l.stackTrace),e+1>=i&&(r!==U&&(u=void 0,c=[n]),t.rejectWith(u,c))}};e?l():(E.Deferred.getStackHook&&(l.stackTrace=E.Deferred.getStackHook()),n.setTimeout(l))}}return E.Deferred(function(n){t[0][3].add(s(0,n,b(o)?o:B,n.notifyWith)),t[1][3].add(s(0,n,b(e)?e:B)),t[2][3].add(s(0,n,b(r)?r:U))}).promise()},promise:function(e){return null!=e?E.extend(e,o):o}},i={};return E.each(t,function(e,n){var s=n[2],u=n[5];o[n[1]]=s.add,u&&s.add(function(){r=u},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=s.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=c.call(arguments),i=E.Deferred(),s=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?c.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(H(e,i.done(s(n)).resolve,i.reject,!t),"pending"===i.state()||b(o[n]&&o[n].then)))return i.then();for(;n--;)H(o[n],s(n),i.reject);return i.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&W.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout(function(){throw e})};var F=E.Deferred();function Y(){s.removeEventListener("DOMContentLoaded",Y),n.removeEventListener("load",Y),E.ready()}E.fn.ready=function(e){return F.then(e).catch(function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||F.resolveWith(s,[E]))}}),E.ready.then=F.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(E.ready):(s.addEventListener("DOMContentLoaded",Y),n.addEventListener("load",Y));var M=function(e,t,n,r,o,i,s){var u=0,c=e.length,a=null==n;if("object"===T(n))for(u in o=!0,n)M(e,t,u,n[u],!0,i,s);else if(void 0!==r&&(o=!0,b(r)||(s=!0),a&&(s?(t.call(e,r),t=null):(a=t,t=function(e,t,n){return a.call(E(e),n)})),t))for(;u<c;u++)t(e[u],n,s?r:r.call(e[u],u,t(e[u],n)));return o?e:a?t.call(e):c?t(e[0],n):i},V=/^-ms-/,K=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function J(e){return e.replace(V,"ms-").replace(K,G)}var $=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function z(){this.expando=E.expando+z.uid++}z.uid=1,z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},$(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[J(t)]=n;else for(r in t)o[J(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][J(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(J):(t=J(t))in r?[t]:t.match(Q)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var X=new z,Z=new z,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||X.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,r,o,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!X.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=J(r.slice(5)),ne(i,r,o[r]));X.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Z.set(this,e)}):M(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=X.get(e,t),n&&(!r||Array.isArray(n)?r=X.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),r=n.length,o=n.shift(),i=E._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){E.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:E.Callbacks("once memory").add(function(){X.remove(e,[t+"queue",n])})})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each(function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=E.Deferred(),i=this,s=this.length,u=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=X.get(i[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(u));return u(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&E.contains(e.ownerDocument,e)&&"none"===E.css(e,"display")},ue=function(e,t,n,r){var o,i,s={};for(i in t)s[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=s[i];return o};function ce(e,t,n,r){var o,i,s=20,u=r?function(){return r.cur()}:function(){return E.css(e,t,"")},c=u(),a=n&&n[3]||(E.cssNumber[t]?"":"px"),l=(E.cssNumber[t]||"px"!==a&&+c)&&oe.exec(E.css(e,t));if(l&&l[3]!==a){for(c/=2,a=a||l[3],l=+c||1;s--;)E.style(e,t,l+a),(1-i)*(1-(i=u()/c||.5))<=0&&(s=0),l/=i;l*=2,E.style(e,t,l+a),n=n||[]}return n&&(l=+l||+c||0,o=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=a,r.start=l,r.end=o)),o}var ae={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,o=ae[r];return o||(t=n.body.appendChild(n.createElement(r)),o=E.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ae[r]=o,o)}function fe(e,t){for(var n,r,o=[],i=0,s=e.length;i<s;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=X.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&se(r)&&(o[i]=le(r))):"none"!==n&&(o[i]="none",X.set(r,"display",n)));for(i=0;i<s;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}E.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?E(this).show():E(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,de=/^$|^module$|\/(?:java|ecma)script/i,ye={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}ye.optgroup=ye.option,ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td;var be,_e,me=/<|&#?\w+;/;function Oe(e,t,n,r,o){for(var i,s,u,c,a,l,f=t.createDocumentFragment(),p=[],h=0,d=e.length;h<d;h++)if((i=e[h])||0===i)if("object"===T(i))E.merge(p,i.nodeType?[i]:i);else if(me.test(i)){for(s=s||f.appendChild(t.createElement("div")),u=(he.exec(i)||["",""])[1].toLowerCase(),c=ye[u]||ye._default,s.innerHTML=c[1]+E.htmlPrefilter(i)+c[2],l=c[0];l--;)s=s.lastChild;E.merge(p,s.childNodes),(s=f.firstChild).textContent=""}else p.push(t.createTextNode(i));for(f.textContent="",h=0;i=p[h++];)if(r&&E.inArray(i,r)>-1)o&&o.push(i);else if(a=E.contains(i.ownerDocument,i),s=ge(f.appendChild(i),"script"),a&&ve(s),n)for(l=0;i=s[l++];)de.test(i.type||"")&&n.push(i);return f}be=s.createDocumentFragment().appendChild(s.createElement("div")),(_e=s.createElement("input")).setAttribute("type","radio"),_e.setAttribute("checked","checked"),_e.setAttribute("name","t"),be.appendChild(_e),v.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var Te=s.documentElement,Ee=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function we(){return!0}function Se(){return!1}function Ie(){try{return s.activeElement}catch(e){}}function ke(e,t,n,r,o,i){var s,u;if("object"==typeof t){for(u in"string"!=typeof n&&(r=r||n,n=void 0),t)ke(e,u,n,r,t[u],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Se;else if(!o)return e;return 1===i&&(s=o,(o=function(e){return E().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),e.each(function(){E.event.add(this,t,o,r,n)})}E.event={global:{},add:function(e,t,n,r,o){var i,s,u,c,a,l,f,p,h,d,y,g=X.get(e);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&E.find.matchesSelector(Te,o),n.guid||(n.guid=E.guid++),(c=g.events)||(c=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),a=(t=(t||"").match(Q)||[""]).length;a--;)h=y=(u=Ce.exec(t[a])||[])[1],d=(u[2]||"").split(".").sort(),h&&(f=E.event.special[h]||{},h=(o?f.delegateType:f.bindType)||h,f=E.event.special[h]||{},l=E.extend({type:h,origType:y,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&E.expr.match.needsContext.test(o),namespace:d.join(".")},i),(p=c[h])||((p=c[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,d,s)||e.addEventListener&&e.addEventListener(h,s)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,l):p.push(l),E.event.global[h]=!0)},remove:function(e,t,n,r,o){var i,s,u,c,a,l,f,p,h,d,y,g=X.hasData(e)&&X.get(e);if(g&&(c=g.events)){for(a=(t=(t||"").match(Q)||[""]).length;a--;)if(h=y=(u=Ce.exec(t[a])||[])[1],d=(u[2]||"").split(".").sort(),h){for(f=E.event.special[h]||{},p=c[h=(r?f.delegateType:f.bindType)||h]||[],u=u[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=p.length;i--;)l=p[i],!o&&y!==l.origType||n&&n.guid!==l.guid||u&&!u.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(i,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(e,l));s&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,d,g.handle)||E.removeEvent(e,h,g.handle),delete c[h])}else for(h in c)E.event.remove(e,h+t[a],n,r,!0);E.isEmptyObject(c)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,s,u=E.event.fix(e),c=new Array(arguments.length),a=(X.get(this,"events")||{})[u.type]||[],l=E.event.special[u.type]||{};for(c[0]=u,t=1;t<arguments.length;t++)c[t]=arguments[t];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(s=E.event.handlers.call(this,u,a),t=0;(o=s[t++])&&!u.isPropagationStopped();)for(u.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!u.rnamespace.test(i.namespace)||(u.handleObj=i,u.data=i.data,void 0!==(r=((E.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,c))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,o,i,s,u=[],c=t.delegateCount,a=e.target;if(c&&a.nodeType&&!("click"===e.type&&e.button>=1))for(;a!==this;a=a.parentNode||this)if(1===a.nodeType&&("click"!==e.type||!0!==a.disabled)){for(i=[],s={},n=0;n<c;n++)void 0===s[o=(r=t[n]).selector+" "]&&(s[o]=r.needsContext?E(o,this).index(a)>-1:E.find(o,this,null,[a]).length),s[o]&&i.push(r);i.length&&u.push({elem:a,handlers:i})}return a=this,c<t.length&&u.push({elem:a,handlers:t.slice(c)}),u},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ie()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ie()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&D(this,"input"))return this.click(),!1},_default:function(e){return D(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||E.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),E.fn.extend({on:function(e,t,n,r){return ke(this,e,t,n,r)},one:function(e,t,n,r){return ke(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){E.event.remove(this,e,n,t)})}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ae=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Re(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function qe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Le(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function je(e,t){var n,r,o,i,s,u,c,a;if(1===t.nodeType){if(X.hasData(e)&&(i=X.access(e),s=X.set(t,i),a=i.events))for(o in delete s.handle,s.events={},a)for(n=0,r=a[o].length;n<r;n++)E.event.add(t,o,a[o][n]);Z.hasData(e)&&(u=Z.access(e),c=E.extend({},u),Z.set(t,c))}}function Qe(e,t,n,r){t=a.apply([],t);var o,i,s,u,c,l,f=0,p=e.length,h=p-1,d=t[0],y=b(d);if(y||p>1&&"string"==typeof d&&!v.checkClone&&Ne.test(d))return e.each(function(o){var i=e.eq(o);y&&(t[0]=d.call(this,o,i.html())),Qe(i,t,n,r)});if(p&&(i=(o=Oe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(u=(s=E.map(ge(o,"script"),qe)).length;f<p;f++)c=o,f!==h&&(c=E.clone(c,!0,!0),u&&E.merge(s,ge(c,"script"))),n.call(e[f],c,f);if(u)for(l=s[s.length-1].ownerDocument,E.map(s,Le),f=0;f<u;f++)c=s[f],de.test(c.type||"")&&!X.access(c,"globalEval")&&E.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(c.src):O(c.textContent.replace(Pe,""),l,c))}return e}function Be(e,t,n){for(var r,o=t?E.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&E.contains(r.ownerDocument,r)&&ve(ge(r,"script")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,n){var r,o,i,s,u,c,a,l=e.cloneNode(!0),f=E.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(s=ge(l),r=0,o=(i=ge(e)).length;r<o;r++)u=i[r],c=s[r],void 0,"input"===(a=c.nodeName.toLowerCase())&&pe.test(u.type)?c.checked=u.checked:"input"!==a&&"textarea"!==a||(c.defaultValue=u.defaultValue);if(t)if(n)for(i=i||ge(e),s=s||ge(l),r=0,o=i.length;r<o;r++)je(i[r],s[r]);else je(e,l);return(s=ge(l,"script")).length>0&&ve(s,!f&&ge(e,"script")),l},cleanData:function(e){for(var t,n,r,o=E.event.special,i=0;void 0!==(n=e[i]);i++)if($(n)){if(t=n[X.expando]){if(t.events)for(r in t.events)o[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[X.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return M(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Re(this,e).appendChild(e)})},prepend:function(){return Qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Re(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return M(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!ye[(he.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Qe(this,arguments,function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){E.fn[e]=function(e){for(var n,r=[],o=E(e),i=o.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),E(o[s])[t](n),l.apply(r,n.get());return this.pushStack(r)}});var Ue=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},We=new RegExp(ie.join("|"),"i");function Fe(e,t,n){var r,o,i,s,u=e.style;return(n=n||He(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||E.contains(e.ownerDocument,e)||(s=E.style(e,t)),!v.pixelBoxStyles()&&Ue.test(s)&&We.test(t)&&(r=u.width,o=u.minWidth,i=u.maxWidth,u.minWidth=u.maxWidth=u.width=s,s=n.width,u.width=r,u.minWidth=o,u.maxWidth=i)),void 0!==s?s+"":s}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Te.appendChild(a).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,c=12===t(e.marginLeft),l.style.right="60%",u=36===t(e.right),o=36===t(e.width),l.style.position="absolute",i=36===l.offsetWidth||"absolute",Te.removeChild(a),l=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,u,c,a=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),u},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),c},scrollboxSize:function(){return e(),i}}))}();var Me=/^(none|table(?!-c[ea]).+)/,Ve=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Je=["Webkit","Moz","ms"],$e=s.createElement("div").style;function ze(e){var t=E.cssProps[e];return t||(t=E.cssProps[e]=function(e){if(e in $e)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in $e)return e}(e)||e),t}function Xe(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,o,i){var s="width"===t?1:0,u=0,c=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=E.css(e,n+ie[s],!0,o)),r?("content"===n&&(c-=E.css(e,"padding"+ie[s],!0,o)),"margin"!==n&&(c-=E.css(e,"border"+ie[s]+"Width",!0,o))):(c+=E.css(e,"padding"+ie[s],!0,o),"padding"!==n?c+=E.css(e,"border"+ie[s]+"Width",!0,o):u+=E.css(e,"border"+ie[s]+"Width",!0,o));return!r&&i>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-c-u-.5))),c}function et(e,t,n){var r=He(e),o=Fe(e,t,r),i="border-box"===E.css(e,"boxSizing",!1,r),s=i;if(Ue.test(o)){if(!n)return o;o="auto"}return s=s&&(v.boxSizingReliable()||o===e.style[t]),("auto"===o||!parseFloat(o)&&"inline"===E.css(e,"display",!1,r))&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(o=parseFloat(o)||0)+Ze(e,t,n||(i?"border":"content"),s,r,o)+"px"}function tt(e,t,n,r,o){return new tt.prototype.init(e,t,n,r,o)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,s,u=J(t),c=Ve.test(t),a=e.style;if(c||(t=ze(u)),s=E.cssHooks[t]||E.cssHooks[u],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,r))?o:a[t];"string"===(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ce(e,t,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(E.cssNumber[u]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(a[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(c?a.setProperty(t,n):a[t]=n))}},css:function(e,t,n,r){var o,i,s,u=J(t);return Ve.test(t)||(t=ze(u)),(s=E.cssHooks[t]||E.cssHooks[u])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Fe(e,t,r)),"normal"===o&&t in Ge&&(o=Ge[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),E.each(["height","width"],function(e,t){E.cssHooks[t]={get:function(e,n,r){if(n)return!Me.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):ue(e,Ke,function(){return et(e,t,r)})},set:function(e,n,r){var o,i=He(e),s="border-box"===E.css(e,"boxSizing",!1,i),u=r&&Ze(e,t,r,s,i);return s&&v.scrollboxSize()===i.position&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-Ze(e,t,"border",!1,i)-.5)),u&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),Xe(0,n,u)}}}),E.cssHooks.marginLeft=Ye(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(e,t){E.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(E.cssHooks[e+t].set=Xe)}),E.fn.extend({css:function(e,t){return M(this,function(e,t,n){var r,o,i={},s=0;if(Array.isArray(t)){for(r=He(e),o=t.length;s<o;s++)i[t[s]]=E.css(e,t[s],!1,r);return i}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,arguments.length>1)}}),E.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(E.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[E.cssProps[e.prop]]&&!E.cssHooks[e.prop]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=tt.prototype.init,E.fx.step={};var nt,rt,ot=/^(?:toggle|show|hide)$/,it=/queueHooks$/;function st(){rt&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,E.fx.interval),E.fx.tick())}function ut(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ct(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function at(e,t,n){for(var r,o=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,t,e))return r}function lt(e,t,n){var r,o,i=0,s=lt.prefilters.length,u=E.Deferred().always(function(){delete c.elem}),c=function(){if(o)return!1;for(var t=nt||ut(),n=Math.max(0,a.startTime+a.duration-t),r=1-(n/a.duration||0),i=0,s=a.tweens.length;i<s;i++)a.tweens[i].run(r);return u.notifyWith(e,[a,r,n]),r<1&&s?n:(s||u.notifyWith(e,[a,1,0]),u.resolveWith(e,[a]),!1)},a=u.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var r=E.Tween(e,a.opts,t,n,a.opts.specialEasing[t]||a.opts.easing);return a.tweens.push(r),r},stop:function(t){var n=0,r=t?a.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)a.tweens[n].run(1);return t?(u.notifyWith(e,[a,1,0]),u.resolveWith(e,[a,t])):u.rejectWith(e,[a,t]),this}}),l=a.props;for(!function(e,t){var n,r,o,i,s;for(n in e)if(o=t[r=J(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(s=E.cssHooks[r])&&"expand"in s)for(n in i=s.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(l,a.opts.specialEasing);i<s;i++)if(r=lt.prefilters[i].call(a,e,l,a.opts))return b(r.stop)&&(E._queueHooks(a.elem,a.opts.queue).stop=r.stop.bind(r)),r;return E.map(l,at,a),b(a.opts.start)&&a.opts.start.call(e,a),a.progress(a.opts.progress).done(a.opts.done,a.opts.complete).fail(a.opts.fail).always(a.opts.always),E.fx.timer(E.extend(c,{elem:e,anim:a,queue:a.opts.queue})),a}E.Animation=E.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){b(e)?(t=e,e=["*"]):e=e.match(Q);for(var n,r=0,o=e.length;r<o;r++)n=e[r],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,s,u,c,a,l,f="width"in t||"height"in t,p=this,h={},d=e.style,y=e.nodeType&&se(e),g=X.get(e,"fxshow");for(r in n.queue||(null==(s=E._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,u=s.empty.fire,s.empty.fire=function(){s.unqueued||u()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,E.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[r],ot.test(o)){if(delete t[r],i=i||"toggle"===o,o===(y?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;y=!0}h[r]=g&&g[r]||E.style(e,r)}if((c=!E.isEmptyObject(t))||!E.isEmptyObject(h))for(r in f&&1===e.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(a=g&&g.display)&&(a=X.get(e,"display")),"none"===(l=E.css(e,"display"))&&(a?l=a:(fe([e],!0),a=e.style.display||a,l=E.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=a)&&"none"===E.css(e,"float")&&(c||(p.done(function(){d.display=a}),null==a&&(l=d.display,a="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",p.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),c=!1,h)c||(g?"hidden"in g&&(y=g.hidden):g=X.access(e,"fxshow",{display:a}),i&&(g.hidden=!y),y&&fe([e],!0),p.done(function(){for(r in y||fe([e]),X.remove(e,"fxshow"),h)E.style(e,r,h[r])})),c=at(y?g[r]:0,r,p),r in g||(g[r]=c.start,y&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),E.speed=function(e,t,n){var r=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=E.isEmptyObject(e),i=E.speed(t,n,r),s=function(){var t=lt(this,E.extend({},e),i);(o||X.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=E.timers,s=X.get(this);if(o)s[o]&&s[o].stop&&r(s[o]);else for(o in s)s[o]&&s[o].stop&&it.test(o)&&r(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||E.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=X.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=E.timers,s=r?r.length:0;for(n.finish=!0,E.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(e,t){var n=E.fn[t];E.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,o)}}),E.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){E.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),nt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){rt||(rt=!0,st())},E.fx.stop=function(){rt=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ft,pt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return M(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?E.prop(e,t,n):(1===i&&E.isXMLDoc(e)||(o=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(Q);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(e,t){var n=pt[t]||E.find.attr;pt[t]=function(e,t,r){var o,i,s=t.toLowerCase();return r||(i=pt[s],pt[s]=o,o=null!=n(e,t,r)?s:null,pt[s]=i),o}});var ht=/^(?:input|select|textarea|button)$/i,dt=/^(?:a|area)$/i;function yt(e){return(e.match(Q)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Q)||[]}E.fn.extend({prop:function(e,t){return M(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&E.isXMLDoc(e)||(t=E.propFix[t]||t,o=E.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||dt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(e){var t,n,r,o,i,s,u,c=0;if(b(e))return this.each(function(t){E(this).addClass(e.call(this,t,gt(this)))});if((t=vt(e)).length)for(;n=this[c++];)if(o=gt(n),r=1===n.nodeType&&" "+yt(o)+" "){for(s=0;i=t[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(u=yt(r))&&n.setAttribute("class",u)}return this},removeClass:function(e){var t,n,r,o,i,s,u,c=0;if(b(e))return this.each(function(t){E(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[c++];)if(o=gt(n),r=1===n.nodeType&&" "+yt(o)+" "){for(s=0;i=t[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(u=yt(r))&&n.setAttribute("class",u)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):b(e)?this.each(function(n){E(this).toggleClass(e.call(this,n,gt(this),t),t)}):this.each(function(){var t,o,i,s;if(r)for(o=0,i=E(this),s=vt(e);t=s[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+yt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;E.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=b(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,E(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=E.map(o,function(e){return null==e?"":e+""})),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=E.valHooks[o.type]||E.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(bt,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:yt(E.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,s="select-one"===e.type,u=s?null:[],c=s?i+1:o.length;for(r=i<0?c:s?i:0;r<c;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=E(n).val(),s)return t;u.push(t)}return u},set:function(e,t){for(var n,r,o=e.options,i=E.makeArray(t),s=o.length;s--;)((r=o[s]).selected=E.inArray(E.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},v.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var _t=/^(?:focusinfocus|focusoutblur)$/,mt=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,r,o){var i,u,c,a,l,f,p,h,y=[r||s],g=d.call(e,"type")?e.type:e,v=d.call(e,"namespace")?e.namespace.split("."):[];if(u=h=c=r=r||s,3!==r.nodeType&&8!==r.nodeType&&!_t.test(g+E.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),l=g.indexOf(":")<0&&"on"+g,(e=e[E.expando]?e:new E.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:E.makeArray(t,[e]),p=E.event.special[g]||{},o||!p.trigger||!1!==p.trigger.apply(r,t))){if(!o&&!p.noBubble&&!_(r)){for(a=p.delegateType||g,_t.test(a+g)||(u=u.parentNode);u;u=u.parentNode)y.push(u),c=u;c===(r.ownerDocument||s)&&y.push(c.defaultView||c.parentWindow||n)}for(i=0;(u=y[i++])&&!e.isPropagationStopped();)h=u,e.type=i>1?a:p.bindType||g,(f=(X.get(u,"events")||{})[e.type]&&X.get(u,"handle"))&&f.apply(u,t),(f=l&&u[l])&&f.apply&&$(u)&&(e.result=f.apply(u,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(y.pop(),t)||!$(r)||l&&b(r[g])&&!_(r)&&((c=r[l])&&(r[l]=null),E.event.triggered=g,e.isPropagationStopped()&&h.addEventListener(g,mt),r[g](),e.isPropagationStopped()&&h.removeEventListener(g,mt),E.event.triggered=void 0,c&&(r[l]=c)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=X.access(r,t);o||r.addEventListener(e,n,!0),X.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=X.access(r,t)-1;o?X.access(r,t,o):(r.removeEventListener(e,n,!0),X.remove(r,t))}}});var Ot=n.location,Tt=Date.now(),Et=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var xt=/\[\]$/,Ct=/\r?\n/g,wt=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;function It(e,t,n,r){var o;if(Array.isArray(t))E.each(t,function(t,o){n||xt.test(e)?r(e,o):It(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==T(t))r(e,t);else for(o in t)It(e+"["+o+"]",t[o],n,r)}E.param=function(e,t){var n,r=[],o=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){o(this.name,this.value)});else for(n in e)It(n,e[n],t,o);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&St.test(this.nodeName)&&!wt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}}):{name:t.name,value:n.replace(Ct,"\r\n")}}).get()}});var kt=/%20/g,Dt=/#.*$/,At=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Rt=/^\/\//,qt={},Lt={},jt="*/".concat("*"),Qt=s.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(Q)||[];if(b(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ut(e,t,n,r){var o={},i=e===Lt;function s(u){var c;return o[u]=!0,E.each(e[u]||[],function(e,u){var a=u(t,n,r);return"string"!=typeof a||i||o[a]?i?!(c=a):void 0:(t.dataTypes.unshift(a),s(a),!1)}),c}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Ht(e,t){var n,r,o=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&E.extend(!0,e,r),e}Qt.href=Ot.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ot.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ot.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":jt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ht(Ht(e,E.ajaxSettings),t):Ht(E.ajaxSettings,e)},ajaxPrefilter:Bt(qt),ajaxTransport:Bt(Lt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,u,c,a,l,f,p,h,d=E.ajaxSetup({},t),y=d.context||d,g=d.context&&(y.nodeType||y.jquery)?E(y):E.event,v=E.Deferred(),b=E.Callbacks("once memory"),_=d.statusCode||{},m={},O={},T="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(l){if(!u)for(u={};t=Nt.exec(i);)u[t[1].toLowerCase()]=t[2];t=u[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?i:null},setRequestHeader:function(e,t){return null==l&&(e=O[e.toLowerCase()]=O[e.toLowerCase()]||e,m[e]=t),this},overrideMimeType:function(e){return null==l&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)x.always(e[x.status]);else for(t in e)_[t]=[_[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),C(0,t),this}};if(v.promise(x),d.url=((e||d.url||Ot.href)+"").replace(Rt,Ot.protocol+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(Q)||[""],null==d.crossDomain){a=s.createElement("a");try{a.href=d.url,a.href=a.href,d.crossDomain=Qt.protocol+"//"+Qt.host!=a.protocol+"//"+a.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=E.param(d.data,d.traditional)),Ut(qt,d,t,x),l)return x;for(p in(f=E.event&&d.global)&&0==E.active++&&E.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Pt.test(d.type),o=d.url.replace(Dt,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(kt,"+")):(h=d.url.slice(o.length),d.data&&(d.processData||"string"==typeof d.data)&&(o+=(Et.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(o=o.replace(At,"$1"),h=(Et.test(o)?"&":"?")+"_="+Tt+++h),d.url=o+h),d.ifModified&&(E.lastModified[o]&&x.setRequestHeader("If-Modified-Since",E.lastModified[o]),E.etag[o]&&x.setRequestHeader("If-None-Match",E.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&x.setRequestHeader("Content-Type",d.contentType),x.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+jt+"; q=0.01":""):d.accepts["*"]),d.headers)x.setRequestHeader(p,d.headers[p]);if(d.beforeSend&&(!1===d.beforeSend.call(y,x,d)||l))return x.abort();if(T="abort",b.add(d.complete),x.done(d.success),x.fail(d.error),r=Ut(Lt,d,t,x)){if(x.readyState=1,f&&g.trigger("ajaxSend",[x,d]),l)return x;d.async&&d.timeout>0&&(c=n.setTimeout(function(){x.abort("timeout")},d.timeout));try{l=!1,r.send(m,C)}catch(e){if(l)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,s,u){var a,p,h,m,O,T=t;l||(l=!0,c&&n.clearTimeout(c),r=void 0,i=u||"",x.readyState=e>0?4:0,a=e>=200&&e<300||304===e,s&&(m=function(e,t,n){for(var r,o,i,s,u=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in u)if(u[o]&&u[o].test(r)){c.unshift(o);break}if(c[0]in n)i=c[0];else{for(o in n){if(!c[0]||e.converters[o+" "+c[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==c[0]&&c.unshift(i),n[i]}(d,x,s)),m=function(e,t,n,r){var o,i,s,u,c,a={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)a[s.toLowerCase()]=e.converters[s];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=i,i=l.shift())if("*"===i)i=c;else if("*"!==c&&c!==i){if(!(s=a[c+" "+i]||a["* "+i]))for(o in a)if((u=o.split(" "))[1]===i&&(s=a[c+" "+u[0]]||a["* "+u[0]])){!0===s?s=a[o]:!0!==a[o]&&(i=u[0],l.unshift(u[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+i}}}return{state:"success",data:t}}(d,m,x,a),a?(d.ifModified&&((O=x.getResponseHeader("Last-Modified"))&&(E.lastModified[o]=O),(O=x.getResponseHeader("etag"))&&(E.etag[o]=O)),204===e||"HEAD"===d.type?T="nocontent":304===e?T="notmodified":(T=m.state,p=m.data,a=!(h=m.error))):(h=T,!e&&T||(T="error",e<0&&(e=0))),x.status=e,x.statusText=(t||T)+"",a?v.resolveWith(y,[p,T,x]):v.rejectWith(y,[x,T,h]),x.statusCode(_),_=void 0,f&&g.trigger(a?"ajaxSuccess":"ajaxError",[x,d,a?p:h]),b.fireWith(y,[x,T]),f&&(g.trigger("ajaxComplete",[x,d]),--E.active||E.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],function(e,t){E[t]=function(e,n,r,o){return b(n)&&(o=o||r,r=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:o,data:n,success:r},E.isPlainObject(e)&&e))}}),E._evalUrl=function(e){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b(e)?this.each(function(t){E(this).wrapInner(e.call(this,t))}):this.each(function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b(e);return this.each(function(n){E(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Ft=E.ajaxSettings.xhr();v.cors=!!Ft&&"withCredentials"in Ft,v.ajax=Ft=!!Ft,E.ajaxTransport(function(e){var t,r;if(v.cors||Ft&&!e.crossDomain)return{send:function(o,i){var s,u=e.xhr();if(u.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)u[s]=e.xhrFields[s];for(s in e.mimeType&&u.overrideMimeType&&u.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)u.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=r=u.onload=u.onerror=u.onabort=u.ontimeout=u.onreadystatechange=null,"abort"===e?u.abort():"error"===e?"number"!=typeof u.status?i(0,"error"):i(u.status,u.statusText):i(Wt[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=t(),r=u.onerror=u.ontimeout=t("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{u.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),E.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),E.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=E("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var Yt,Mt=[],Vt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Mt.pop()||E.expando+"_"+Tt++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,s,u=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(u||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,u?e[u]=e[u].replace(Vt,"$1"+o):!1!==e.jsonp&&(e.url+=(Et.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||E.error(o+" was not called"),s[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){s=arguments},r.always(function(){void 0===i?E(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Mt.push(o)),s&&b(i)&&i(s[0]),s=i=void 0}),"script"}),v.createHTMLDocument=((Yt=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(r)):t=s),o=A.exec(e),i=!n&&[],o?[t.createElement(o[1])]:(o=Oe([e],t,i),i&&i.length&&E(i).remove(),E.merge([],o.childNodes)));var r,o,i},E.fn.load=function(e,t,n){var r,o,i,s=this,u=e.indexOf(" ");return u>-1&&(r=yt(e.slice(u)),e=e.slice(0,u)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&E.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,s.html(r?E("<div>").append(E.parseHTML(e)).find(r):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){E.fn[t]=function(e){return this.on(t,e)}}),E.expr.pseudos.animated=function(e){return E.grep(E.timers,function(t){return e===t.elem}).length},E.offset={setOffset:function(e,t,n){var r,o,i,s,u,c,a=E.css(e,"position"),l=E(e),f={};"static"===a&&(e.style.position="relative"),u=l.offset(),i=E.css(e,"top"),c=E.css(e,"left"),("absolute"===a||"fixed"===a)&&(i+c).indexOf("auto")>-1?(s=(r=l.position()).top,o=r.left):(s=parseFloat(i)||0,o=parseFloat(c)||0),b(t)&&(t=t.call(e,n,E.extend({},u))),null!=t.top&&(f.top=t.top-u.top+s),null!=t.left&&(f.left=t.left-u.left+o),"using"in t?t.using.call(e,f):l.css(f)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){E.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===E.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),o.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-E.css(r,"marginTop",!0),left:t.left-o.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||Te})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;E.fn[e]=function(r){return M(this,function(e,r,o){var i;if(_(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),E.each(["top","left"],function(e,t){E.cssHooks[t]=Ye(v.pixelPosition,function(e,n){if(n)return n=Fe(e,t),Ue.test(n)?E(e).position()[t]+"px":n})}),E.each({Height:"height",Width:"width"},function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){E.fn[r]=function(o,i){var s=arguments.length&&(n||"boolean"!=typeof o),u=n||(!0===o||!0===i?"margin":"border");return M(this,function(t,n,o){var i;return _(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?E.css(t,n,u):E.style(t,n,o,u)},t,s?o:void 0,s)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),E.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=c.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(c.call(arguments)))}).guid=e.guid=e.guid||E.guid++,o},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=D,E.isFunction=b,E.isWindow=_,E.camelCase=J,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return E}.apply(t,[]))||(e.exports=r);var Kt=n.jQuery,Gt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Gt),e&&n.jQuery===E&&(n.jQuery=Kt),E},o||(n.jQuery=n.$=E),E})},function(module,exports){
/*!
 * @license :jsstore - V2.3.0 - 02/08/2018
 * https://github.com/ujjwalguptaofficial/JsStore
 * Copyright (c) 2018 @Ujjwal Gupta; Licensed MIT
 */
module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=n(1);n.d(t,"QueryExecutor",function(){return r.QueryExecutor});var o=n(73);n.d(t,"initialize",function(){return o.initialize})},function(e,t,n){"use strict";n.r(t),n.d(t,"QueryExecutor",function(){return E});var r=n(2),o=n(18),i=n(3),s=n(19),u=n(21),c=n(17),a=n(4),l=n(22),f=n(24),p=n(25),h=n(28),d=n(42),y=n(49),g=n(53),v=n(60),b=n(39),_=n(68),m=n(69),O=n(70),T=n(72),E=function(){function e(e){this.onQueryFinished=e}return e.prototype.checkConnectionAndExecuteLogic=function(e){var t=this;switch(o.LogHelper.log("checking connection and executing request:"+e.name),e.name){case i.API.CreateDb:case i.API.IsDbExist:case i.API.GetDbVersion:case i.API.GetDbList:case i.API.GetDbSchema:case i.API.Get:case i.API.Set:case i.API.ChangeLogStatus:case i.API.OpenDb:this.executeLogic_(e);break;default:switch(this.dbStatus_.conStatus){case i.CONNECTION_STATUS.Connected:this.executeLogic_(e);break;case i.CONNECTION_STATUS.Closed:!0===this.isDbDeletedByBrowser_?this.createDb_(null,function(){t.isDbDeletedByBrowser_=!1,t.checkConnectionAndExecuteLogic(e)},e.onError):this.openDb_(this.activeDb_.name,function(){t.checkConnectionAndExecuteLogic(e)},e.onError)}}},e.prototype.changeLogStatus_=function(e,t,n){s.Config.isLogEnabled=e,t()},e.prototype.returnResult_=function(e){!0===s.Config.isRuningInWorker?self.postMessage(e):this.onQueryFinished(e)},e.prototype.executeLogic_=function(e){var t=this,n=function(e){t.returnResult_({returnedValue:e})},r=function(e){t.returnResult_({errorDetails:e,errorOccured:!0})};switch(e.name){case i.API.Select:this.select_(e.query,n,r);break;case i.API.Insert:this.insert_(e.query,n,r);break;case i.API.Update:this.update_(e.query,n,r);break;case i.API.Remove:this.remove_(e.query,n,r);break;case i.API.IsDbExist:this.isDbExist_(e.query,n,r);break;case i.API.GetDbVersion:this.getDbVersion_(e.query,n);break;case i.API.GetDbList:this.getDbList_(n);break;case i.API.GetDbSchema:this.getDbSchema_(e.query,n);break;case i.API.OpenDb:!0===this.isDbDeletedByBrowser_?this.createDb_(null,function(){t.isDbDeletedByBrowser_=!1,n()},r):this.openDb_(e.query,n,r);break;case i.API.CreateDb:this.createDb_(e.query,n,r);break;case i.API.Clear:this.clear_(e.query,n,r);break;case i.API.DropDb:this.dropDb_(n,r);break;case i.API.Count:this.count_(e.query,n,r);break;case i.API.BulkInsert:this.bulkInsert_(e.query,n,r);break;case i.API.ExportJson:this.exportJson_(e.query,n,r);break;case i.API.Get:this.get_(e.query,n,r);break;case i.API.Set:this.set_(e.query,n,r);break;case i.API.ChangeLogStatus:this.changeLogStatus_(e.query,n,r);break;case i.API.Transaction:this.transaction(e.query,n,r);break;default:console.error("The Api:-"+e.name+" does not support.")}},e.prototype.getDbSchema_=function(e,t){r.IdbHelper.getDbSchema(e,t)},Object.defineProperty(e.prototype,"isDbDeletedByBrowser_",{get:function(){return r.IdbHelper.isDbDeletedByBrowser},set:function(e){r.IdbHelper.isDbDeletedByBrowser=e},enumerable:!0,configurable:!0}),e.prototype.getDbList_=function(e){r.IdbHelper.getDbList(e)},Object.defineProperty(e.prototype,"activeDb_",{get:function(){return r.IdbHelper.activeDb},set:function(e){r.IdbHelper.activeDb=e},enumerable:!0,configurable:!0}),e.prototype.openDb_=function(e,t,n){var r=this;this.getDbVersion_(e,function(s){if(0!==s)r.activeDbVersion_=s,r.getDbSchema_(e,function(e){r.activeDb_=e,new u.OpenDb(t,n).execute()});else{var c=new o.LogHelper(i.ERROR_TYPE.DbNotExist,{DbName:e});c.logError(),n(c.get())}})},e.prototype.closeDb_=function(){r.IdbHelper.dbStatus.conStatus===i.CONNECTION_STATUS.Connected&&(r.IdbHelper.dbStatus.conStatus=i.CONNECTION_STATUS.ClosedByJsStore,r.IdbHelper.dbConnection.close())},e.prototype.dropDb_=function(e,t){this.closeDb_(),new c.DropDb(e,t).deleteDb()},e.prototype.update_=function(e,t,n){var r=new T.QueryHelper(i.API.Update,e);(r.checkAndModify(),null==r.error)?new v.Instance(e,t,n).execute():n(r.error)},e.prototype.insert_=function(e,t,n){var r=new T.QueryHelper(i.API.Insert,e);r.checkAndModify().then(function(){e=r.query,new y.Instance(e,t,n).execute()}).catch(function(e){n(e)})},e.prototype.bulkInsert_=function(e,t,n){var r=new T.QueryHelper(i.API.BulkInsert,e);(r.checkAndModify(),null==r.error)?new m.BulkInsert(e,t,n).execute():n(r.error)},e.prototype.remove_=function(e,t,n){var r=new T.QueryHelper(i.API.Remove,e);(r.checkAndModify(),null==r.error)?new g.Instance(e,t,n).execute():n(r.error)},e.prototype.select_=function(e,t,n){if("object"==typeof e.from)new h.Join(e,t,n);else{var r=new T.QueryHelper(i.API.Select,e);if(r.checkAndModify(),null==r.error)new h.Instance(e,t,n).execute();else n(r.error)}},e.prototype.count_=function(e,t,n){if("object"==typeof e.from){e.count=!0;new h.Join(e,t,n)}else{var r=new T.QueryHelper(i.API.Count,e);if(r.checkAndModify(),null==r.error)new d.Instance(e,t,n).execute();else n(r.error)}},e.prototype.createDb_=function(e,t,n){var o=this,i=function(){a.set("JsStore_"+o.activeDb_.name+"_Schema",o.activeDb_),new l.DbHelper(r.IdbHelper.activeDb).createMetaData(function(e){new f.CreateDb(e,t,n)})};null==e?i():(this.closeDb_(),this.getDbVersion_(e.name,function(t){o.activeDbVersion_=t||1,r.IdbHelper.activeDb=new p.DataBase(e),i()}))},Object.defineProperty(e.prototype,"activeDbVersion_",{get:function(){return r.IdbHelper.activeDbVersion},set:function(e){r.IdbHelper.activeDbVersion=e},enumerable:!0,configurable:!0}),e.prototype.getDbVersion_=function(e,t){r.IdbHelper.getDbVersion(e,t)},Object.defineProperty(e.prototype,"dbStatus_",{get:function(){return r.IdbHelper.dbStatus},enumerable:!0,configurable:!0}),e.prototype.clear_=function(e,t,n){new _.Clear(e,t,n).execute()},e.prototype.exportJson_=function(e,t,n){this.select_(e,function(e){var n=URL.createObjectURL(new Blob([JSON.stringify(e)],{type:"text/json"}));t(n)},function(e){n(e)})},e.prototype.getType_=function(e){return b.Util.getType(e)},e.prototype.isDbExist_=function(e,t,n){if(this.dbStatus_.conStatus!==i.CONNECTION_STATUS.UnableToStart)this.getType_(e)===i.DATA_TYPE.String?this.getDbVersion_(e,function(e){t(Boolean(e))}):this.getDbVersion_(e.dbName,function(n){t(e.table.version<=n)});else{var r={message:null,type:this.dbStatus_.lastError};switch(r.type){case i.ERROR_TYPE.IndexedDbBlocked:r.message="IndexedDB is blocked";break;case i.ERROR_TYPE.IndexedDbUndefined:r.message="IndexedDB is not supported"}n(r)}},e.prototype.get_=function(e,t,n){a.get(e,t,n)},e.prototype.set_=function(e,t,n){a.set(e.key,e.value,t,n)},e.prototype.transaction=function(e,t,n){new O.Instance(e,t,n).execute()},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"IdbHelper",function(){return s});var r=n(3),o=n(4),i=n(17),s=function(){function e(){}return e.callDbDroppedByBrowser=function(t){e.dbStatus.conStatus===r.CONNECTION_STATUS.Connected&&(e.isDbDeletedByBrowser=!0,!0===t&&new i.DropDb(e.onDbDroppedByBrowser,null).deleteMetaData())},e.createTransaction=function(t,n,o){if(null===e.transaction){o=o||r.IDB_MODE.ReadWrite,e.transaction=e.dbConnection.transaction(t,o);var i=function(){e.transaction=null,n()};e.transaction.oncomplete=i,e.transaction.onabort=i}},e.setDbList=function(e){return new Promise(function(t,n){o.set("DataBase_List",e,t,n)})},e.updateDbStatus=function(t,n){void 0===n?e.dbStatus.conStatus=t:e.dbStatus={conStatus:t,lastError:n}},e.getDbList=function(e){o.get("DataBase_List",function(t){e(t=null==t?[]:t)})},e.getDbVersion=function(e,t){var n=this;o.get("JsStore_"+e+"_Db_Version",function(e){t.call(n,Number(e))})},e.getDbSchema=function(e,t){o.get("JsStore_"+e+"_Schema",function(e){t(e)})},e.getTable=function(t){return e.activeDb.tables.find(function(e){return e.name===t})},e.transaction=null,e.activeDbVersion=0,e.dbStatus={conStatus:r.CONNECTION_STATUS.NotStarted,lastError:null},e}()},function(e,t,n){"use strict";var r,o,i,s,u,c,a,l;n.r(t),n.d(t,"OCCURENCE",function(){return r}),n.d(t,"WEBWORKER_STATUS",function(){return o}),n.d(t,"CONNECTION_STATUS",function(){return i}),n.d(t,"DATA_TYPE",function(){return s}),n.d(t,"ERROR_TYPE",function(){return u}),n.d(t,"QUERY_OPTION",function(){return c}),n.d(t,"IDB_MODE",function(){return a}),n.d(t,"API",function(){return l}),function(e){e.First="f",e.Last="l",e.Any="a"}(r||(r={})),function(e){e.Registered="registerd",e.Failed="failed",e.NotStarted="not_started"}(o||(o={})),function(e){e.Connected="connected",e.Closed="closed",e.NotStarted="not_started",e.UnableToStart="unable_to_start",e.ClosedByJsStore="closed_by_jsstore"}(i||(i={})),function(e){e.String="string",e.Object="object",e.Array="array",e.Number="number",e.Boolean="boolean",e.Null="null",e.DateTime="date_time"}(s||(s={})),function(e){e.UndefinedColumn="undefined_column",e.UndefinedValue="undefined_value",e.UndefinedColumnName="undefined_column_name",e.UndefinedDbName="undefined_database_name",e.UndefinedColumnValue="undefined_column_value",e.NotArray="not_array",e.NoValueSupplied="no_value_supplied",e.ColumnNotExist="column_not_exist",e.EnableSearchOff="enable_search_off",e.InvalidOp="invalid_operator",e.NullValue="null_value",e.BadDataType="bad_data_type",e.NextJoinNotExist="next_join_not_exist",e.TableNotExist="table_not_exist",e.DbNotExist="db_not_exist",e.ConnectionAborted="connection_aborted",e.ConnectionClosed="connection_closed",e.NotObject="not_object",e.InvalidConfig="invalid_config",e.DbBlocked="Db_blocked",e.IndexedDbUndefined="indexeddb_undefined",e.IndexedDbBlocked="indexeddb_blocked"}(u||(u={})),function(e){e.Where="where",e.Like="like",e.In="in",e.Between="-",e.GreaterThan=">",e.LessThan="<",e.GreaterThanEqualTo=">=",e.LessThanEqualTo="<=",e.NotEqualTo="!=",e.Aggregate="aggregate",e.Max="max",e.Min="min",e.Avg="avg",e.Count="count",e.Sum="sum",e.Or="or",e.Skip="skip",e.Limit="limit",e.And="and"}(c||(c={})),function(e){e.ReadOnly="readonly",e.ReadWrite="readwrite"}(a||(a={})),function(e){e.CreateDb="create_db",e.IsDbExist="is_db_exist",e.GetDbVersion="get_db_version",e.GetDbList="get_db_list",e.Get="get",e.Set="set",e.Select="select",e.Insert="insert",e.Update="update",e.Remove="remove",e.GetDbSchema="get_db_schema",e.OpenDb="open_db",e.Clear="clear",e.DropDb="drop_db",e.Count="count",e.BulkInsert="bulk_insert",e.ExportJson="export_json",e.ChangeLogStatus="change_log_status",e.Transaction="transaction",e.FinishTransaction="finish_transaction"}(l||(l={}))},function(e,t,n){"use strict";n.r(t);var r=n(5);n.d(t,"init",function(){return r.init}),n.d(t,"get",function(){return r.get}),n.d(t,"set",function(){return r.set}),n.d(t,"remove",function(){return r.remove})},function(e,t,n){"use strict";n.r(t),n.d(t,"init",function(){return i}),n.d(t,"get",function(){return s}),n.d(t,"set",function(){return u}),n.d(t,"remove",function(){return c});var r=n(6),o=n(8),i=function(){r.Utils.setDbType(),indexedDB&&o.QueryExecutor.prcoessQuery({Name:"create_db",Query:null})},s=function(e,t,n){void 0===n&&(n=null),o.QueryExecutor.prcoessQuery({Name:"get",OnError:n,OnSuccess:t,Query:e})},u=function(e,t,n,r){var i={Key:e,Value:t};o.QueryExecutor.prcoessQuery({Name:"set",OnError:r,OnSuccess:n,Query:i})},c=function(e,t,n){void 0===t&&(t=null),void 0===n&&(n=null),o.QueryExecutor.prcoessQuery({Name:"remove",OnError:n,OnSuccess:t,Query:e})}},function(e,t,n){"use strict";n.r(t),n.d(t,"Utils",function(){return i});var r=n(7),o=n(8),i=function(){function e(){}return e.setDbType=function(){indexedDB||(indexedDB=self.mozIndexedDB||self.webkitIndexedDB||self.msIndexedDB),indexedDB?(IDBTransaction=IDBTransaction||self.webkitIDBTransaction||self.msIDBTransaction,self.IDBKeyRange=self.IDBKeyRange||self.webkitIDBKeyRange||self.msIDBKeyRange):r.IdbHelper.dbStatus={conStatus:r.CONNECTION_STATUS.UnableToStart,lastError:r.ERROR_TYPE.IndexedDbUndefined}},e.updateDbStatus=function(e,t){void 0===t?o.QueryExecutor.dbStatus.conStatus=e:o.QueryExecutor.dbStatus={conStatus:e,lastError:t}},e}()},function(e,t,n){"use strict";n.r(t);var r=n(2);n.d(t,"IdbHelper",function(){return r.IdbHelper});var o=n(3);n.d(t,"OCCURENCE",function(){return o.OCCURENCE}),n.d(t,"WEBWORKER_STATUS",function(){return o.WEBWORKER_STATUS}),n.d(t,"CONNECTION_STATUS",function(){return o.CONNECTION_STATUS}),n.d(t,"DATA_TYPE",function(){return o.DATA_TYPE}),n.d(t,"ERROR_TYPE",function(){return o.ERROR_TYPE}),n.d(t,"QUERY_OPTION",function(){return o.QUERY_OPTION}),n.d(t,"IDB_MODE",function(){return o.IDB_MODE}),n.d(t,"API",function(){return o.API})},function(e,t,n){"use strict";n.r(t),n.d(t,"QueryExecutor",function(){return i});var r=n(9),o=n(10),i=function(){function e(){}return e.prcoessQuery=function(e){this.requestQueue.push(e),1===this.requestQueue.length&&this.executeCode()},e.executeCode=function(){var e=this;if(!this.isCodeExecuting&&this.requestQueue.length>0){this.isCodeExecuting=!0;var t={Name:this.requestQueue[0].Name,Query:this.requestQueue[0].Query};new o.Main(function(t){e.onQueryFinished(t)}).checkConnectionAndExecuteLogic(t)}},e.onQueryFinished=function(e){var t=this.requestQueue.shift();this.isCodeExecuting=!1,e.ErrorOccured?t.OnError?t.OnError(e.ErrorDetails):console.error(e.ErrorDetails):t.OnSuccess&&t.OnSuccess(e.ReturnedValue),this.executeCode()},e.requestQueue=[],e.tableName="LocalStore",e.columnName="Key",e.isCodeExecuting=!1,e.dbStatus={conStatus:r.CONNECTION_STATUS.NotStarted,lastError:""},e}()},function(e,t,n){"use strict";var r;n.r(t),n.d(t,"CONNECTION_STATUS",function(){return r}),function(e){e.Connected="connected",e.Closed="closed",e.NotStarted="not_connected"}(r||(r={}))},function(e,t,n){"use strict";n.r(t),n.d(t,"Main",function(){return l});var r=n(8),o=n(9),i=n(11),s=n(14),u=n(15),c=n(16),a=n(13),l=function(){function e(e){void 0===e&&(e=null),this.onSuccess=e}return e.prototype.set=function(e,t,n){new s.Set(e,t,n).execute()},e.prototype.remove=function(e,t,n){new i.Remove(e,t,n).execute()},e.prototype.get=function(e,t,n){new c.Get(e,t,n).execute()},e.prototype.createDb=function(e,t){new u.InitDb("KeyStore",e,t)},e.prototype.checkConnectionAndExecuteLogic=function(e){var t=this;if("create_db"===e.Name||"open_db"===e.Name)this.executeLogic(e);else switch(r.QueryExecutor.dbStatus.conStatus){case o.CONNECTION_STATUS.Connected:this.executeLogic(e);break;case o.CONNECTION_STATUS.NotStarted:setTimeout(function(){this.checkConnectionAndExecuteLogic(e)}.bind(this),100);break;case o.CONNECTION_STATUS.Closed:a.IdbHelper._isDbDeletedByBrowser&&this.createDb(function(){a.IdbHelper._isDbDeletedByBrowser=!1,t.checkConnectionAndExecuteLogic(e)},function(e){console.error(e)})}},e.prototype.returnResult=function(e){this.onSuccess&&this.onSuccess(e)},e.prototype.executeLogic=function(e){var t=this,n=function(e){t.returnResult({ReturnedValue:e})},r=function(e){t.returnResult({ErrorDetails:e,ErrorOccured:!0})};switch(e.Name){case"get":this.get(e.Query,n,r);break;case"set":this.set(e.Query,n,r);break;case"remove":this.remove(e.Query,n,r);break;case"create_db":this.createDb(n,r)}},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Remove",function(){return c});var r,o=n(12),i=n(8),s=n(13),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var o=e.call(this)||this;return o.rowAffected=0,o.key=t,o.onSuccess=n,o.onError=r,o}return u(t,e),t.prototype.execute=function(){var e=this;this.initTransaction();var t,n,r;this.errorOccured||(t=i.QueryExecutor.columnName,n=this.key,(r=e.objectStore.index(t).openCursor(IDBKeyRange.only(n))).onerror=function(t){e.errorOccured=!0,e.onErrorOccured(t)},r.onsuccess=function(t){var n=t.target.result;n&&(n.delete(),++e.rowAffected,n.continue())})},t.prototype.initTransaction=function(){s.IdbHelper.createTransaction([i.QueryExecutor.tableName],this.onTransactionCompleted.bind(this)),this.objectStore=s.IdbHelper._transaction.objectStore(i.QueryExecutor.tableName)},t.prototype.onTransactionCompleted=function(){!1===this.errorOccured&&this.onSuccess(this.rowAffected)},t}(o.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"Base",function(){return r});var r=function(){function e(){this.results=null,this.errorOccured=!1,this.errorCount=0}return e.prototype.onErrorOccured=function(e){++this.errorCount,1===this.errorCount&&null!=this.onError&&this.onError(e.target.error),console.error(e)},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"IdbHelper",function(){return i});var r=n(8),o=n(9),i=function(){function e(){}return e.callDbDroppedByBrowser=function(){this._isDbDeletedByBrowser=r.QueryExecutor.dbStatus.conStatus===o.CONNECTION_STATUS.Connected},e.createTransaction=function(e,t,n){var r=this;null===this._transaction&&(n=n||"readwrite",this._transaction=this._dbConnection.transaction(e,n),this._transaction.oncomplete=function(){r._transaction=null,t()},this._transaction.ontimeout=function(){this._transaction=null,console.error("transaction timed out")})},e._transaction=null,e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Set",function(){return c});var r,o=n(12),i=n(13),s=n(8),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var o=e.call(this)||this;o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess&&o.onSuccess(null)};try{o.query=t,o.onSuccess=n,o.onError=r}catch(e){console.error(e)}return o}return u(t,e),t.prototype.execute=function(){var e,t=this,n=function(){t.objectStore.add(t.query).onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}};this.initTransaction(),(e=t.objectStore.index(s.QueryExecutor.columnName).openCursor(IDBKeyRange.only(t.query[s.QueryExecutor.columnName]))).onsuccess=function(e){var r=e.target.result;r?r.update(t.query):n()},e.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t.prototype.initTransaction=function(){i.IdbHelper.createTransaction([s.QueryExecutor.tableName],this.onTransactionCompleted_),this.objectStore=i.IdbHelper._transaction.objectStore(s.QueryExecutor.tableName)},t}(o.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"tempDatas",function(){}),n.d(t,"InitDb",function(){return c});var r=n(7),o=n(9),i=n(6),s=n(13),u=n(8),c=function(){return function(e,t,n){var c=self.indexedDB.open(e,1);s.IdbHelper._isDbDeletedByBrowser=!1,c.onerror=function(e){"InvalidStateError"===e.target.error.name&&(r.IdbHelper.dbStatus={conStatus:r.CONNECTION_STATUS.UnableToStart,lastError:r.ERROR_TYPE.IndexedDbBlocked}),null!=n&&n(e.target.error)},c.onsuccess=function(e){u.QueryExecutor.dbStatus.conStatus=o.CONNECTION_STATUS.Connected,s.IdbHelper._dbConnection=c.result,s.IdbHelper._dbConnection.onclose=function(){s.IdbHelper.callDbDroppedByBrowser(),i.Utils.updateDbStatus(o.CONNECTION_STATUS.Closed,r.ERROR_TYPE.ConnectionClosed)},s.IdbHelper._dbConnection.onversionchange=function(e){null===e.newVersion&&(e.target.close(),s.IdbHelper.callDbDroppedByBrowser(),i.Utils.updateDbStatus(o.CONNECTION_STATUS.Closed,r.ERROR_TYPE.ConnectionClosed))},s.IdbHelper._dbConnection.onerror=function(e){u.QueryExecutor.dbStatus.lastError="Error occured in connection :"+e.target.result},s.IdbHelper._dbConnection.onabort=function(e){u.QueryExecutor.dbStatus={conStatus:o.CONNECTION_STATUS.Closed,lastError:"Connection aborted"}},null!=t&&t()},c.onupgradeneeded=function(e){e.target.result.createObjectStore(u.QueryExecutor.tableName,{keyPath:"Key"}).createIndex("Key","Key",{unique:!0})}}}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Get",function(){return c});var r,o=n(12),i=n(8),s=n(13),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.results)},o.key=t,o.onSuccess=n,o.onError=r,o}return u(t,e),t.prototype.execute=function(){var e,t,n,r=this;this.initTransaction_(),e=i.QueryExecutor.columnName,t=this.key,(n=r.objectStore.index(e).openCursor(IDBKeyRange.only(t))).onerror=function(e){r.errorOccured=!0,r.onErrorOccured(e)},n.onsuccess=function(e){var t=e.target.result;t&&(r.results=t.value.Value)}},t.prototype.initTransaction_=function(){s.IdbHelper.createTransaction([i.QueryExecutor.tableName],this.onTransactionCompleted_,"readonly"),this.objectStore=s.IdbHelper._transaction.objectStore(i.QueryExecutor.tableName)},t}(o.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"DropDb",function(){return a});var r,o=n(4),i=n(3),s=n(18),u=n(20),c=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=function(e){function t(t,n){var r=e.call(this)||this;return r.onSuccess_=t,r.onError_=n,r}return c(t,e),t.prototype.deleteMetaData=function(){var e=this;o.remove("JsStore_"+this.dbName+"_Db_Version"),this.activeDb.tables.forEach(function(t){o.remove("JsStore_"+e.dbName+"_"+t.name+"_Version"),t.columns.forEach(function(n){n.autoIncrement&&o.remove("JsStore_"+e.dbName+"_"+t.name+"_"+n.name+"_Value")})}),this.getDbList(function(t){t.splice(t.indexOf(e.dbName),1),e.setDbList(t).then(function(){o.remove("JsStore_"+e.dbName+"_Schema",e.onSuccess_)})})},t.prototype.deleteDb=function(){var e=this;setTimeout(function(){var t=indexedDB.deleteDatabase(e.dbName);t.onblocked=function(){null!=e.onError_&&e.onError_(new s.LogHelper(i.ERROR_TYPE.DbBlocked).get())},t.onerror=function(t){null!=e.onError_&&e.onError_(event.target.error)},t.onsuccess=function(){e.dbStatus.conStatus=i.CONNECTION_STATUS.Closed,e.deleteMetaData()}},100)},t}(u.BaseDb)},function(e,t,n){"use strict";n.r(t),n.d(t,"LogHelper",function(){return i});var r=n(3),o=n(19),i=function(){function e(e,t){void 0===t&&(t=null),this.type=e,this.info_=t,this.message=this.getMsg_()}return e.prototype.throw=function(){throw this.get()},e.log=function(e){o.Config.isLogEnabled&&console.log(e)},e.prototype.logError=function(){console.error(this.get())},e.prototype.logWarning=function(){console.warn(this.get())},e.prototype.get=function(){return{message:this.message,type:this.type}},e.prototype.getMsg_=function(){var e;switch(this.type){case r.ERROR_TYPE.NotArray:e="Supplied value is not an array";break;case r.ERROR_TYPE.UndefinedColumn:e="Column is undefined in Where";break;case r.ERROR_TYPE.UndefinedValue:e="Value is undefined in Where";break;case r.ERROR_TYPE.UndefinedColumnName:e="Column name is undefined '"+this.info_.TableName+"'";break;case r.ERROR_TYPE.UndefinedDbName:e="Database name is not supplied";break;case r.ERROR_TYPE.UndefinedColumnValue:e="Column value is undefined";break;case r.ERROR_TYPE.NoValueSupplied:e="No value is supplied";break;case r.ERROR_TYPE.InvalidOp:e="Invalid Op Value '"+this.info_.Op+"'";break;case r.ERROR_TYPE.ColumnNotExist:e="Column '"+this.info_.ColumnName+"' does not exist";break;case r.ERROR_TYPE.EnableSearchOff:e="Search is turned off for the Column '"+this.info_.ColumnName+"'";break;case r.ERROR_TYPE.NullValue:e="Null value is not allowed for column '"+this.info_.ColumnName+"'";break;case r.ERROR_TYPE.BadDataType:e="Supplied value for column '"+this.info_.ColumnName+"' does not have valid type";break;case r.ERROR_TYPE.NextJoinNotExist:e="Next join details not supplied";break;case r.ERROR_TYPE.TableNotExist:e="Table '"+this.info_.TableName+"' does not exist";break;case r.ERROR_TYPE.DbNotExist:e="Database '"+this.info_.DbName+"' does not exist";break;case r.ERROR_TYPE.NotObject:e="supplied value is not object";break;case r.ERROR_TYPE.InvalidOp:e="Invalid Config '"+this.info_.Config+" '";case r.ERROR_TYPE.DbBlocked:e="database is blocked, cant be deleted right now";default:e=this.message}return e},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Config",function(){return r});var r=function(){function e(){}return e.isLogEnabled=!1,e.isRuningInWorker=!1,e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"BaseDb",function(){return o});var r=n(2),o=function(){function e(){}return Object.defineProperty(e.prototype,"dbName",{get:function(){return r.IdbHelper.activeDb.name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbStatus",{get:function(){return r.IdbHelper.dbStatus},set:function(e){r.IdbHelper.dbStatus=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbConnection",{get:function(){return r.IdbHelper.dbConnection},set:function(e){r.IdbHelper.dbConnection=e},enumerable:!0,configurable:!0}),e.prototype.updateDbStatus=function(e,t){r.IdbHelper.updateDbStatus(e,t)},e.prototype.onDbDroppedByBrowser=function(e){r.IdbHelper.callDbDroppedByBrowser(e)},Object.defineProperty(e.prototype,"dbVersion",{get:function(){return parseInt(r.IdbHelper.activeDbVersion)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"activeDb",{get:function(){return r.IdbHelper.activeDb},enumerable:!0,configurable:!0}),e.prototype.getDbList=function(e){r.IdbHelper.getDbList(e)},e.prototype.setDbList=function(e){return r.IdbHelper.setDbList(e)},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"OpenDb",function(){return c});var r,o=n(3),i=n(18),s=n(20),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n){var r=e.call(this)||this;return r.onSuccess_=t,r.onError_=n,r}return u(t,e),t.prototype.execute=function(){var e=this;if(this.dbName.length>0){var t=indexedDB.open(this.dbName,this.dbVersion);t.onerror=function(t){null!=e.onError_&&e.onError_(t.target.error)},t.onsuccess=function(n){e.dbStatus.conStatus=o.CONNECTION_STATUS.Connected,e.dbConnection=t.result,e.dbConnection.onclose=function(t){e.onDbDroppedByBrowser(),e.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed)},e.dbConnection.onversionchange=function(t){null===t.newVersion&&null===t.newVersion&&(t.target.close(),e.onDbDroppedByBrowser(!0),e.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed))},e.dbConnection.onerror=function(t){e.dbStatus.lastError="Error occured in connection :"+t.target.result},null!=e.onSuccess_&&e.onSuccess_(),e.setPrimaryKey_()}}else{new i.LogHelper(o.ERROR_TYPE.UndefinedDbName).throw()}},t.prototype.setPrimaryKey_=function(){var e=this;this.activeDb.tables.forEach(function(t,n){t.columns.every(function(t){return e.activeDb.tables[n].primaryKey=t.primaryKey?t.name:"",!t.primaryKey})})},t}(s.BaseDb)},function(e,t,n){"use strict";n.r(t),n.d(t,"DbHelper",function(){return o});var r=n(23),o=function(){function e(e){this.tables=[],this.name=e.name,this.tables=e.tables}return e.prototype.createMetaData=function(e){var t=this,n=0,o=[],i=function(){if(n<t.tables.length){var s=t.tables[n],u=new r.TableHelper(s);u.createMetaData(t.name,function(){u.callback=null,o.push(u),i()}),++n}else e(o)};i()},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"TableHelper",function(){return i});var r=n(4),o=n(2),i=function(){function e(e){this.columns=[],this.requireDelete=!1,this.requireCreation=!1,this.name=e.name,this.version=e.version,this.columns=e.columns,this.setPrimaryKey_()}return e.prototype.createMetaData=function(e,t){this.callback=t,this.setRequireDelete_(e),this.setDbVersion_(e)},e.prototype.setPrimaryKey_=function(){var e=this;this.columns.every(function(t){return e.primaryKey=t.primaryKey?t.name:"",!t.primaryKey})},e.prototype.setRequireDelete_=function(e){var t=this;r.get("JsStore_"+e+"_"+this.name+"_Version",function(e){null==e?t.requireCreation=!0:e<t.version&&(t.requireDelete=!0)})},e.prototype.setDbVersion_=function(e){o.IdbHelper.activeDbVersion=o.IdbHelper.activeDbVersion>this.version?o.IdbHelper.activeDbVersion:this.version,r.set("JsStore_"+e+"_Db_Version",o.IdbHelper.activeDbVersion),r.set("JsStore_"+e+"_"+this.name+"_Version",o.IdbHelper.activeDbVersion,this.callback),this.version=o.IdbHelper.activeDbVersion},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"CreateDb",function(){return c});var r,o=n(3),i=n(4),s=n(20),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var s=e.call(this)||this,u=[],c=indexedDB.open(s.dbName,s.dbVersion);return c.onerror=function(e){null!=r&&r(e.target.error)},c.onsuccess=function(e){s.dbStatus.conStatus=o.CONNECTION_STATUS.Connected,s.dbConnection=c.result,s.dbConnection.onclose=function(e){s.onDbDroppedByBrowser(),s.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed)},s.dbConnection.onversionchange=function(e){null===e.newVersion&&(e.target.close(),s.onDbDroppedByBrowser(!0),s.updateDbStatus(o.CONNECTION_STATUS.Closed,o.ERROR_TYPE.ConnectionClosed))},s.dbConnection.onerror=function(e){s.dbStatus.lastError="Error occured in connection :"+e.target.result},s.savedbNameIntoDbList(),null!=n&&n(u)},c.onupgradeneeded=function(e){var n=e.target.result,r=function(e,t){try{if(e.primaryKey.length>0){s.activeDb.tables[t].primaryKey=e.primaryKey;var r=n.createObjectStore(e.name,{keyPath:e.primaryKey});e.columns.forEach(function(t){if(!0===t.enableSearch){var n=t.primaryKey?{unique:!0}:{unique:t.unique};n.multiEntry=t.multiEntry,r.createIndex(t.name,t.name,n),t.autoIncrement&&i.set("JsStore_"+s.dbName+"_"+e.name+"_"+t.name+"_Value",0)}})}else{var o=n.createObjectStore(e.name,{autoIncrement:!0});e.columns.forEach(function(t){var n={unique:t.unique,multiEntry:t.multiEntry};o.createIndex(t.name,t.name,n),t.autoIncrement&&i.set("JsStore_"+s.dbName+"_"+e.name+"_"+t.name+"_Value",0)})}u.push(e.name),i.set("JsStore_"+s.dbName+"_"+e.name+"_Version",e.version)}catch(e){console.error(e)}};t.forEach(function(e,t){e.requireDelete?(n.objectStoreNames.contains(e.name)&&n.deleteObjectStore(e.name),r(e,t)):e.requireCreation&&r(e,t)})},s}return u(t,e),t.prototype.savedbNameIntoDbList=function(){var e=this;this.getDbList(function(t){t.indexOf(e.dbName)<0&&(t.push(e.dbName),e.setDbList(t))})},t}(s.BaseDb)},function(e,t,n){"use strict";n.r(t),n.d(t,"DataBase",function(){return o});var r=n(26),o=function(){return function(e){var t=this;this.tables=[],this.name=e.name,e.tables.forEach(function(e){t.tables.push(new r.Table(e))})}}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Table",function(){return o});var r=n(27),o=function(){return function(e){var t=this;this.columns=[],this.name=e.name,this.version=null==e.version?1:e.version,e.columns.forEach(function(n){t.columns.push(new r.Column(n,e.name))})}}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Column",function(){return i});var r=n(18),o=n(3),i=function(){return function(e,t){null!=e.name?this.name=e.name:new r.LogHelper(o.ERROR_TYPE.UndefinedColumnName,{TableName:t}).throw(),this.autoIncrement=null!=e.autoIncrement&&e.autoIncrement,this.primaryKey=null!=e.primaryKey&&e.primaryKey,this.unique=null!=e.unique&&e.unique,this.notNull=null!=e.notNull&&e.notNull,this.dataType=null!=e.dataType?e.dataType:e.autoIncrement?"number":null,this.default=e.default,this.multiEntry=null!=e.multiEntry&&e.multiEntry,this.enableSearch=null==e.enableSearch||e.enableSearch}}()},function(e,t,n){"use strict";n.r(t);var r=n(29);n.d(t,"Instance",function(){return r.Instance});var o=n(41);n.d(t,"Join",function(){return o.Join})},function(e,t,n){"use strict";n.r(t),n.d(t,"Instance",function(){return u});var r,o=n(30),i=n(3),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(t,n,r){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){if(!1===o.errorOccured){if(o.processOrderBy(),o.query.distinct){var e=[],t=o.results[0];for(var n in t)e.push(n);var r=o.getPrimaryKey(o.query.from),i=e.indexOf(r);e.splice(i,1),o.query.groupBy=e.length>0?e:null}o.query.groupBy?o.query.aggregate?o.executeAggregateGroupBy():o.processGroupBy():o.query.aggregate&&o.processAggregateQry(),o.onSuccess(o.results)}},o.onError=r,o.onSuccess=n,o.query=t,o.skipRecord=t.skip,o.limitRecord=t.limit,o.tableName=t.from,o}return s(t,e),t.prototype.execute=function(){try{null!=this.query.where?(this.initTransaction_(),this.isArray(this.query.where)?this.processWhereArrayQry():this.processWhere_()):(this.initTransaction_(),this.executeWhereUndefinedLogic())}catch(e){this.errorOccured=!0,this.onExceptionOccured(e,{TableName:this.query.from})}},t.prototype.processWhereArrayQry=function(){var e=this;this.isArrayQry=!0;var t,n=this.query.where,r=this.getPrimaryKey(this.query.from),o=!0,s=[],u=function(){if(t===i.QUERY_OPTION.And){var u=function(){var t=[];e.results.forEach(function(e){var n;n=e[r],s.findIndex(function(e){return e[r]===n})>=0&&t.push(e)}),s=t,t=null};s.length>0?u():!0===o?s=e.results:u()}else s.length>0?(e.results=s.concat(e.results),e.removeDuplicates(),s=e.results):s=e.results;n.length>0?(e.results=[],c()):e.results=s,o=!1},c=function(){e.query.where=n.shift(),e.query.where[i.QUERY_OPTION.Or]&&1===Object.keys(e.query.where).length?(t=i.QUERY_OPTION.Or,e.query.where=e.query.where[i.QUERY_OPTION.Or],e.onWhereArrayQrySuccess=u):(t=i.QUERY_OPTION.And,e.onWhereArrayQrySuccess=u),e.processWhere_()};c()},t.prototype.onQueryFinished=function(){!0===this.isOr?this.orQuerySuccess_():!0===this.isArrayQry?this.onWhereArrayQrySuccess():!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.initTransaction_=function(){this.createTransaction([this.tableName],this.onTransactionCompleted_,i.IDB_MODE.ReadOnly),this.objectStore=this.transaction.objectStore(this.tableName)},t.prototype.processWhere_=function(){this.query.where.or&&this.processOrLogic_(),this.goToWhereLogic()},t.prototype.orQueryFinish_=function(){this.isOr=!1,this.results=this.orInfo.results,this.orInfo=void 0,this.removeDuplicates(),this.onQueryFinished()},t.prototype.orQuerySuccess_=function(){if(this.orInfo.results=this.orInfo.results.concat(this.results),!this.query.limit||this.query.limit>this.orInfo.results.length){this.results=[];var e=this.getObjectFirstKey(this.orInfo.orQuery);if(null!=e){var t={};t[e]=this.orInfo.orQuery[e],delete this.orInfo.orQuery[e],this.query.where=t,this.goToWhereLogic()}else this.orQueryFinish_()}else this.orQueryFinish_()},t.prototype.processOrLogic_=function(){this.isOr=!0,this.orInfo={orQuery:this.query.where.or,results:[]},delete this.query.where.or},t}(o.Helper)},function(e,t,n){"use strict";n.r(t),n.d(t,"Helper",function(){return u});var r,o=n(31),i=n(3),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return e.call(this)||this}return s(t,e),t.prototype.processOrderBy=function(){var e=this,t=this.query.order;if(t&&this.results.length>0&&!this.sorted&&t.by){t.type=t.type?t.type.toLowerCase():"asc";var n=t.by,r=this.getColumnInfo(n);r.dataType===i.DATA_TYPE.String?"asc"===t.type?e.results.sort(function(e,t){return e[n].toLowerCase().localeCompare(t[n].toLowerCase())}):e.results.sort(function(e,t){return t[n].toLowerCase().localeCompare(e[n].toLowerCase())}):r.dataType===i.DATA_TYPE.Number&&("asc"===t.type?e.results.sort(function(e,t){return e[n]-t[n]}):e.results.sort(function(e,t){return t[n]-e[n]}))}},t.prototype.processAggregateQry=function(){var e,t=this.results,n={};for(var r in this.results=void 0,this.query.aggregate){var o=this.query.aggregate[r],s=this.getType(o);switch(r){case"count":var u=function(){var n=0;for(var r in t)n+=t[r][e]?1:0;return n};if(s===i.DATA_TYPE.String)n["count("+(e=o)+")"]=u();else if(s===i.DATA_TYPE.Array)for(var c in o)n["count("+(e=o[c])+")"]=u();break;case"max":var a=function(){var n=0;for(var r in t)n=n>t[r][e]?n:t[r][e];return n};if(s===i.DATA_TYPE.String)n["max("+(e=o)+")"]=a();else if(s===i.DATA_TYPE.Array)for(var c in o)n["max("+(e=o[c])+")"]=a();break;case"min":var l=function(){var n=1/0,r=1/0;for(var o in t)n=n<(r=t[o][e]?t[o][e]:1/0)?n:r;return n};if(s===i.DATA_TYPE.String)n["min("+(e=o)+")"]=l();else if(s===i.DATA_TYPE.Array)for(var c in o)n["min("+(e=o[c])+")"]=l();break;case"sum":var f=function(){var n=0;for(var r in t)n+=t[r][e];return n};if(s===i.DATA_TYPE.String)n["sum("+(e=o)+")"]=f();else if(s===i.DATA_TYPE.Array)for(var c in o)n["sum("+(e=o[c])+")"]=f();break;case"avg":var p=function(){var n=0;for(var r in t)n+=t[r][e];return n/t.length};if(s===i.DATA_TYPE.String)n["avg("+(e=o)+")"]=p();else if(s===i.DATA_TYPE.Array)for(var c in o)n["avg("+(e=o[c])+")"]=p()}}for(var r in n)t[0][r]=n[r];this.results=t},t}(o.GroupByHelper)},function(e,t,n){"use strict";n.r(t),n.d(t,"GroupByHelper",function(){return u});var r,o=n(32),i=n(3),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return e.call(this)||this}return s(t,e),t.prototype.processGroupBy=function(){var e=this.query.groupBy,t=this.results,n={};if(this.results=this.query.groupBy=void 0,this.getType(e)===i.DATA_TYPE.String)for(var r in t)n[t[r][e]]=t[r];else{var o=void 0;for(var r in t){for(var s in o="",e)o+=t[r][e[s]];n[o]=t[r]}}for(var r in t=[],n)t.push(n[r]);this.results=t},t.prototype.executeAggregateGroupBy=function(){var e,t,n,r,o=this,s=this.query.groupBy,u=this.results,c={},a=this.query.aggregate;this.query.aggregate=void 0,this.results=void 0;var l=function(){for(var s in a){var l=a[s],f=o.getType(l);switch(s){case i.QUERY_OPTION.Count:var p=function(){return n=(n=c[t])?n["count("+r+")"]:0,n+=u[e][r]?1:0};if(f===i.DATA_TYPE.String)r=l,u[e]["count("+r+")"]=p();else if(f===i.DATA_TYPE.Array)for(var h in l)r=l[h],u[e]["count("+r+")"]=p();break;case i.QUERY_OPTION.Max:var d=function(){return n=(n=c[t])?n["max("+r+")"]:0,u[e][r]=u[e][r]?u[e][r]:0,n>u[e][r]?n:u[e][r]};if(f===i.DATA_TYPE.String)r=l,u[e]["max("+r+")"]=d();else if(f===i.DATA_TYPE.Array)for(var h in l)r=l[h],u[e]["max("+r+")"]=d();break;case i.QUERY_OPTION.Min:var y=function(){return n=(n=c[t])?n["min("+r+")"]:1/0,u[e][r]=u[e][r]?u[e][r]:1/0,n<u[e][r]?n:u[e][r]};if(f===i.DATA_TYPE.String)r=l,u[e]["min("+r+")"]=y();else if(f===i.DATA_TYPE.Array)for(var h in l)r=l[h],u[e]["min("+r+")"]=y();break;case i.QUERY_OPTION.Sum:var g=function(){return n=(n=c[t])?n["sum("+r+")"]:0,n+=u[e][r]?u[e][r]:0};if(f===i.DATA_TYPE.String)r=l,u[e]["sum("+r+")"]=g();else if(f===i.DATA_TYPE.Array)for(var h in l)r=l[h],u[e]["sum("+r+")"]=g();break;case i.QUERY_OPTION.Avg:var v=function(){var o=(n=c[t])?n["sum("+r+")"]:0;o+=u[e][r]?u[e][r]:0,u[e]["sum("+r+")"]=o,n=n?n["count("+r+")"]:0,n+=u[e][r]?1:0,u[e]["count("+r+")"]=n};if(f===i.DATA_TYPE.String)r=l,v();else if(f===i.DATA_TYPE.Array)for(var h in l)r=l[h],v()}}};if(this.getType(s)===i.DATA_TYPE.String)for(e in u)t=u[e][s],l(),c[t]=u[e];else for(e in u){for(var f in t="",s)t+=u[e][s[f]];l(),c[t]=u[e]}for(var p in u=[],c)u.push(c[p]);if(a.avg)if(this.getType(a.avg)===i.DATA_TYPE.String)for(e in u){var h=u[e]["sum("+a.avg+")"],d=u[e]["count("+a.avg+")"];u[e]["avg("+a.avg+")"]=h/d,a.count!==a.avg&&delete u[e]["count("+a.avg+")"],a.sum!==a.avg&&delete u[e]["sum("+a.avg+")"]}else{var y=this.getType(a.count)===i.DATA_TYPE.String,g=this.getType(a.sum)===i.DATA_TYPE.String;for(e in u)for(var f in a.avg){var v=a.avg[f],b=u[e]["sum("+v+")"],_=u[e]["count("+v+")"];u[e]["avg("+v+")"]=b/_,y&&(a.count!==v?delete u[e]["count("+v+")"]:-1===a.count.indexOf(v)&&delete u[e]["count("+v+")"]),g&&(a.sum!==v?delete u[e]["sum("+v+")"]:-1===a.sum.indexOf(v)&&delete u[e]["sum("+v+")"])}}this.results=u},t}(o.Where)},function(e,t,n){"use strict";n.r(t),n.d(t,"Where",function(){return s});var r,o=n(33),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeSkipAndLimitForWhere_=function(){var e,t=this,n=!1;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?n&&t.results.length!==t.limitRecord?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):(n=!0,e.advance(t.skipRecord)):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?n&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):(n=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSkipForWhere_=function(){var e,t=this,n=!1;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?n?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):(n=!0,e.advance(t.skipRecord)):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?n?(t.results.push(e.value),e.continue()):(n=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeLimitForWhere_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)&&t.results.length!==t.limitRecord&&t.whereCheckerInstance.check(e.value)?(t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSimpleForWhere_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?(t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeWhereLogic=function(e,t,n,r){var o=this;t=n?t[n]:t,this.cursorOpenRequest=this.objectStore.index(e).openCursor(this.getKeyRange(t,n),r),this.cursorOpenRequest.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForWhere_():this.skipRecord?this.executeSkipForWhere_():this.limitRecord?this.executeLimitForWhere_():this.executeSimpleForWhere_()},t}(o.Like)},function(e,t,n){"use strict";n.r(t),n.d(t,"Like",function(){return s});var r,o=n(34),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,n){this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=n,this.cursorOpenRequest=this.objectStore.index(e).openCursor(),this.cursorOpenRequest.onerror=this.onCursorError,this.skipRecord&&this.limitRecord?this.executeSkipAndLimit_():this.skipRecord?this.executeSkip_():this.limitRecord?this.executeLimit_():this.executeSimple_()},t.prototype.executeSkipAndLimit_=function(){var e,t=this,n=function(e){0===r?t.results.push(e):--r},r=this.skipRecord;this.checkFlag?this.cursorOpenRequest.onsuccess=function(r){e=r.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&n(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(r){e=r.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&n(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSkip_=function(){var e,t=this,n=this.skipRecord,r=function(e){0===n?t.results.push(e):--n};this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&r(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?(t.filterOnOccurence(e.key)&&r(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeLimit_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){e=n.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){e=n.target.result,t.results.length!==t.limitRecord&&e?(t.filterOnOccurence(e.key)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}},t.prototype.executeSimple_=function(){var e,t=this;this.checkFlag?this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?(t.filterOnOccurence(e.key)&&t.whereCheckerInstance.check(e.value)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}:this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)?(t.filterOnOccurence(e.key)&&t.results.push(e.value),e.continue()):t.onQueryFinished()}},t}(o.In)},function(e,t,n){"use strict";n.r(t),n.d(t,"In",function(){return s});var r,o=n(35),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForIn_(e,t):this.skipRecord?this.executeSkipForIn_(e,t):this.limitRecord?this.executeLimitForIn_(e,t):this.executeSimpleForIn_(e,t)},t.prototype.executeSkipAndLimitForIn_=function(e,t){var n,r,o=this,i=this.skipRecord,s=this.objectStore.index(e),u=function(e){0===i?o.results.push(e):--i},c=t.length,a=0,l=function(){++a===c&&o.onQueryFinished()};if(this.checkFlag)for(var f=0;f<c;f++)this.errorOccured||((r=s.openCursor(IDBKeyRange.only(t[f]))).onsuccess=function(e){n=e.target.result,o.results.length!==o.limitRecord&&n?(o.whereCheckerInstance.check(n.value)&&u(n.value),n.continue()):l()},r.onerror=this.onCursorError);else for(f=0;f<c;f++)this.errorOccured||((r=s.openCursor(IDBKeyRange.only(t[f]))).onsuccess=function(e){n=e.target.result,o.results.length!==o.limitRecord&&n?(u(n.value),n.continue()):l()},r.onerror=this.onCursorError)},t.prototype.executeSkipForIn_=function(e,t){var n,r,o=this,i=this.skipRecord,s=this.objectStore.index(e),u=function(e){0===i?o.results.push(e):--i},c=t.length,a=0,l=function(){++a===c&&o.onQueryFinished()};if(this.checkFlag)for(var f=0;f<c;f++)this.errorOccured||((r=s.openCursor(IDBKeyRange.only(t[f]))).onsuccess=function(e){(n=e.target.result)?(o.whereCheckerInstance.check(n.value)&&u(n.value),n.continue()):l()},r.onerror=this.onCursorError);else for(f=0;f<c;f++)this.errorOccured||((r=s.openCursor(IDBKeyRange.only(t[f]))).onsuccess=function(e){(n=e.target.result)?(u(n.value),n.continue()):l()},r.onerror=this.onCursorError)},t.prototype.executeLimitForIn_=function(e,t){var n,r,o=this,i=this.objectStore.index(e),s=t.length,u=0,c=function(){++u===s&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<s;a++)this.errorOccured||((r=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(n=e.target.result)&&o.results.length!==o.limitRecord?(o.whereCheckerInstance.check(n.value)&&o.results.push(n.value),n.continue()):c()},r.onerror=this.onCursorError);else for(a=0;a<s;a++)this.errorOccured||((r=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(n=e.target.result)&&o.results.length!==o.limitRecord?(o.results.push(n.value),n.continue()):c()},r.onerror=this.onCursorError)},t.prototype.executeSimpleForIn_=function(e,t){var n,r,o=this,i=this.objectStore.index(e),s=t.length,u=0,c=function(){++u===s&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<s;a++)this.errorOccured||((r=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(n=e.target.result)?(o.whereCheckerInstance.check(n.value)&&o.results.push(n.value),n.continue()):c()},r.onerror=this.onCursorError);else for(a=0;a<s;a++)this.errorOccured||((r=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(n=e.target.result)?(o.results.push(n.value),n.continue()):c()},r.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,n){"use strict";n.r(t),n.d(t,"NotWhere",function(){return c});var r,o=n(36),i=n(18),s=n(3),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return u(t,e),t.prototype.executeWhereUndefinedLogic=function(){if(this.query.order&&this.query.order.by)if(this.objectStore.indexNames.contains(this.query.order.by)){var e=this.query.order.type&&"desc"===this.query.order.type.toLowerCase()?"prev":"next";this.sorted=!0,this.cursorOpenRequest=this.objectStore.index(this.query.order.by).openCursor(null,e)}else{new i.LogHelper(s.ERROR_TYPE.ColumnNotExist,{ColumnName:this.query.order.by}).throw()}else this.cursorOpenRequest=this.objectStore.openCursor();this.skipRecord&&this.limitRecord?this.executeSkipAndLimitForNoWhere_():this.skipRecord?this.executeSkipForNoWhere_():this.limitRecord?this.executeLimitForNotWhere_():this.executeSimpleForNotWhere_(),this.cursorOpenRequest.onerror=function(e){this._errorOccured=!0,this.onErrorOccured(e)}.bind(this)},t.prototype.executeSkipAndLimitForNoWhere_=function(){var e,t=this,n=!1;this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?n&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):(n=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSkipForNoWhere_=function(){var e,t=this,n=!1;this.cursorOpenRequest.onsuccess=function(r){(e=r.target.result)?n?(t.results.push(e.value),e.continue()):(n=!0,e.advance(t.skipRecord)):t.onQueryFinished()}},t.prototype.executeSimpleForNotWhere_=function(){var e;this.cursorOpenRequest.onsuccess=function(t){(e=t.target.result)?(this.results.push(e.value),e.continue()):this.onQueryFinished()}.bind(this)},t.prototype.executeLimitForNotWhere_=function(){var e,t=this;this.cursorOpenRequest.onsuccess=function(n){(e=n.target.result)&&t.results.length!==t.limitRecord?(t.results.push(e.value),e.continue()):t.onQueryFinished()}},t}(o.BaseSelect)},function(e,t,n){"use strict";n.r(t),n.d(t,"BaseSelect",function(){return s});var r,o=n(37),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.results=[],t.sorted=!1,t}return i(t,e),t.prototype.removeDuplicates=function(){var e=this.results;this.results=void 0;var t=this.getPrimaryKey(this.query.from),n={};for(var r in e)n[e[r][t]]=e[r];for(var r in e=[],n)e.push(n[r]);this.results=e},t.prototype.onQueryFinished=function(){},t}(o.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"Base",function(){return a});var r,o=n(38),i=n(40),s=n(18),u=n(3),c=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.errorOccured=!1,t.errorCount=0,t.rowAffected=0,t.checkFlag=!1,t.onCursorError=function(e){t.errorOccured=!0,t.onErrorOccured(e)},t.goToWhereLogic=function(){var e=this,t=this.getObjectFirstKey(this.query.where);if(!0===this.query.ignoreCase&&(this.query.where=this.makeQryInCaseSensitive(this.query.where)),this.objectStore.indexNames.contains(t)){var n=this.query.where[t];if("object"==typeof n){this.checkFlag=Boolean(Object.keys(n).length>1||Object.keys(this.query.where).length>1),!0===this.checkFlag&&(this.whereCheckerInstance=new i.WhereChecker(this.query.where));var r=this.getObjectFirstKey(n);switch(r){case u.QUERY_OPTION.Like:var o=n[u.QUERY_OPTION.Like].split("%"),c=void 0,a=void 0;o[1]?(c=o[1],a=o.length>2?u.OCCURENCE.Any:u.OCCURENCE.Last):(c=o[0],a=u.OCCURENCE.First),a===u.OCCURENCE.First?(this.getAllCombinationOfWord(c).forEach(function(n){e.executeWhereLogic(t,{"-":{low:n,high:n+"￿"}},"-")}),delete this.query.where[t][u.QUERY_OPTION.Like]):this.executeLikeLogic(t,c,a);break;case u.QUERY_OPTION.In:this.executeInLogic(t,n[u.QUERY_OPTION.In]);break;case u.QUERY_OPTION.Between:case u.QUERY_OPTION.GreaterThan:case u.QUERY_OPTION.LessThan:case u.QUERY_OPTION.GreaterThanEqualTo:case u.QUERY_OPTION.LessThanEqualTo:this.executeWhereLogic(t,n,r);break;case u.QUERY_OPTION.Aggregate:break;default:this.executeWhereLogic(t,n)}}else this.checkFlag=Boolean(Object.keys(this.query.where).length>1),!0===this.checkFlag&&(this.whereCheckerInstance=new i.WhereChecker(this.query.where)),this.executeWhereLogic(t,n)}else{this.errorOccured=!0;var l=null==this.getColumnInfo(t)?new s.LogHelper(u.ERROR_TYPE.ColumnNotExist,{ColumnName:t}):new s.LogHelper(u.ERROR_TYPE.EnableSearchOff,{ColumnName:t});this.onErrorOccured(l,!0)}},t}return c(t,e),t.prototype.onErrorOccured=function(e,t){if(void 0===t&&(t=!1),++this.errorCount,1===this.errorCount)if(t)e.logError(),this.onError(e.get());else{var n=void 0;e.name?(n=new s.LogHelper(e.name)).message=e.message:(n=new s.LogHelper(e.target.error.name)).message=e.target.error.message,n.logError(),this.onError(n.get())}},t.prototype.onExceptionOccured=function(e,t){switch(e.name){case"NotFoundError":var n=new s.LogHelper(u.ERROR_TYPE.TableNotExist,t);this.onErrorOccured(n,!0);break;default:console.error(e)}},t.prototype.getColumnInfo=function(e){var t;return this.getTable(this.tableName).columns.every(function(n){return n.name!==e||(t=n,!1)}),t},t.prototype.makeQryInCaseSensitive=function(e){var t,n,r=[];for(var o in e)switch(t=e[o],this.getType(t)){case u.DATA_TYPE.String:r=r.concat(this.getAllCombinationOfWord(t)),e[o]={},e[o][u.QUERY_OPTION.In]=r;break;case u.DATA_TYPE.Object:for(var i in t)if(n=t[i],this.isString(n))switch(i){case u.QUERY_OPTION.In:r=r.concat(this.getAllCombinationOfWord(n,!0));break;case u.QUERY_OPTION.Like:break;default:r=r.concat(this.getAllCombinationOfWord(n))}e[o][u.QUERY_OPTION.In]=r}return e},t}(o.BaseHelper)},function(e,t,n){"use strict";n.r(t),n.d(t,"BaseHelper",function(){return s});var r=n(3),o=n(2),i=n(39),s=function(){function e(){}return Object.defineProperty(e.prototype,"activeDb",{get:function(){return o.IdbHelper.activeDb},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"dbConnection",{get:function(){return o.IdbHelper.dbConnection},enumerable:!0,configurable:!0}),e.prototype.getObjectFirstKey=function(e){return i.Util.getObjectFirstKey(e)},e.prototype.isNull=function(e){return i.Util.isNull(e)},e.prototype.getType=function(e){return i.Util.getType(e)},e.prototype.isObject=function(e){return i.Util.isObject(e)},e.prototype.isString=function(e){return i.Util.isString(e)},e.prototype.isArray=function(e){return i.Util.isArray(e)},Object.defineProperty(e.prototype,"transaction",{get:function(){return o.IdbHelper.transaction},enumerable:!0,configurable:!0}),e.prototype.createTransaction=function(e,t,n){o.IdbHelper.createTransaction(e,t,n)},e.prototype.filterOnOccurence=function(e){var t=!1;switch(e=e.toLowerCase(),this.compSymbol){case r.OCCURENCE.Any:e.indexOf(this.compValue)>=0&&(t=!0);break;case r.OCCURENCE.First:0===e.indexOf(this.compValue)&&(t=!0);break;case r.OCCURENCE.Last:e.lastIndexOf(this.compValue)===e.length-this.compValueLength&&(t=!0);break;default:e!==this.compValue&&(t=!0)}return t},e.prototype.isTableExist=function(e){return this.activeDb.tables.findIndex(function(t){return t.name===e})>=0},e.prototype.getTable=function(e){return o.IdbHelper.getTable(e)},e.prototype.getKeyRange=function(e,t){var n;switch(t){case r.QUERY_OPTION.Between:n=IDBKeyRange.bound(e.low,e.high,!1,!1);break;case r.QUERY_OPTION.GreaterThan:n=IDBKeyRange.lowerBound(e,!0);break;case r.QUERY_OPTION.GreaterThanEqualTo:n=IDBKeyRange.lowerBound(e);break;case r.QUERY_OPTION.LessThan:n=IDBKeyRange.upperBound(e,!0);break;case r.QUERY_OPTION.LessThanEqualTo:n=IDBKeyRange.upperBound(e);break;default:n=IDBKeyRange.only(e)}return n},e.prototype.getPrimaryKey=function(e){var t=this.getTable(e).primaryKey;return t||this.getKeyPath(e)},e.prototype.getKeyPath=function(e){return this.dbConnection.transaction([e],"readonly").objectStore(e).keyPath},e.prototype.getAllCombinationOfWord=function(e,t){if(t){for(var n=[],r=0,o=e.length;r<o;r++)n=n.concat(this.getCombination_(e[r]));return n}return this.getCombination_(e)},e.prototype.getCombination_=function(e){var t=[],n=function(e,r,o){if(o===e.length)t.push(r.join(""));else{var i=e.charAt(o);r[o]=i.toLowerCase(),n(e,r,o+1),r[o]=i.toUpperCase(),n(e,r,o+1)}};return n(e,[],0),t},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Util",function(){return o});var r=n(3),o=function(){function e(){}return e.isNull=function(e){if(null==e)return!0;switch(typeof e){case"string":return 0===e.length;case"number":return isNaN(e)}return!1},e.isString=function(e){return typeof e===r.DATA_TYPE.String},e.isArray=function(e){return Array.isArray(e)},e.isObject=function(e){return typeof e===r.DATA_TYPE.Object},e.getObjectFirstKey=function(e){for(var t in e)return t;return null},e.getType=function(e){if(null==e)return r.DATA_TYPE.Null;var t=typeof e;switch(t){case"object":if(Array.isArray(e))return r.DATA_TYPE.Array;if(e.getDate&&e.getTime)return r.DATA_TYPE.DateTime;default:return t}},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"WhereChecker",function(){return o});var r=n(3),o=function(){function e(e){this.where=e}return e.prototype.check=function(e){var t;for(var n in this.status=!0,this.where){if(!this.status)break;if("object"==typeof(t=this.where[n]))for(var o in t){if(!this.status)break;switch(o){case r.QUERY_OPTION.In:this.checkIn(n,e[n]);break;case r.QUERY_OPTION.Like:this.checkLike(n,e[n]);break;case r.QUERY_OPTION.Between:case r.QUERY_OPTION.GreaterThan:case r.QUERY_OPTION.LessThan:case r.QUERY_OPTION.GreaterThanEqualTo:case r.QUERY_OPTION.LessThanEqualTo:case r.QUERY_OPTION.NotEqualTo:this.checkComparisionOp(n,e[n],o)}}else if(t!==e[n]){this.status=!1;break}}return this.status},e.prototype.checkIn=function(e,t){for(var n=0,o=this.where[e][r.QUERY_OPTION.In],i=o.length;n<i;n++){if(o[n]===t){this.status=!0;break}this.status=!1}},e.prototype.checkLike=function(e,t){var n,o,i,s=this.where[e][r.QUERY_OPTION.Like].split("%");switch(s[1]?(o=s[1],n=s.length>2?r.OCCURENCE.Any:r.OCCURENCE.Last):(o=s[0],n=r.OCCURENCE.First),t=t.toLowerCase(),n){case r.OCCURENCE.Any:(i=t.indexOf(o.toLowerCase()))<0&&(this.status=!1);break;case r.OCCURENCE.First:((i=t.indexOf(o.toLowerCase()))>0||i<0)&&(this.status=!1);break;default:(i=t.lastIndexOf(o.toLowerCase()))<t.length-o.length&&(this.status=!1)}},e.prototype.checkComparisionOp=function(e,t,n){var o=this.where[e][n];switch(n){case r.QUERY_OPTION.GreaterThan:t<=o&&(this.status=!1);break;case r.QUERY_OPTION.LessThan:t>=o&&(this.status=!1);break;case r.QUERY_OPTION.LessThanEqualTo:t>o&&(this.status=!1);break;case r.QUERY_OPTION.GreaterThanEqualTo:t<o&&(this.status=!1);break;case r.QUERY_OPTION.Between:(t<o.Low||t>o.High)&&(this.status=!1);break;case r.QUERY_OPTION.NotEqualTo:t===o&&(this.status=!1)}},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Join",function(){return c});var r,o=n(36),i=n(29),s=n(3),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var o=e.call(this)||this;o.queryStack=[],o.currentQueryStackIndex=0,o.onSuccess=n,o.onError=r,o.query=t;var s=[],u=function(e){return void 0!==e.table1?(e.table2.joinType=void 0===e.join?"inner":e.join.toLowerCase(),o.queryStack.push(e.table2),o.queryStack.length%2==0&&(o.queryStack[o.queryStack.length-1].nextJoin=e.nextJoin),s.push(e.table2.table),u(e.table1)):(o.queryStack.push(e),void s.push(e.table))};(u(t.from),o.queryStack.reverse(),o.errorOccured)||new i.Instance({from:o.queryStack[0].table,where:o.queryStack[0].where},function(e){var t=o.queryStack[0].table;e.forEach(function(e,n){o.results[n]={},o.results[n][t]=e}),o.startExecutionJoinLogic_()},o.onErrorOccured).execute();return o}return u(t,e),t.prototype.onTransactionCompleted_=function(e){null!=this.onSuccess&&this.queryStack.length===this.currentQueryStackIndex+1&&(this.query[s.QUERY_OPTION.Count]?this.onSuccess(this.results.length):(this.query[s.QUERY_OPTION.Skip]&&this.query[s.QUERY_OPTION.Limit]?(this.results.splice(0,this.query[s.QUERY_OPTION.Skip]),this.results.splice(this.query[s.QUERY_OPTION.Limit]-1,this.results.length)):this.query[s.QUERY_OPTION.Skip]?this.results.splice(0,this.query[s.QUERY_OPTION.Skip]):this.query[s.QUERY_OPTION.Limit]&&this.results.splice(this.query[s.QUERY_OPTION.Limit]-1,this.results.length),this.onSuccess(this.results)))},t.prototype.executeWhereJoinLogic_=function(e,t){var n,r=this,o=[],s=(t.column,this.results),u=s.length,c=0;new i.Instance({from:t.table,order:t.order,where:t.where},function(t){t.forEach(function(t,r){for(var o=0;o<u;o++)n=s[o][e.table][e.column],a(n,t,o)}),r.results=o,r.queryStack.length>r.currentQueryStackIndex+1?r.startExecutionJoinLogic_():r.onTransactionCompleted_(null)},this.onErrorOccured).execute();var a=function(e,n,i){if(o[c]={},e===n[t.column]){o[c][t.table]=n;for(var u=0;u<r.currentQueryStackIndex;u++)o[c][r.queryStack[u].table]=s[i][r.queryStack[u].table];++c}else if("left"===t.joinType){o[c]={},o[c][t.table]=null;for(u=0;u<r.currentQueryStackIndex;u++)o[c][r.queryStack[u].table]=s[i][r.queryStack[u].table];++c}}},t.prototype.executeRightJoin_=function(e,t){var n=this,r=[],o=(t.column,this.results),s=o.length,u=0;new i.Instance({from:t.table,order:t.order,where:t.where},function(i){!function(i){var c=!1;i.forEach(function(n,i){for(u=0;u<s;u++)if(n[t.column]===o[u][e.table][e.column]){c=!0;break}if(r[i]={},r[i][t.table]=n,c){c=!1;for(var a=0;a<this.currentQueryStackIndex;a++)r[i][this.queryStack[a].table]=o[u][this.queryStack[a].table]}else for(a=0;a<this.currentQueryStackIndex;a++)r[i][this.queryStack[a].table]=null},n)}(i),n.results=r,n.queryStack.length>n.currentQueryStackIndex+1?n.startExecutionJoinLogic_():n.onTransactionCompleted_(null)},n.onErrorOccured).execute()},t.prototype.executeWhereUndefinedLogicForJoin_=function(e,t){var n=this,r=[],o=(t.column,this.results),s={},u=o.length,c=0,a=0,l=function(){a<u?n.errorOccured||(s[t.column]=o[a][e.table][e.column],new i.Instance({from:t.table,order:t.order,where:s},function(e){!function(e){if(e.length>0)e.forEach(function(e){r[c]={},r[c][t.table]=e;for(var i=0;i<n.currentQueryStackIndex;i++)r[c][n.queryStack[i].table]=o[a][n.queryStack[i].table];++c});else if("left"===t.joinType){r[c]={},r[c][t.table]=null;for(var i=0;i<n.currentQueryStackIndex;i++)r[c][n.queryStack[i].table]=o[a][n.queryStack[i].table];++c}}(e),++a,l()},n.onErrorOccured.bind(n)).execute()):(n.results=r,n.queryStack.length>n.currentQueryStackIndex+1?n.startExecutionJoinLogic_():n.onTransactionCompleted_(null))};l()},t.prototype.startExecutionJoinLogic_=function(){var e;this.currentQueryStackIndex>=1&&this.currentQueryStackIndex%2==1?(e={column:this.queryStack[this.currentQueryStackIndex].nextJoin.column,table:this.queryStack[this.currentQueryStackIndex].nextJoin.table},this.currentQueryStackIndex++):e=this.queryStack[this.currentQueryStackIndex++];var t=this.queryStack[this.currentQueryStackIndex];"right"===t.joinType?this.executeRightJoin_(e,t):t.where?this.executeWhereJoinLogic_(e,t):this.executeWhereUndefinedLogicForJoin_(e,t)},t}(o.BaseSelect)},function(e,t,n){"use strict";n.r(t);var r=n(43);n.d(t,"Instance",function(){return r.Instance})},function(e,t,n){"use strict";n.r(t),n.d(t,"Instance",function(){return c});var r,o=n(44),i=n(28),s=n(3),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var o=e.call(this)||this;return o.onError=r,o.onSuccess=n,o.query=t,o}return u(t,e),t.prototype.execute=function(){var e=this;try{if(null!=this.query.where)if(this.query.where.or||this.isArray(this.query.where))new i.Instance(this.query,function(t){e.resultCount=t.length,e.onTransactionCompleted_()},this.onError).execute();else this.initTransaction_(),this.goToWhereLogic();else this.initTransaction_(),this.executeWhereUndefinedLogic()}catch(e){this.onExceptionOccured(e,{TableName:this.query.from})}},t.prototype.initTransaction_=function(){this.createTransaction([this.query.from],this.onTransactionCompleted_,s.IDB_MODE.ReadOnly),this.objectStore=this.transaction.objectStore(this.query.from)},t}(o.Where)},function(e,t,n){"use strict";n.r(t),n.d(t,"Where",function(){return s});var r,o=n(45),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereLogic=function(e,t,n){var r,o,i=this;t=n?t[n]:t,this.checkFlag?(r=this.objectStore.index(e).openCursor(this.getKeyRange(t,n))).onsuccess=function(e){(o=e.target.result)?(i.whereCheckerInstance.check(o.value)&&++i.resultCount,o.continue()):i.onQueryFinished()}:this.objectStore.count?(r=this.objectStore.index(e).count(this.getKeyRange(t,n))).onsuccess=function(){i.resultCount=r.result,i.onQueryFinished()}:(r=this.objectStore.index(e).openCursor(this.getKeyRange(t,n))).onsuccess=function(e){(o=e.target.result)?(++i.resultCount,o.continue()):i.onQueryFinished()},r.onerror=function(e){i.errorOccured=!0,i.onErrorOccured(e)}},t}(o.Like)},function(e,t,n){"use strict";n.r(t),n.d(t,"Like",function(){return s});var r,o=n(46),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,n){var r,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=n;var i=this.objectStore.index(e).openCursor();i.onerror=this.onCursorError,this.checkFlag?i.onsuccess=function(e){(r=e.target.result)?(o.filterOnOccurence(r.key)&&o.whereCheckerInstance.check(r.value)&&++o.resultCount,r.continue()):o.onQueryFinished()}:i.onsuccess=function(e){(r=e.target.result)?(o.filterOnOccurence(r.key)&&++o.resultCount,r.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,n){"use strict";n.r(t),n.d(t,"In",function(){return s});var r,o=n(47),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){var n,r,o=this,i=this.objectStore.index(e),s=t.length,u=0,c=function(){++u===s&&o.onQueryFinished()};if(this.checkFlag)for(var a=0;a<s;a++)this.errorOccured||((r=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(n=e.target.result)?(o.whereCheckerInstance.check(n.value)&&++o.resultCount,n.continue()):c()},r.onerror=this.onCursorError);else if(this.objectStore.count)for(a=0;a<s;a++)this.errorOccured||((r=i.count(IDBKeyRange.only(t[a]))).onsuccess=function(e){o.resultCount+=e.target.result,c()},r.onerror=this.onCursorError);else for(a=0;a<s;a++)this.errorOccured||((r=i.openCursor(IDBKeyRange.only(t[a]))).onsuccess=function(e){(n=e.target.result)?(++o.resultCount,n.continue()):c()},r.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,n){"use strict";n.r(t),n.d(t,"NotWhere",function(){return s});var r,o=n(48),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e=this;if(this.objectStore.count){var t=this.objectStore.count();t.onsuccess=function(){e.resultCount=t.result,e.onQueryFinished()},t.onerror=this.onCursorError}else{var n,r=this.objectStore.openCursor();r.onsuccess=function(e){(n=e.target.result)?(++this._resultCount,n.continue()):this.onQueryFinished()}.bind(this),r.onerror=this.onCursorError}},t}(o.BaseCount)},function(e,t,n){"use strict";n.r(t),n.d(t,"BaseCount",function(){return s});var r,o=n(37),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.resultCount=0,t.onTransactionCompleted_=function(){!1===t.errorOccured&&t.onSuccess(t.resultCount)},t}return i(t,e),t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t}(o.Base)},function(e,t,n){"use strict";n.r(t);var r=n(50);n.d(t,"Instance",function(){return r.Instance});var o=n(51);n.d(t,"ValuesChecker",function(){return o.ValuesChecker})},function(e,t,n){"use strict";n.r(t),n.d(t,"Instance",function(){return s});var r,o=n(37),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(t,n,r){var o=e.call(this)||this;return o._valuesAffected=[],o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.query.return?o._valuesAffected:o.rowAffected)},o.onError=r,o.query=t,o.onSuccess=n,o.tableName=o.query.into,o}return i(t,e),t.prototype.execute=function(){try{this.insertData(this.query.values)}catch(e){this.onExceptionOccured(e,{TableName:this.tableName})}},t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.insertData=function(e){var t,n=this,r=0;t=this.query.return?function(i){if(i){var s=o.add(i);s.onerror=n.onErrorOccured.bind(n),s.onsuccess=function(o){n._valuesAffected.push(i),t.call(n,e[r++])}}else n.onQueryFinished()}:function(i){if(i){var s=o.add(i);s.onerror=n.onErrorOccured.bind(n),s.onsuccess=function(o){++n.rowAffected,t.call(n,e[r++])}}else n.onQueryFinished()},this.createTransaction([this.query.into],this.onTransactionCompleted_);var o=this.transaction.objectStore(this.query.into);t(e[r++])},t}(o.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"ValuesChecker",function(){return s});var r=n(52),o=n(2),i=n(4),s=function(){function e(e,t){this.table=e,this.values=t}return e.prototype.checkAndModifyValues=function(e){var t=this;this.onFinish=e;var n={};this.table.columns.filter(function(e){return e.autoIncrement}).forEach(function(e){var r="JsStore_"+o.IdbHelper.activeDb.name+"_"+t.table.name+"_"+e.name+"_Value";i.get(r,function(t){n[e.name]=t})}),i.get("dumy_key",function(e){t.valueCheckerObj=new r.ValueChecker(t.table,n),t.startChecking()},function(e){t.error=e,t.onFinish(!0)})},e.prototype.startChecking=function(){var e=this,t=!1;if(this.values.every(function(n){return!(t=e.valueCheckerObj.checkAndModifyValue(n))}),t)this.error=this.valueCheckerObj.log.get(),this.onFinish(!0);else{for(var n=0,r=Object.keys(this.valueCheckerObj.autoIncrementValue);n<r.length;n++){var s=r[n],u="JsStore_"+o.IdbHelper.activeDb.name+"_"+this.table.name+"_"+s+"_Value";i.set(u,this.valueCheckerObj.autoIncrementValue[s])}i.get("dumy_key",function(t){e.onFinish(!1)},function(t){e.error=t,e.onFinish(!0)})}},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"ValueChecker",function(){return s});var r=n(39),o=n(3),i=n(18),s=function(){function e(e,t){this.errorOccured=!1,this.autoIncrementValue={},this.table=e,this.autoIncrementValue=t}return e.prototype.checkAndModifyValue=function(e){var t=this;return this.value=e,this.table.columns.every(function(e){return t.checkAndModifyColumnValue_(e),!t.errorOccured}),this.errorOccured},e.prototype.isNull_=function(e){return r.Util.isNull(e)},e.prototype.getType_=function(e){return r.Util.getType(e)},e.prototype.checkNotNullAndDataType_=function(e){e.notNull&&this.isNull_(this.value[e.name])?this.onValidationError_(o.ERROR_TYPE.NullValue,{ColumnName:e.name}):e.dataType&&!this.isNull_(this.value[e.name])&&this.getType_(this.value[e.name])!==e.dataType&&this.onValidationError_(o.ERROR_TYPE.BadDataType,{ColumnName:e.name})},e.prototype.checkAndModifyColumnValue_=function(e){e.autoIncrement?this.value[e.name]=++this.autoIncrementValue[e.name]:e.default&&this.isNull_(this.value[e.name])&&(this.value[e.name]=e.default),this.checkNotNullAndDataType_(e)},e.prototype.onValidationError_=function(e,t){this.errorOccured=!0,this.log=new i.LogHelper(e,t)},e}()},function(e,t,n){"use strict";n.r(t);var r=n(54);n.d(t,"Instance",function(){return r.Instance})},function(e,t,n){"use strict";n.r(t),n.d(t,"Instance",function(){return c});var r,o=n(55),i=n(28),s=n(3),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var o=e.call(this)||this;return o.onTransactionCompleted_=function(){!1===o.errorOccured&&o.onSuccess(o.rowAffected)},o.query=t,o.onSuccess=n,o.onError=r,o}return u(t,e),t.prototype.execute=function(){try{null!=this.query.where?(this.initTransaction_(),this.isArray(this.query.where)?this.processWhereArrayQry():this.processWhere_()):(this.initTransaction_(),this.executeWhereUndefinedLogic())}catch(e){this.errorOccured=!0,this.onExceptionOccured(e,{TableName:this.query.from})}},t.prototype.processWhereArrayQry=function(){var e=this;new i.Instance(this.query,function(t){var n=[],r=e.getPrimaryKey(e.query.from);t.forEach(function(e){n.push(e[r])}),t=null,e.query.where={},e.query.where[r]={},e.query.where[r][s.QUERY_OPTION.In]=n,e.processWhere_()},this.onError).execute()},t.prototype.processWhere_=function(){this.query.where.or&&this.processOrLogic(),this.goToWhereLogic()},t.prototype.initTransaction_=function(){this.createTransaction([this.query.from],this.onTransactionCompleted_),this.objectStore=this.transaction.objectStore(this.query.from)},t.prototype.onQueryFinished=function(){!0===this.isOr?this.orQuerySuccess_():!0===this.isTransaction&&this.onTransactionCompleted_()},t.prototype.orQuerySuccess_=function(){var e=this.getObjectFirstKey(this._orInfo.OrQuery);if(null!=e){var t={};t[e]=this._orInfo.OrQuery[e],delete this._orInfo.OrQuery[e],this.query.where=t,this.goToWhereLogic()}else this.isOr=!0},t.prototype.processOrLogic=function(){this.isOr=!0,this._orInfo={OrQuery:this.query.where.or},delete this.query.where.or},t}(o.Where)},function(e,t,n){"use strict";n.r(t),n.d(t,"Where",function(){return s});var r,o=n(56),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereLogic=function(e,t,n){var r,o,i=this;t=n?t[n]:t,o=this.objectStore.index(e).openCursor(this.getKeyRange(t,n)),this.checkFlag?o.onsuccess=function(e){(r=e.target.result)?(i.whereCheckerInstance.check(r.value)&&(r.delete(),++i.rowAffected),r.continue()):i.onQueryFinished()}:o.onsuccess=function(e){(r=e.target.result)?(r.delete(),++i.rowAffected,r.continue()):i.onQueryFinished()},o.onerror=function(e){i.errorOccured=!0,i.onErrorOccured(e)}},t}(o.Like)},function(e,t,n){"use strict";n.r(t),n.d(t,"Like",function(){return s});var r,o=n(57),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeLikeLogic=function(e,t,n){var r,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=n;var i=this.objectStore.index(e).openCursor();i.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.checkFlag?i.onsuccess=function(e){(r=e.target.result)?(o.filterOnOccurence(r.key)&&o.whereCheckerInstance.check(r.value)&&(r.delete(),++o.rowAffected),r.continue()):o.onQueryFinished()}:i.onsuccess=function(e){(r=e.target.result)?(o.filterOnOccurence(r.key)&&(r.delete(),++o.rowAffected),r.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,n){"use strict";n.r(t),n.d(t,"In",function(){return s});var r,o=n(58),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeInLogic=function(e,t){var n,r,o=this,i=t.length,s=0,u=function(){++s===i&&o.onQueryFinished()};if(this.checkFlag)for(var c=0;c<i;c++)this.errorOccured||((r=this.objectStore.index(e).openCursor(IDBKeyRange.only(t[c]))).onsuccess=function(e){(n=e.target.result)?(o.whereCheckerInstance.check(n.value)&&(n.delete(),++o.rowAffected),n.continue()):u()},r.onerror=this.onCursorError);else for(c=0;c<i;c++)this.errorOccured||((r=this.objectStore.index(e).openCursor(IDBKeyRange.only(t[c]))).onsuccess=function(e){(n=e.target.result)?(n.delete(),++o.rowAffected,n.continue()):u()},r.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,n){"use strict";n.r(t),n.d(t,"NotWhere",function(){return s});var r,o=n(59),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e,t=this,n=this.objectStore.openCursor();n.onsuccess=function(n){(e=n.target.result)?(e.delete(),++t.rowAffected,e.continue()):t.onQueryFinished()},n.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t}(o.BaseRemove)},function(e,t,n){"use strict";n.r(t),n.d(t,"BaseRemove",function(){return s});var r,o=n(37),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.onQueryFinished=function(){},t}(o.Base)},function(e,t,n){"use strict";n.r(t);var r=n(61);n.d(t,"Instance",function(){return r.Instance});var o=n(67);n.d(t,"SchemaChecker",function(){return o.SchemaChecker})},function(e,t,n){"use strict";n.r(t),n.d(t,"Instance",function(){return c});var r,o=n(62),i=n(28),s=n(3),u=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c=function(e){function t(t,n,r){var o=e.call(this)||this;return o.onSuccess=n,o.onError=r,o.query=t,o.tableName=o.query.in,o}return u(t,e),t.prototype.execute=function(){try{null!=this.query.where?this.query.where.or||Array.isArray(this.query.where)?this.executeComplexLogic_():(this.initTransaction(),this.goToWhereLogic()):(this.initTransaction(),this.executeWhereUndefinedLogic())}catch(e){this.errorOccured=!0,this.onExceptionOccured.call(this,e,{TableName:this.query.in})}},t.prototype.executeComplexLogic_=function(){var e=this;new i.Instance({from:this.query.in,where:this.query.where,ignoreCase:this.query.ignoreCase},function(t){var n,r=e.getPrimaryKey(e.query.in),o=[],i={};t.forEach(function(e){o.push(e[r])}),t=null,i[r]=((n={})[s.QUERY_OPTION.In]=o,n),e.query[s.QUERY_OPTION.Where]=i,e.initTransaction(),e.goToWhereLogic()},this.onError).execute()},t}(o.Where)},function(e,t,n){"use strict";n.r(t),n.d(t,"Where",function(){return u});var r,o=n(63),i=n(64),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.executeWhereLogic=function(e,t,n){var r,i,s=this;t=n?t[n]:t,i=this.objectStore.index(e).openCursor(this.getKeyRange(t,n)),this.checkFlag?i.onsuccess=function(e){(r=e.target.result)?(s.whereCheckerInstance.check(r.value)&&(r.update(Object(o.updateValue)(s.query.set,r.value)),++s.rowAffected),r.continue()):s.onQueryFinished()}:i.onsuccess=function(e){(r=e.target.result)?(r.update(Object(o.updateValue)(s.query.set,r.value)),++s.rowAffected,r.continue()):s.onQueryFinished()},i.onerror=function(e){s.errorOccured=!0,s.onErrorOccured(e)}},t}(i.Like)},function(e,t,n){"use strict";n.r(t),n.d(t,"updateValue",function(){return u}),n.d(t,"BaseUpdate",function(){return c});var r,o=n(37),i=n(3),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e,t){for(var n in e)if(typeof e[n]!==i.DATA_TYPE.Object)t[n]=e[n];else for(var r in e[n]){switch(r){case"+":t[n]+=e[n][r];break;case"-":t[n]-=e[n][r];break;case"*":t[n]*=e[n][r];break;case"/":t[n]/=e[n][r];break;default:t[n]=e[n]}break}return t},c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.onTransactionCompleted_=function(){!1===t.errorOccured&&t.onSuccess(t.rowAffected)},t}return s(t,e),t.prototype.initTransaction=function(){this.createTransaction([this.query.in],this.onTransactionCompleted_),this.objectStore=this.transaction.objectStore(this.query.in)},t.prototype.onQueryFinished=function(){!0===this.isTransaction&&this.onTransactionCompleted_()},t}(o.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"Like",function(){return u});var r,o=n(65),i=n(63),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.executeLikeLogic=function(e,t,n){var r,o=this;this.compValue=t.toLowerCase(),this.compValueLength=this.compValue.length,this.compSymbol=n;var s=this.objectStore.index(e).openCursor();s.onerror=function(e){o.errorOccured=!0,o.onErrorOccured(e)},this.checkFlag?s.onsuccess=function(e){(r=e.target.result)?(o.filterOnOccurence(r.key)&&o.whereCheckerInstance.check(r.value)&&(r.update(Object(i.updateValue)(o.query.set,r.value)),++o.rowAffected),r.continue()):o.onQueryFinished()}:s.onsuccess=function(e){(r=e.target.result)?(o.filterOnOccurence(r.key)&&(r.update(Object(i.updateValue)(o.query.set,r.value)),++o.rowAffected),r.continue()):o.onQueryFinished()}},t}(o.In)},function(e,t,n){"use strict";n.r(t),n.d(t,"In",function(){return u});var r,o=n(66),i=n(63),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.executeInLogic=function(e,t){var n,r,o=this,s=this.objectStore.index(e),u=t.length,c=0,a=function(){++c===u&&o.onQueryFinished()};if(this.checkFlag)for(var l=0;l<u;l++)this.errorOccured||((r=s.openCursor(IDBKeyRange.only(t[l]))).onsuccess=function(e){(n=e.target.result)?(o.whereCheckerInstance.check(n.value)&&(n.update(Object(i.updateValue)(o.query.set,n.value)),++o.rowAffected),n.continue()):a()},r.onerror=this.onCursorError);else for(l=0;l<u;l++)this.errorOccured||((r=s.openCursor(IDBKeyRange.only(t[l]))).onsuccess=function(e){(n=e.target.result)?(n.update(Object(i.updateValue)(o.query.set,n.value)),++o.rowAffected,n.continue()):a()},r.onerror=this.onCursorError)},t}(o.NotWhere)},function(e,t,n){"use strict";n.r(t),n.d(t,"NotWhere",function(){return s});var r,o=n(63),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.executeWhereUndefinedLogic=function(){var e,t=this,n=this.objectStore.openCursor();n.onsuccess=function(n){(e=n.target.result)?(e.update(Object(o.updateValue)(t.query.set,e.value)),++t.rowAffected,e.continue()):t.onQueryFinished()},n.onerror=function(e){t.errorOccured=!0,t.onErrorOccured(e)}},t}(o.BaseUpdate)},function(e,t,n){"use strict";n.r(t),n.d(t,"SchemaChecker",function(){return s});var r=n(18),o=n(3),i=n(39),s=function(){function e(e){this.table=e}return e.prototype.check=function(e,t){var n=this,i=null;return typeof e===o.DATA_TYPE.Object?this.table?this.table.columns.every(function(t){return null===i&&(t.name in e&&(i=n.checkByColumn_(t,e[t.name])),!0)}):i=new r.LogHelper(o.ERROR_TYPE.TableNotExist,{TableName:t}):i=new r.LogHelper(o.ERROR_TYPE.NotObject),null!=i?i.get():null},e.prototype.isNull_=function(e){return i.Util.isNull(e)},e.prototype.getType_=function(e){return i.Util.getType(e)},e.prototype.checkByColumn_=function(e,t){var n=null;e.notNull&&this.isNull_(t)&&(n=new r.LogHelper(o.ERROR_TYPE.NullValue,{ColumnName:e.name}));var i=this.getType_(t);if(e.dataType&&i!==e.dataType&&"object"!==i&&(n=new r.LogHelper(o.ERROR_TYPE.BadDataType,{ColumnName:e.name})),"object"===i)for(var s=["+","-","*","/"],u=0,c=Object.keys(t);u<c.length;u++){var a=c[u];s.indexOf(a)<0&&e.dataType&&i!==e.dataType&&(n=new r.LogHelper(o.ERROR_TYPE.BadDataType,{ColumnName:e.name}));break}return n},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"Clear",function(){return u});var r,o=n(37),i=n(4),s=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(t,n,r){var o=e.call(this)||this;return o.query=t,o.onSuccess=n,o.onError=r,o}return s(t,e),t.prototype.execute=function(){var e=this;this.createTransaction([this.query],function(){!1===e.errorOccured&&e.onSuccess()});var t=this.transaction.objectStore(this.query).clear();t.onsuccess=function(t){e.getTable(e.query).columns.forEach(function(t){t.autoIncrement&&i.set("JsStore_"+e.activeDb.name+"_"+e.query+"_"+t.name+"_Value",0)})},t.onerror=function(t){e.errorOccured=!0,e.onErrorOccured(t)}},t}(o.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"BulkInsert",function(){return s});var r,o=n(37),i=(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),s=function(e){function t(t,n,r){var o=e.call(this)||this;return o.query=t,o.onSuccess=n,o.onError=r,o}return i(t,e),t.prototype.execute=function(){try{this.bulkinsertData(this.query.values),this.query.values=null}catch(e){this.onExceptionOccured(e,{TableName:this.query.into})}},t.prototype.bulkinsertData=function(e){var t=this;this.createTransaction([this.query.into],function(){t.onSuccess()}),this.objectStore=this.transaction.objectStore(this.query.into);for(var n=0,r=e.length;n<r;n++)this.objectStore.add(e[n])},t}(o.Base)},function(e,t,n){"use strict";n.r(t);var r=n(71);n.d(t,"Instance",function(){return r.Instance})},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Instance",function(){return Instance});var _base__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(37),_select_index__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(28),_count_index__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(42),_insert_index__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(49),_remove_index__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(53),_update_index__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(60),_enums__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(3),_query_helper__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(72),__extends=(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),extendStatics,Instance=function(_super){function Instance(e,t,n){var r=_super.call(this)||this;return r.requestQueue=[],r.isQueryExecuting=!1,r.isTransactionStarted=!1,r.query=e,r.onError=n,r.onSuccess=t,r.results={},r}return __extends(Instance,_super),Instance.prototype.execute=function(){var _this=this,select=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Select,query:e})},insert=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Insert,query:e})},update=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Update,query:e})},remove=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Remove,query:e})},count=function(e){return _this.pushRequest({name:_enums__WEBPACK_IMPORTED_MODULE_6__.API.Count,query:e})},setResult=function(e,t){_this.results[e]=t},abort=function(){_this.abortTransaction()},txLogic=null;eval("txLogic ="+this.query.logic),txLogic.call(this,this.query.data),this.checkQueries().then(function(){_this.startTransaction_()}).catch(function(e){_this.onError(e)})},Instance.prototype.startTransaction_=function(){try{this.isTransactionStarted=!0,this.initTransaction_(this.query.tables),this.processExecutionOfQry()}catch(e){this.onErrorOccured(e,!1)}},Instance.prototype.initTransaction_=function(e){this.createTransaction(e,this.onTransactionCompleted_.bind(this))},Instance.prototype.onTransactionCompleted_=function(){this.onSuccess(this.results)},Instance.prototype.onRequestFinished_=function(e){var t=this.requestQueue.shift();t&&(this.errorOccured?this.abortTransaction():(this.isQueryExecuting=!1,t.onSuccess&&t.onSuccess(e),this.processExecutionOfQry()))},Instance.prototype.abortTransaction=function(){null!=this.transaction&&this.transaction.abort()},Instance.prototype.executeRequest=function(e){var t;switch(this.isQueryExecuting=!0,e.name){case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Select:t=new _select_index__WEBPACK_IMPORTED_MODULE_1__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Insert:t=new _insert_index__WEBPACK_IMPORTED_MODULE_3__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Update:t=new _update_index__WEBPACK_IMPORTED_MODULE_5__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Remove:t=new _remove_index__WEBPACK_IMPORTED_MODULE_4__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this));break;case _enums__WEBPACK_IMPORTED_MODULE_6__.API.Count:t=new _count_index__WEBPACK_IMPORTED_MODULE_2__.Instance(e.query,this.onRequestFinished_.bind(this),this.onError.bind(this))}t.isTransaction=!0,t.execute()},Instance.prototype.pushRequest=function(e){return this.requestQueue.push(e),this.processExecutionOfQry(),new Promise(function(t,n){e.onSuccess=function(e){t(e)},e.onError=function(e){n(e)}})},Instance.prototype.processExecutionOfQry=function(){this.requestQueue.length>0&&!1===this.isQueryExecuting&&!0===this.isTransactionStarted&&this.executeRequest(this.requestQueue[0])},Instance.prototype.checkQueries=function(){var e=this,t=0;return new Promise(function(n,r){var o=function(){if(t<e.requestQueue.length){var i=e.requestQueue[t++];new _query_helper__WEBPACK_IMPORTED_MODULE_7__.QueryHelper(i.name,i.query).checkAndModify().then(function(){o()}).catch(function(e){r(e)})}else n()};o()})},Instance}(_base__WEBPACK_IMPORTED_MODULE_0__.Base)},function(e,t,n){"use strict";n.r(t),n.d(t,"QueryHelper",function(){return a});var r=n(3),o=n(2),i=n(18),s=n(39),u=n(60),c=n(49),a=function(){function e(e,t){this.api=e,this.query=t}return e.prototype.checkAndModify=function(){var e=this;return new Promise(function(t,n){var o=function(){null==e.error?t():n(e.error)};switch(e.api){case r.API.Select:case r.API.Remove:case r.API.Count:e.checkFetchQuery_(),o();break;case r.API.Insert:e.checkInsertQuery_(function(){o()});break;case r.API.Update:e.checkUpdateQuery_(),o();break;case r.API.BulkInsert:e.checkBulkInsert_();break;default:throw new Error("invalid api")}})},e.prototype.isInsertQryValid_=function(){var e,t=this.getTable_(this.query.into);if(t)switch(this.getType_(this.query.values)){case r.DATA_TYPE.Array:break;case r.DATA_TYPE.Null:e=new i.LogHelper(r.ERROR_TYPE.NoValueSupplied);break;default:e=new i.LogHelper(r.ERROR_TYPE.NotArray)}else e=new i.LogHelper(r.ERROR_TYPE.TableNotExist,{TableName:this.query.into});return null!=e&&(this.error=e.get()),t},e.prototype.checkBulkInsert_=function(){this.isInsertQryValid_()},e.prototype.checkInsertQuery_=function(e){var t=this,n=this.isInsertQryValid_();if(null==this.error)if(this.query.skipDataCheck)e();else{var r=new c.ValuesChecker(n,this.query.values);r.checkAndModifyValues(function(n){n?(t.error=r.error,e()):(t.query.values=r.values,e())})}else e()},e.prototype.checkUpdateQuery_=function(){this.error=new u.SchemaChecker(this.getTable_(this.query.in)).check(this.query.set,this.query.in),null==this.error&&this.addGreatAndLessToNotOp_()},e.prototype.checkFetchQuery_=function(){!0===this.isTableExist_(this.query.from)?null!=this.query.where&&this.addGreatAndLessToNotOp_():this.error=new i.LogHelper(r.ERROR_TYPE.TableNotExist,{TableName:this.query.from}).get()},e.prototype.isTableExist_=function(e){return this.activeDb_.tables.findIndex(function(t){return t.name===e})>=0},Object.defineProperty(e.prototype,"activeDb_",{get:function(){return o.IdbHelper.activeDb},enumerable:!0,configurable:!0}),e.prototype.getTable_=function(e){return o.IdbHelper.getTable(e)},e.prototype.addGreatAndLessToNotOp_=function(){var e=this.query.where,t=function(e,t){return t.findIndex(function(t){return null!=e[t][r.QUERY_OPTION.NotEqualTo]})>=0},n=function(e,t){var n;return t.forEach(function(t){null!=(n=e[t])[r.QUERY_OPTION.NotEqualTo]&&(e[t][r.QUERY_OPTION.GreaterThan]=n[r.QUERY_OPTION.NotEqualTo],void 0===e[r.QUERY_OPTION.Or]?(e[r.QUERY_OPTION.Or]={},e[r.QUERY_OPTION.Or][t]={}):void 0===e[r.QUERY_OPTION.Or][t]&&(e[r.QUERY_OPTION.Or][t]={}),e[r.QUERY_OPTION.Or][t][r.QUERY_OPTION.LessThan]=n[r.QUERY_OPTION.NotEqualTo],delete e[t][r.QUERY_OPTION.NotEqualTo])}),e};switch(this.getType_(e)){case r.DATA_TYPE.Object:var o=Object.keys(e);if(t(e,o))if(1===o.length)this.query.where=n(e,o);else{var i=[];o.forEach(function(t){var r;i.push(n(((r={})[t]=e[t],r),[t]))}),this.query.where=i}break;default:var s=[];e.forEach(function(e){var r=Object.keys(e);t(e,r)&&(e=n(e,r)),s.push(e)}),this.query.where=s}},e.prototype.getType_=function(e){return s.Util.getType(e)},e.prototype.isArray_=function(e){return s.Util.isArray(e)},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"initialize",function(){return u});var r=n(4),o=n(18),i=n(1),s=n(19),u=function(){void 0===self.alert&&"undefined"==typeof ServiceWorkerGlobalScope&&(s.Config.isRuningInWorker=!0,self.onmessage=function(e){var t;t="Request executing from WebWorker, request name: "+e.data.name,o.LogHelper.log(t),(new i.QueryExecutor).checkConnectionAndExecuteLogic(e.data)})};u(),r.init()}])},function(e,t,n){"use strict";n.r(t);n(5);var r=n(1),o=n(2),i=n(0);window.JsStoreWorker=o;var s,u=new i.Instance,c=function(){function e(){this.dbName_="Ts_Student_Demo",this.initDatabase()}return e.prototype.initDatabase=function(){var e=this;this.connection.isDbExist(this.dbName_).then(function(t){t?e.connection.openDb(e.dbName_):e.connection.createDb(e.getDatabase_())}).catch(function(e){console.error(e)})},e.prototype.getDatabase_=function(){var e={name:"Students",columns:[new i.Column("id").options([i.COL_OPTION.PrimaryKey,i.COL_OPTION.AutoIncrement]),new i.Column("name").options([i.COL_OPTION.NotNull]).setDataType(i.DATA_TYPE.String),new i.Column("gender").options([i.COL_OPTION.NotNull]).disableSearch(),new i.Column("country").options([i.COL_OPTION.NotNull]).setDataType(i.DATA_TYPE.String),new i.Column("city").options([i.COL_OPTION.NotNull]).setDataType(i.DATA_TYPE.String)]};return{name:this.dbName_,tables:[e]}},Object.defineProperty(e.prototype,"connection",{get:function(){return u},enumerable:!0,configurable:!0}),e}(),a=(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}s(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.getStudents=function(){return this.connection.select({from:"Students"})},t.prototype.addStudent=function(e){return this.connection.insert({into:"Students",values:[e]})},t.prototype.deleteStudent=function(e){return this.connection.remove({from:"Students",where:{id:e}})},t.prototype.getStudent=function(e){return this.connection.select({from:"Students",where:{id:e}})},t.prototype.updateStudent=function(e,t){return this.connection.update({in:"Students",set:t,where:{id:e}})},t}(c);(new(function(){function e(){this.service_=new l,this.registerEvents_()}return e.prototype.registerEvents_=function(){var e=this;r("#divContainer").on("click","td .btn-add",function(){e.addStudent()}),r("#divContainer").on("click","td .btn-edit",function(){var e=r(this).parents("tr").attr("data-id");n(Number(e))}),r("#divContainer").on("click","td .btn-delete",function(){var e=r(this).parents("tr").attr("data-id");t(Number(e))}),r("#divContainer").on("click","td .btn-update",function(){var e=r(this).parents("tr").attr("data-id");o(Number(e))});var t=function(t){e.deleteStudent(t)},n=function(t){e.editStudent(t)},o=function(t){e.updateStudent(t)}},e.prototype.getRowWithTextbox=function(e){return"<tr class="+(e?"tr-edit":"tr-add")+" data-id="+(e?e.id:"")+'>\n                    <td><input type="text" value='+(e?e.name:"")+'></td>\n                    <td><input type="text" value='+(e?e.gender:"")+'></td>\n                    <td><input type="text" value='+(e?e.country:"")+'></td>\n                    <td><input type="text" value='+(e?e.city:"")+"></td>\n                    <td>\n                        <button class="+(e?"btn-update":"btn-add")+">"+(e?"Update":"Add")+"</button>\n                    </td>\n                    <td><button>Cancel</button></td>\n                </tr>"},e.prototype.deleteStudent=function(e){this.service_.deleteStudent(e).then(function(t){t>0&&r("#tblStudents tbody tr[data-id='"+e+"']").remove()}).catch(function(e){alert(e.message)})},e.prototype.updateStudent=function(e){var t=this,n=r("#tblStudents tbody tr[data-id='"+e+"']").find("td"),o={name:n[0].querySelector("input").value,gender:n[1].querySelector("input").value,country:n[2].querySelector("input").value,city:n[3].querySelector("input").value};this.service_.updateStudent(e,o).then(function(n){n>0&&(o.id=e,r("#tblStudents tbody tr[data-id='"+e+"']")[0].outerHTML=t.getHtmlRow(o))}).catch(function(e){alert(e.message)})},e.prototype.addStudent=function(){var e=this,t=document.querySelectorAll(".tr-add td"),n={name:t[0].querySelector("input").value,gender:t[1].querySelector("input").value,country:t[2].querySelector("input").value,city:t[3].querySelector("input").value};this.service_.addStudent(n).then(function(t){t>0&&(e.refreshStudentList(),alert("successfully added"))}).catch(function(e){console.error(e),alert(e.message)})},e.prototype.editStudent=function(e){var t=this;this.service_.getStudent(e).then(function(n){n.length>0&&(r("#tblStudents tbody tr[data-id='"+e+"']")[0].outerHTML=t.getRowWithTextbox(n[0]))}).catch(function(e){alert(e.message)})},e.prototype.clearAddText=function(){document.querySelectorAll(".tr-add td").forEach(function(e){e.innerHTML=""})},e.prototype.refreshStudentList=function(){var e=this;this.service_.getStudents().then(function(t){var n=document.querySelector("#tblStudents tbody"),r=e.getRowWithTextbox();t.forEach(function(t){r+=e.getHtmlRow(t)}),n.innerHTML=r}).catch(function(e){console.error(e),alert(e.message)})},e.prototype.getHtmlRow=function(e){return"<tr data-id="+e.id+">\n            <td>"+e.name+"</td>\n            <td>"+e.gender+"</td>\n            <td>"+e.country+"</td>\n            <td>"+e.city+'</td>\n            <td><button class="btn-edit">Edit</button></td>\n            <td><button class="btn-delete">Delete</button></td>\n            </tr>'},e}())).refreshStudentList()},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){(e.exports=n(4)(!1)).push([e.i,"table {\r\n    border-collapse: collapse;\r\n  }\r\n  \r\n  table tr td,\r\n  th {\r\n    border: 1px solid black;\r\n    text-align: center;\r\n    padding: 10px;\r\n  }\r\n  \r\n  contenteditable {\r\n    border: 2px solid blue;\r\n  }\r\n  \r\n  #divContainer {\r\n    text-align: center;\r\n    width: 50%;\r\n    margin: 0 auto;\r\n  }\r\n  ",""])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,