{"version":3,"file":"instance_helper.js","sourceRoot":"","sources":["../../jsstore_code/instance_helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogHelper } from \"./log_helper\";\r\nimport { Error_Type } from \"./enums\";\r\nimport { IWebWorkerRequest, IWebWorkerResult } from \"./interfaces\";\r\n\r\nexport class InstanceHelper {\r\n    private _worker: Worker;\r\n    private _isDbOpened: boolean = false;\r\n    private _requestQueue: IWebWorkerRequest[] = [];\r\n    private _isCodeExecuting = false;\r\n    private _whiteListApi = ['create_db', 'is_db_exist', 'get_db_version', 'get_db_list', 'open_db'];\r\n    constructor(worker: Worker) {\r\n        if (worker) {\r\n            this._worker = worker;\r\n            this._worker.onmessage = this.onMessageFromWorker.bind(this);\r\n        }\r\n        else {\r\n            var err = new LogHelper(Error_Type.WorkerNotSupplied);\r\n            err.throw();\r\n        }\r\n    }\r\n\r\n    onMessageFromWorker(msg) {\r\n        this.processFinishedQuery(msg.data);\r\n    }\r\n\r\n    private processFinishedQuery(message: IWebWorkerResult) {\r\n        var finished_request: IWebWorkerRequest = this._requestQueue.shift();\r\n        if (finished_request) {\r\n            LogHelper.log(\"request finished : \" + finished_request.Name);\r\n            if (message.ErrorOccured) {\r\n                if (finished_request.OnError) {\r\n                    finished_request.OnError(message.ErrorDetails);\r\n                }\r\n            }\r\n            else {\r\n                if (finished_request.OnSuccess) {\r\n                    var open_db_queries = ['open_db', 'create_db'];\r\n                    if (open_db_queries.indexOf(finished_request.Name) >= 0) {\r\n                        this._isDbOpened = true;\r\n                    }\r\n                    finished_request.OnSuccess(message.ReturnedValue);\r\n                }\r\n            }\r\n            this._isCodeExecuting = false;\r\n            this.executeQry();\r\n        }\r\n    }\r\n\r\n    protected pushApi<T>(request: IWebWorkerRequest): Promise<T> {\r\n        return new Promise((resolve, reject) => {\r\n            request.OnSuccess = (result) => {\r\n                resolve(result as T);\r\n            };\r\n            request.OnError = (error) => {\r\n                reject(error);\r\n            };\r\n            this.prcoessExecutionOfQry(request);\r\n        });\r\n    }\r\n\r\n    private prcoessExecutionOfQry(request: IWebWorkerRequest) {\r\n        this._requestQueue.push(request);\r\n        this.executeQry();\r\n        LogHelper.log(\"request pushed: \" + request.Name);\r\n    }\r\n\r\n    private executeQry() {\r\n        if (!this._isCodeExecuting && this._requestQueue.length > 0) {\r\n            if (this._isDbOpened) {\r\n                this.sendRequestToWorker(this._requestQueue[0]);\r\n                return;\r\n            }\r\n            var allowed_query_index = -1;\r\n            this._requestQueue.every((item, index) => {\r\n                if (this._whiteListApi.indexOf(item.Name) >= 0) {\r\n                    allowed_query_index = index;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            // shift allowed query to zeroth index\r\n            if (allowed_query_index >= 0) {\r\n                this._requestQueue.splice(0, 0, this._requestQueue.splice(allowed_query_index, 1)[0]);\r\n                this.sendRequestToWorker(this._requestQueue[0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private sendRequestToWorker(firsrtRequest: IWebWorkerRequest) {\r\n        this._isCodeExecuting = true;\r\n        var request = {\r\n            Name: firsrtRequest.Name,\r\n            Query: firsrtRequest.Query\r\n        } as IWebWorkerRequest;\r\n        LogHelper.log(\"request executing : \" + firsrtRequest.Name);\r\n        this._worker.postMessage(request);\r\n    }\r\n}"]}