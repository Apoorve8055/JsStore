{"version":3,"file":"instance.js","sourceRoot":"","sources":["../../jsstore_code/instance.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogHelper } from \"./log_helper\";\r\nimport { Error_Type } from \"./enums\";\r\nimport { InstanceHelper } from \"./instance_helper\";\r\nimport { IDataBaseOption, ISelect, ICount, IInsert, IUpdate, IRemove, IDbInfo } from \"./interfaces\";\r\nimport { Config } from \"./config\";\r\n\r\nexport class Instance extends InstanceHelper {\r\n\r\n    constructor(worker: Worker) {\r\n        super(worker);\r\n    }\r\n\r\n    /**\r\n     *  open database\r\n     * \r\n     * @param {string} dbName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    openDb(dbName: string) {\r\n        return this.pushApi<null>({\r\n            Name: 'open_db',\r\n            Query: dbName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * creates DataBase\r\n     * \r\n     * @param {IDataBaseOption} dataBase \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    createDb(dataBase: IDataBaseOption) {\r\n        return this.pushApi<string[]>({\r\n            Name: 'create_db',\r\n            Query: dataBase\r\n        });\r\n    }\r\n\r\n    /**\r\n     * drop dataBase\r\n     * \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    dropDb() {\r\n        return this.pushApi<null>({\r\n            Name: 'drop_db',\r\n            Query: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * select data from table\r\n     * \r\n     * @template T \r\n     * @param {ISelect} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    select<T>(query: ISelect) {\r\n        return this.pushApi<T[]>({\r\n            Name: 'select',\r\n            Query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get no of record from table\r\n     * \r\n     * @param {ICount} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    count(query: ICount) {\r\n        return this.pushApi<number>({\r\n            Name: 'count',\r\n            Query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * insert data into table\r\n     * \r\n     * @param {IInsert} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    insert(query: IInsert) {\r\n        return this.pushApi<number>({\r\n            Name: 'insert',\r\n            Query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * update data into table\r\n     * \r\n     * @param {IUpdate} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    update(query: IUpdate) {\r\n        return this.pushApi<number>({\r\n            Name: 'update',\r\n            Query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * remove data from table\r\n     * \r\n     * @param {IRemove} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    remove(query: IRemove) {\r\n        return this.pushApi<number>({\r\n            Name: 'remove',\r\n            Query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     * delete all data from table\r\n     * \r\n     * @param {string} tableName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    clear(tableName: string) {\r\n        return this.pushApi<null>({\r\n            Name: 'clear',\r\n            Query: tableName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * insert bulk amount of data\r\n     * \r\n     * @param {IInsert} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    bulkInsert(query: IInsert) {\r\n        return this.pushApi<null>({\r\n            Name: 'bulk_insert',\r\n            Query: query\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  export the result in json file\r\n     * \r\n     * @param {ISelect} query \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    exportJson(query: ISelect) {\r\n        var onSuccess = (url) => {\r\n            var link = document.createElement(\"a\");\r\n            link.href = url;\r\n            link.download = query.from + \".json\";\r\n            link.click();\r\n        };\r\n\r\n        return new Promise<null>((resolve, reject) => {\r\n            this.pushApi({\r\n                Name: 'export_json',\r\n                Query: query\r\n            }).then(url => {\r\n                onSuccess(url);\r\n                resolve();\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * set log status\r\n     * \r\n     * @param {boolean} status \r\n     * @memberof Instance\r\n     */\r\n    setLogStatus(status: boolean) {\r\n        Config._isLogEnabled = status ? status : Config._isLogEnabled;\r\n        this.pushApi({\r\n            Name: 'enable_log',\r\n            Query: Config._isLogEnabled\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get version of database\r\n     * \r\n     * @param {(string | IDbInfo)} dbName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    getDbVersion(dbName: string | IDbInfo) {\r\n        return this.pushApi<number>({\r\n            Name: 'get_db_version',\r\n            Query: dbName\r\n        });\r\n    }\r\n\r\n    /**\r\n     * is database exist\r\n     * \r\n     * @param {(IDbInfo | string)} dbInfo \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    isDbExist(dbInfo: IDbInfo | string) {\r\n        return this.pushApi<boolean>({\r\n            Name: 'is_db_exist',\r\n            Query: dbInfo\r\n        });\r\n    }\r\n\r\n    /**\r\n     * returns list of database created\r\n     * \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    getDbList() {\r\n        return this.pushApi<string[]>({\r\n            Name: 'get_db_list',\r\n            Query: null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * get Database Schema\r\n     * \r\n     * @param {string} dbName \r\n     * @returns \r\n     * @memberof Instance\r\n     */\r\n    getDbSchema(dbName: string) {\r\n        return this.pushApi<string[]>({\r\n            Name: 'get_db_schema',\r\n            Query: dbName\r\n        });\r\n    }\r\n\r\n}"]}