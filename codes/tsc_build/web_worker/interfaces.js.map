{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../web_worker/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Error_Type, Connection_Status } from \"./enums\";\r\n\r\nexport interface IDbInfo {\r\n    DbName: string;\r\n    Table: {\r\n        Name: string,\r\n        Version: number\r\n    };\r\n}\r\n\r\nexport interface IDataBaseOption {\r\n    Name: string;\r\n    Tables: ITableOption[];\r\n}\r\n\r\nexport interface ITableOption {\r\n    Name: string;\r\n    Columns: IColumnOption[];\r\n    Version?: number;\r\n}\r\n\r\nexport interface IColumnOption {\r\n    Name: string;\r\n    PrimaryKey?: boolean;\r\n    AutoIncrement?: boolean;\r\n    Unique?: boolean;\r\n    NotNull?: boolean;\r\n    DataType?: string;\r\n    Default?: any;\r\n    MultiEntry?: boolean;\r\n    EnableSearch?: boolean;\r\n}\r\n\r\nexport interface ISelect {\r\n    from: any;\r\n    where?: any;\r\n    skip?: number;\r\n    limit?: number;\r\n    order?: IOrder;\r\n    groupBy?: any;\r\n    aggregate?: IAggregate;\r\n    ignoreCase?: boolean;\r\n    distinct?: boolean;\r\n}\r\n\r\nexport interface IOrder {\r\n    by: string; // Column name\r\n    type: string;\r\n}\r\n\r\nexport interface ICount {\r\n    from: any;\r\n    ignoreCase?: boolean;\r\n    where?: any;\r\n}\r\n\r\nexport interface IRemove {\r\n    from: string;\r\n    ignoreCase?: boolean;\r\n    where?: any;\r\n}\r\n\r\nexport interface IUpdate {\r\n    in: string;\r\n    ignoreCase?: boolean;\r\n    set: any;\r\n    where?: any;\r\n}\r\n\r\nexport interface IInsert {\r\n    into: string;\r\n    values: any[];\r\n    return?: boolean;\r\n    skipDataCheck?: boolean;\r\n}\r\n\r\nexport interface ICondition {\r\n    column: string;\r\n    value: string;\r\n    op: string;\r\n}\r\n\r\nexport interface ITableJoin {\r\n    column: string;\r\n    table: string;\r\n    where?: any;\r\n    order?: IOrder;\r\n    joinType?: string;\r\n    nextJoin?: INextJoin;\r\n}\r\n\r\nexport interface ISelectJoin {\r\n    from: IJoin; // IJoin\r\n    count?: boolean;\r\n    skip?: number;\r\n    limit?: number;\r\n}\r\n\r\nexport interface IJoin {\r\n    table1: ITableJoin;\r\n    join: string; // inner,left,right,outer\r\n    table2: ITableJoin;\r\n}\r\n\r\nexport interface INextJoin {\r\n    table: string;\r\n    column: string;\r\n}\r\n\r\nexport interface IDbStatus {\r\n    ConStatus: Connection_Status;\r\n    LastError: Error_Type;\r\n}\r\n\r\nexport interface IWebWorkerRequest {\r\n    Name: string;\r\n    Query: any;\r\n    OnSuccess: (results) => void;\r\n    OnError: (err: IError) => void;\r\n}\r\n\r\nexport interface IWebWorkerResult {\r\n    ErrorOccured: boolean;\r\n    ErrorDetails: any;\r\n    ReturnedValue: any;\r\n    ThrowError: boolean;\r\n}\r\n\r\nexport interface IAggregate {\r\n    max?: any[];\r\n    min?: any[];\r\n    sum?: any[];\r\n    count?: any[];\r\n    avg?: any[];\r\n}\r\n\r\nexport interface ITranscationQry {\r\n    TableNames: string[];\r\n    Logic: string;\r\n    Data: any;\r\n    AbortOnError?: boolean;\r\n    OnSuccess?: (results: any[]) => void;\r\n    OnError?: (err: IError) => void;\r\n}\r\n\r\nexport interface IError {\r\n    _type: Error_Type;\r\n    _message: string;\r\n}"]}