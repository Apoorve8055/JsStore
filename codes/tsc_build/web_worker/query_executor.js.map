{"version":3,"file":"query_executor.js","sourceRoot":"","sources":["../../web_worker/query_executor.ts"],"names":[],"mappings":"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","sourcesContent":["import { IdbHelper } from \"./business/idb_helper\";\r\nimport { LogHelper } from \"./log_helper\";\r\nimport {\r\n    IWebWorkerRequest, IWebWorkerResult,\r\n    ITranscationQry, IError, IUpdate,\r\n    IInsert, IRemove, IDataBaseOption, ISelect, ISelectJoin, IDbInfo\r\n} from \"./interfaces\";\r\nimport { Connection_Status, Error_Type, Data_Type } from \"./enums\";\r\nimport { Config } from \"./config\";\r\nimport { OpenDb } from \"./business/open_db\";\r\nimport { DropDb } from \"./business/drop_db\";\r\nimport * as KeyStore from \"./keystore/index\";\r\nimport { DbHelper } from \"./model/db_helper\";\r\nimport { TableHelper } from \"./model/table_helper\";\r\nimport { CreateDb } from \"./business/create_db\";\r\nimport { DataBase } from \"./model/database\";\r\nimport * as Select from './business/select/index';\r\nimport * as Count from './business/count/index';\r\nimport * as Insert from './business/insert/index';\r\nimport * as Remove from './business/remove/index';\r\nimport * as Update from './business/update/index';\r\nimport { Util } from \"./util\";\r\nimport { Clear } from \"./business/clear\";\r\nimport { BulkInsert } from \"./business/bulk_insert\";\r\n\r\nexport class QueryExecutor {\r\n\r\n    public checkConnectionAndExecuteLogic(request: IWebWorkerRequest) {\r\n        LogHelper.log('checking connection and executing request:' + request.Name);\r\n        switch (request.Name) {\r\n            case 'create_db':\r\n            case 'is_db_exist':\r\n            case 'get_db_version':\r\n            case 'get_db_list':\r\n            case 'get_db_schema':\r\n            case 'open_db':\r\n                this.executeLogic(request);\r\n                break;\r\n            case 'change_log_status':\r\n                this.changeLogStatus(request.Query['logging']); break;\r\n            default:\r\n                switch (IdbHelper._dbStatus.ConStatus) {\r\n                    case Connection_Status.Connected: {\r\n                        this.executeLogic(request);\r\n                    } break;\r\n                    case Connection_Status.Closed: {\r\n                        if (IdbHelper._isDbDeletedByBrowser === true) {\r\n                            this.createDb(null, function () {\r\n                                IdbHelper._isDbDeletedByBrowser = false;\r\n                                this.checkConnectionAndExecuteLogic(request);\r\n                            }.bind(this), request.OnError);\r\n                        }\r\n                        else {\r\n                            this.openDb(IdbHelper._activeDb._name, () => {\r\n                                this.checkConnectionAndExecuteLogic(request);\r\n                            }, request.OnError);\r\n                        }\r\n                    } break;\r\n                }\r\n        }\r\n    }\r\n\r\n    private changeLogStatus(enableLog) {\r\n        Config._isLogEnabled = enableLog;\r\n    }\r\n\r\n    private returnResult(result) {\r\n        (self as any).postMessage(result);\r\n    }\r\n\r\n    private executeLogic(request: IWebWorkerRequest) {\r\n        var onSuccess = (results?) => {\r\n            this.returnResult({\r\n                ReturnedValue: results\r\n            } as IWebWorkerResult);\r\n        };\r\n        var onError = (err) => {\r\n            this.returnResult({\r\n                ErrorDetails: err,\r\n                ErrorOccured: true\r\n            } as IWebWorkerResult);\r\n        };\r\n\r\n        switch (request.Name) {\r\n            case 'select':\r\n                this.select(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'insert': this.insert(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'update': this.update(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'remove': this.remove(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'is_db_exist': this.isDbExist(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'get_db_version':\r\n                IdbHelper.getDbVersion(request.Query, onSuccess);\r\n                break;\r\n            case 'get_db_list':\r\n                IdbHelper.getDbList(onSuccess);\r\n                break;\r\n            case 'get_db_schema':\r\n                IdbHelper.getDbSchema(request.Query, onSuccess);\r\n                break;\r\n            case 'open_db':\r\n                if (IdbHelper._isDbDeletedByBrowser === true) {\r\n                    this.createDb(null, () => {\r\n                        IdbHelper._isDbDeletedByBrowser = false;\r\n                        onSuccess();\r\n                    }, onError);\r\n                }\r\n                else {\r\n                    this.openDb(request.Query, onSuccess, onError);\r\n                }\r\n                break;\r\n            case 'create_db': this.createDb(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'clear': this.clear(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'drop_db': this.dropDb(onSuccess, onError);\r\n                break;\r\n            case 'count': this.count(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'bulk_insert': this.bulkInsert(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'export_json': this.exportJson(request.Query, onSuccess, onError);\r\n                break;\r\n            default: console.error('The Api:-' + request.Name + ' does not support.');\r\n        }\r\n    }\r\n\r\n    private openDb(dbName, onSuccess: () => void, onError: (err: IError) => void) {\r\n        IdbHelper.getDbVersion(dbName, (dbVersion) => {\r\n            if (dbVersion !== 0) {\r\n                IdbHelper._dbVersion = dbVersion;\r\n                IdbHelper.getDbSchema(dbName, (result) => {\r\n                    IdbHelper._activeDb = result;\r\n                    var open_db_object = new OpenDb(onSuccess, onError);\r\n                    open_db_object.execute();\r\n                });\r\n            }\r\n            else {\r\n                var err = new LogHelper(Error_Type.DbNotExist, { DbName: dbName });\r\n                err.logError();\r\n                onError(err.get());\r\n            }\r\n        });\r\n    }\r\n\r\n    private closeDb() {\r\n        if (IdbHelper._dbStatus.ConStatus === Connection_Status.Connected) {\r\n            IdbHelper._dbStatus.ConStatus = Connection_Status.ClosedByJsStore;\r\n            IdbHelper._dbConnection.close();\r\n        }\r\n    }\r\n\r\n    private dropDb(onSuccess: () => void, onError: (err: IError) => void) {\r\n        this.closeDb();\r\n        var drop_db_object = new DropDb(onSuccess, onError);\r\n        drop_db_object.deleteDb();\r\n    }\r\n\r\n    private update(query: IUpdate, onSuccess: () => void, onError: (err: IError) => void) {\r\n        var update_db_object = new Update.Instance(query, onSuccess, onError);\r\n        update_db_object.execute();\r\n    }\r\n\r\n    private insert(query: IInsert, onSuccess: () => void, onError: (err: IError) => void) {\r\n        var insert_object = new Insert.Instance(query, onSuccess, onError);\r\n        insert_object.execute();\r\n    }\r\n\r\n    private bulkInsert(query: IInsert, onSuccess: () => void, onError: (err: IError) => void) {\r\n        var bulk_insert_object = new BulkInsert(query, onSuccess, onError);\r\n        bulk_insert_object.execute();\r\n    }\r\n\r\n    private remove(query: IRemove, onSuccess: () => void, onError: (err: IError) => void) {\r\n        var delete_object = new Remove.Instance(query, onSuccess, onError);\r\n        delete_object.execute();\r\n    }\r\n\r\n    private select(query, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        if (typeof query.From === 'object') {\r\n            var select_join_object = new Select.Join(query as ISelectJoin, onSuccess, onError);\r\n        }\r\n        else {\r\n            var select_instance = new Select.Instance(query, onSuccess, onError);\r\n            select_instance.execute();\r\n        }\r\n    }\r\n\r\n    private count(query, onSuccess: () => void, onError: (err: IError) => void) {\r\n        if (typeof query.From === 'object') {\r\n            query['Count'] = true;\r\n            var select_join_object = new Select.Join(query, onSuccess, onError);\r\n        }\r\n        else {\r\n            var count_object = new Count.Instance(query, onSuccess, onError);\r\n            count_object.execute();\r\n        }\r\n    }\r\n\r\n    private createDb(\r\n        dataBase: IDataBaseOption, onSuccess: () => void, onError: (err: IError) => void\r\n    ) {\r\n        var processCreateDb = () => {\r\n            // save dbSchema in keystore\r\n            KeyStore.set(\"JsStore_\" + IdbHelper._activeDb._name + \"_Schema\", IdbHelper._activeDb);\r\n            // create meta data\r\n            var db_helper = new DbHelper(IdbHelper._activeDb);\r\n            db_helper.createMetaData((tablesMetaData: TableHelper[]) => {\r\n                var create_db_object = new CreateDb(tablesMetaData, onSuccess, onError);\r\n            });\r\n        };\r\n        if (dataBase == null) {\r\n            processCreateDb();\r\n        }\r\n        else {\r\n            this.closeDb();\r\n            IdbHelper.getDbVersion(dataBase.Name, (version) => {\r\n                IdbHelper._dbVersion = version ? version : 1;\r\n                IdbHelper._activeDb = new DataBase(dataBase);\r\n                processCreateDb();\r\n            });\r\n        }\r\n    }\r\n\r\n    private clear(tableName: string, onSuccess: () => void, onError: (err: IError) => void) {\r\n        var clear_object = new Clear(tableName, onSuccess, onError);\r\n        clear_object.execute();\r\n    }\r\n\r\n    private exportJson(query: ISelect, onSuccess: (url: string) => void, onError: (err: IError) => void) {\r\n        this.select(query, (results) => {\r\n            var url = URL.createObjectURL(new Blob([JSON.stringify(results)], {\r\n                type: \"text/json\"\r\n            }));\r\n            onSuccess(url);\r\n        }, (err) => {\r\n            onError(err);\r\n        });\r\n    }\r\n\r\n    private isDbExist(dbInfo: any, onSuccess: (isExist: boolean) => void, onError: (err: IError) => void) {\r\n        if (IdbHelper._dbStatus.ConStatus !== Connection_Status.UnableToStart) {\r\n            if (Util.getType(dbInfo) === Data_Type.String) {\r\n                IdbHelper.getDbVersion(dbInfo, (dbVersion) => {\r\n                    onSuccess(Boolean(dbVersion));\r\n                });\r\n            }\r\n            else {\r\n                IdbHelper.getDbVersion(dbInfo.DbName, (dbVersion) => {\r\n                    onSuccess(dbInfo.Table.Version <= dbVersion);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            var error = {\r\n                _message: null,\r\n                _type: IdbHelper._dbStatus.LastError,\r\n            } as IError;\r\n            switch (error._type) {\r\n                case Error_Type.IndexedDbBlocked:\r\n                    error._message = \"IndexedDB is blocked\"; break;\r\n                case Error_Type.IndexedDbUndefined:\r\n                    error._message = \"IndexedDB is not supported\"; break;\r\n            }\r\n            onError(error);\r\n        }\r\n    }\r\n}"]}