{"version":3,"file":"group_by_helper.js","sourceRoot":"","sources":["../../../../web_worker/business/select/group_by_helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Where } from \"./where\";\n\nexport class GroupByHelper extends Where {\n    constructor() {\n        super();\n    }\n\n    protected processGroupBy() {\n        var grp_qry = this._query.GroupBy,\n            datas = this._results,\n            look_up_obj = {};\n        // free results memory\n        this._results = this._query.GroupBy = undefined;\n        if (typeof grp_qry === 'string') {\n            for (var i in datas) {\n                look_up_obj[datas[i][grp_qry]] = datas[i];\n            }\n        }\n        else {\n            var obj_key;\n            for (var i in datas) {\n                obj_key = \"\";\n                for (var column in grp_qry) {\n                    obj_key += datas[i][grp_qry[column]];\n                }\n                look_up_obj[obj_key] = datas[i];\n            }\n        }\n        // free datas memory\n        datas = [];\n        for (i in look_up_obj) {\n            datas.push(look_up_obj[i]);\n        }\n        this._results = datas;\n    }\n\n    protected executeAggregateGroupBy() {\n        var grp_qry = this._query.GroupBy,\n            datas = this._results,\n            look_up_obj = {},\n            // assign aggregate and free aggregate memory\n            aggregate_qry = this._query.Aggregate;\n        this._query.Aggregate = undefined;\n        // free results memory\n        this._results = undefined;\n\n        var index, obj_Key, value, aggr_column;\n        var calculateAggregate = function () {\n            for (var prop in aggregate_qry) {\n                switch (prop) {\n                    case 'Count':\n                        var getCount = function () {\n                            value = look_up_obj[obj_Key];\n                            // get old value\n                            value = value ? value[\"Count(\" + aggr_column + \")\"] : 0;\n                            // add with old value if data exist\n                            value += datas[index][aggr_column] ? 1 : 0;\n                            return value;\n                        };\n                        if (typeof aggregate_qry[prop] === 'string') {\n                            aggr_column = aggregate_qry[prop];\n                            datas[index][\"Count(\" + aggr_column + \")\"] = getCount();\n                        }\n                        else if (Array.isArray(aggregate_qry[prop])) {\n                            for (var item in aggregate_qry[prop]) {\n                                aggr_column = aggregate_qry[prop][item];\n                                datas[index][\"Count(\" + aggr_column + \")\"] = getCount();\n                            }\n                        }\n                        break;\n                    case 'Max':\n                        var getMax = function () {\n                            value = look_up_obj[obj_Key];\n                            // get old value\n                            value = value ? value[\"Max(\" + aggr_column + \")\"] : 0;\n                            datas[index][aggr_column] = datas[index][aggr_column] ?\n                                datas[index][aggr_column] : 0;\n                            // compare between old value and new value\n                            return value > datas[index][aggr_column] ? value : datas[index][aggr_column];\n                        };\n\n                        if (typeof aggregate_qry[prop] === 'string') {\n                            aggr_column = aggregate_qry[prop];\n                            datas[index][\"Max(\" + aggr_column + \")\"] = getMax();\n                        }\n                        else if (Array.isArray(aggregate_qry[prop])) {\n                            for (var item in aggregate_qry[prop]) {\n                                aggr_column = aggregate_qry[prop][item];\n                                datas[index][\"Max(\" + aggr_column + \")\"] = getMax();\n                            }\n                        }\n                        break;\n                    case 'Min':\n                        var getMin = function () {\n                            value = look_up_obj[obj_Key];\n                            // get old value\n                            value = value ? value[\"Min(\" + aggr_column + \")\"] : Infinity;\n                            datas[index][aggr_column] = datas[index][aggr_column] ?\n                                datas[index][aggr_column] : Infinity;\n                            // compare between old value and new value\n                            return value < datas[index][aggr_column] ? value : datas[index][aggr_column];\n                        };\n\n                        if (typeof aggregate_qry[prop] === 'string') {\n                            aggr_column = aggregate_qry[prop];\n                            datas[index][\"Min(\" + aggr_column + \")\"] = getMin();\n                        }\n                        else if (Array.isArray(aggregate_qry[prop])) {\n                            for (var item in aggregate_qry[prop]) {\n                                aggr_column = aggregate_qry[prop][item];\n                                datas[index][\"Min(\" + aggr_column + \")\"] = getMin();\n                            }\n                        }\n                        break;\n                    case 'Sum':\n                        var getSum = function () {\n                            value = look_up_obj[obj_Key];\n                            // get old value\n                            value = value ? value[\"Sum(\" + aggr_column + \")\"] : 0;\n                            // add with old value if data exist\n                            value += datas[index][aggr_column] ? datas[index][aggr_column] : 0;\n                            return value;\n                        };\n                        if (typeof aggregate_qry[prop] === 'string') {\n                            aggr_column = aggregate_qry[prop];\n                            datas[index][\"Sum(\" + aggr_column + \")\"] = getSum();\n                        }\n                        else if (Array.isArray(aggregate_qry[prop])) {\n                            for (var item in aggregate_qry[prop]) {\n                                aggr_column = aggregate_qry[prop][item];\n                                datas[index][\"Sum(\" + aggr_column + \")\"] = getSum();\n                            }\n                        }\n                        break;\n                    case 'Avg':\n                        var getAvg = function () {\n                            value = look_up_obj[obj_Key];\n                            // get old sum value\n                            var sum_of_column = value ? value[\"Sum(\" + aggr_column + \")\"] : 0;\n                            // add with old value if data exist\n                            sum_of_column += datas[index][aggr_column] ? datas[index][aggr_column] : 0;\n                            datas[index][\"Sum(\" + aggr_column + \")\"] = sum_of_column;\n                            // get old count value\n                            value = value ? value[\"Count(\" + aggr_column + \")\"] : 0;\n                            // add with old value if data exist\n                            value += datas[index][aggr_column] ? 1 : 0;\n                            datas[index][\"Count(\" + aggr_column + \")\"] = value;\n                        };\n\n                        if (typeof aggregate_qry[prop] === 'string') {\n                            aggr_column = aggregate_qry[prop];\n                            getAvg();\n                        }\n                        else if (Array.isArray(aggregate_qry[prop])) {\n                            for (var item in aggregate_qry[prop]) {\n                                aggr_column = aggregate_qry[prop][item];\n                                getAvg();\n                            }\n                        }\n                        break;\n                }\n            }\n        };\n\n        if (typeof grp_qry === 'string') {\n            for (index in datas) {\n                obj_Key = datas[index][grp_qry];\n                calculateAggregate();\n                look_up_obj[obj_Key] = datas[index];\n            }\n        }\n        else {\n            for (index in datas) {\n                obj_Key = \"\";\n                for (var column in grp_qry) {\n                    obj_Key += datas[index][grp_qry[column]];\n                }\n                calculateAggregate();\n                look_up_obj[obj_Key] = datas[index];\n            }\n\n        }\n        // free datas memory\n        datas = [];\n        for (var i in look_up_obj) {\n            datas.push(look_up_obj[i]);\n        }\n        // Checking for avg and if exist then fill the datas;\n        if (aggregate_qry.Avg) {\n            if (typeof aggregate_qry.Avg === 'string') {\n                for (index in datas) {\n                    var sum_for_avg = datas[index][\"Sum(\" + aggregate_qry.Avg + \")\"],\n                        count_for_avg = datas[index][\"Count(\" + aggregate_qry.Avg + \")\"];\n                    datas[index][\"Avg(\" + aggregate_qry.Avg + \")\"] = sum_for_avg / count_for_avg;\n                    if (aggregate_qry.Count !== aggregate_qry.Avg) {\n                        delete datas[index][\"Count(\" + aggregate_qry.Avg + \")\"];\n                    }\n                    if (aggregate_qry.Sum !== aggregate_qry.Avg) {\n                        delete datas[index][\"Sum(\" + aggregate_qry.Avg + \")\"];\n                    }\n                }\n            }\n            else {\n                var is_count_type_string = typeof aggregate_qry.Count,\n                    is_sum_type_string = typeof aggregate_qry.Count;\n                for (index in datas) {\n                    for (var column in aggregate_qry.Avg) {\n                        var avg_column = aggregate_qry.Avg[column],\n                            sum = datas[index][\"Sum(\" + avg_column + \")\"],\n                            count = datas[index][\"Count(\" + avg_column + \")\"];\n                        datas[index][\"Avg(\" + avg_column + \")\"] = sum / count;\n\n                        if (is_count_type_string) {\n                            if (aggregate_qry.Count !== avg_column) {\n                                delete datas[index][\"Count(\" + avg_column + \")\"];\n                            }\n                            else if (aggregate_qry.Count.indexOf(avg_column) === -1) {\n                                delete datas[index][\"Count(\" + avg_column + \")\"];\n                            }\n                        }\n\n                        if (is_sum_type_string) {\n                            if (aggregate_qry.Sum !== avg_column) {\n                                delete datas[index][\"Sum(\" + avg_column + \")\"];\n                            }\n                            else if (aggregate_qry.Sum.indexOf(avg_column) === -1) {\n                                delete datas[index][\"Sum(\" + avg_column + \")\"];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        this._results = datas;\n    }\n}"]}