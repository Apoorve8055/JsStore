{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../../../web_worker/business/select/helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { GroupByHelper } from \"./group_by_helper\";\n\nexport class Helper extends GroupByHelper {\n\n    constructor() {\n        super();\n    }\n\n    processOrderBy() {\n        var Order = this._query.Order;\n        if (Order && this._results.length > 0 && !this._sorted && Order.By) {\n            Order.Type = Order.Type ? Order.Type.toLowerCase() : 'asc';\n            var order_column = Order.By,\n                sortNumberInAsc = function () {\n                    this._results.sort((a, b) => {\n                        return a[order_column] - b[order_column];\n                    });\n                }.bind(this),\n                sortNumberInDesc = function () {\n                    this._results.sort(function (a, b) {\n                        return b[order_column] - a[order_column];\n                    });\n                }.bind(this),\n                sortAlphabetInAsc = function () {\n                    this._results.sort(function (a, b) {\n                        return a[order_column].toLowerCase().localeCompare(b[order_column].toLowerCase());\n                    });\n                }.bind(this),\n                sortAlphabetInDesc = function () {\n                    this._results.sort(function (a, b) {\n                        return b[order_column].toLowerCase().localeCompare(a[order_column].toLowerCase());\n                    });\n                }.bind(this);\n            if (typeof this._results[0][order_column] === 'string') {\n                if (Order.Type === 'asc') {\n                    sortAlphabetInAsc();\n                }\n                else {\n                    sortAlphabetInDesc();\n                }\n            }\n            else if (typeof this._results[0][order_column] === 'number') {\n                if (Order.Type === 'asc') {\n                    sortNumberInAsc();\n                }\n                else {\n                    sortNumberInDesc();\n                }\n            }\n        }\n    }\n\n    protected processAggregateQry() {\n        var datas = this._results,\n            results = {},\n            column_to_aggregate;\n        // free results memory\n        this._results = undefined;\n        for (var prop in this._query.Aggregate) {\n            switch (prop) {\n                case 'Count':\n                    var getCount = function () {\n                        var result = 0;\n                        for (var i in datas) {\n                            result += datas[i][column_to_aggregate] ? 1 : 0;\n                        }\n                        return result;\n                    };\n                    if (typeof this._query.Aggregate[prop] === 'string') {\n                        column_to_aggregate = this._query.Aggregate[prop];\n                        results[\"Count(\" + column_to_aggregate + \")\"] = getCount();\n                    }\n                    else if (Array.isArray(this._query.Aggregate[prop])) {\n                        for (var key in this._query.Aggregate[prop]) {\n                            column_to_aggregate = this._query.Aggregate[prop][key];\n                            results[\"Count(\" + column_to_aggregate + \")\"] = getCount();\n                        }\n                    }\n                    break;\n                case 'Max':\n                    var getMax = function () {\n                        var result = 0;\n                        for (var i in datas) {\n                            result = result > datas[i][column_to_aggregate] ?\n                                result : datas[i][column_to_aggregate];\n                        }\n                        return result;\n                    };\n                    if (typeof this._query.Aggregate[prop] === 'string') {\n                        column_to_aggregate = this._query.Aggregate[prop];\n                        results[\"Max(\" + column_to_aggregate + \")\"] = getMax();\n                    }\n                    else if (Array.isArray(this._query.Aggregate[prop])) {\n                        for (var key in this._query.Aggregate[prop]) {\n                            column_to_aggregate = this._query.Aggregate[prop][key];\n                            results[\"Max(\" + column_to_aggregate + \")\"] = getMax();\n                        }\n                    }\n                    break;\n                case 'Min':\n                    var getMin = function () {\n                        var result = Infinity, value = Infinity;\n                        for (var i in datas) {\n                            value = datas[i][column_to_aggregate] ?\n                                datas[i][column_to_aggregate] : Infinity;\n                            result = result < value ? result : value;\n                        }\n                        return result;\n                    };\n                    if (typeof this._query.Aggregate[prop] === 'string') {\n                        column_to_aggregate = this._query.Aggregate[prop];\n                        results[\"Min(\" + column_to_aggregate + \")\"] = getMin();\n                    }\n                    else if (Array.isArray(this._query.Aggregate[prop])) {\n                        for (var key in this._query.Aggregate[prop]) {\n                            column_to_aggregate = this._query.Aggregate[prop][key];\n                            results[\"Min(\" + column_to_aggregate + \")\"] = getMin();\n                        }\n                    }\n                    break;\n                case 'Sum':\n                    var getSum = function () {\n                        var result = 0;\n                        for (var i in datas) {\n                            result += datas[i][column_to_aggregate];\n                        }\n                        return result;\n                    };\n                    if (typeof this._query.Aggregate[prop] === 'string') {\n                        column_to_aggregate = this._query.Aggregate[prop];\n                        results[\"Sum(\" + column_to_aggregate + \")\"] = getSum();\n                    }\n                    else if (Array.isArray(this._query.Aggregate[prop])) {\n                        for (var key in this._query.Aggregate[prop]) {\n                            column_to_aggregate = this._query.Aggregate[prop][key];\n                            results[\"Sum(\" + column_to_aggregate + \")\"] = getSum();\n                        }\n                    }\n                    break;\n                case 'Avg':\n                    var getAvg = function () {\n                        var result = 0;\n                        for (var i in datas) {\n                            result += datas[i][column_to_aggregate];\n                        }\n                        return result / datas.length;\n                    };\n                    if (typeof this._query.Aggregate[prop] === 'string') {\n                        column_to_aggregate = this._query.Aggregate[prop];\n                        results[\"Avg(\" + column_to_aggregate + \")\"] = getAvg();\n                    }\n                    else if (Array.isArray(this._query.Aggregate[prop])) {\n                        for (var key in this._query.Aggregate[prop]) {\n                            column_to_aggregate = this._query.Aggregate[prop][key];\n                            results[\"Avg(\" + column_to_aggregate + \")\"] = getAvg();\n                        }\n                    }\n                    break;\n            }\n        }\n\n        // add results to the first index of result\n        for (var prop in results) {\n            datas[0][prop] = results[prop];\n        }\n        this._results = datas;\n    }\n}"]}