{"version":3,"file":"create_db.js","sourceRoot":"","sources":["../../../web_worker/business/create_db.ts"],"names":[],"mappings":"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","sourcesContent":["import { TableHelper } from \"../model/table_helper\";\r\nimport { IError } from \"../interfaces\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { Connection_Status, Error_Type } from \"../enums\";\r\nimport { Column } from \"../model/column\";\r\nimport * as KeyStore from \"../keystore/index\";\r\n\r\nexport class CreateDb {\r\n    _dbName: string;\r\n    constructor(tablesMetaData: TableHelper[], onSuccess: (listOf) => void, onError: (err: IError) => void) {\r\n        this._dbName = IdbHelper._activeDb._name;\r\n        var table_created_list = [],\r\n            db_request = indexedDB.open(this._dbName, IdbHelper._dbVersion);\r\n\r\n        db_request.onerror = (event) => {\r\n            if (onError != null) {\r\n                onError((event as any).target.error);\r\n            }\r\n        };\r\n\r\n        db_request.onsuccess = (event) => {\r\n            IdbHelper._dbStatus.ConStatus = Connection_Status.Connected;\r\n            IdbHelper._dbConnection = db_request.result;\r\n            (IdbHelper._dbConnection as any).onclose = (e) => {\r\n                IdbHelper.callDbDroppedByBrowser();\r\n                IdbHelper.updateDbStatus(Connection_Status.Closed, Error_Type.ConnectionClosed);\r\n            };\r\n\r\n            IdbHelper._dbConnection.onversionchange = (e) => {\r\n                if (e.newVersion === null) { // An attempt is made to delete the db\r\n                    (e.target as any).close(); // Manually close our connection to the db\r\n                    IdbHelper.callDbDroppedByBrowser(true);\r\n                    IdbHelper.updateDbStatus(Connection_Status.Closed, Error_Type.ConnectionClosed);\r\n                }\r\n            };\r\n\r\n            IdbHelper._dbConnection.onerror = (e) => {\r\n                IdbHelper._dbStatus.LastError = (\"Error occured in connection :\" + (e.target as any).result) as any;\r\n            };\r\n\r\n            IdbHelper._dbConnection.onabort = (e) => {\r\n                IdbHelper._dbStatus = {\r\n                    ConStatus: Connection_Status.Closed,\r\n                    LastError: Error_Type.ConnectionAborted\r\n                };\r\n            };\r\n\r\n            // save in database list\r\n            this.saveDbName();\r\n            if (onSuccess != null) {\r\n                onSuccess(table_created_list);\r\n            }\r\n        };\r\n\r\n        db_request.onupgradeneeded = (event) => {\r\n            var db_connection = (event as any).target.result;\r\n            var createObjectStore = (item: TableHelper, index) => {\r\n                try {\r\n                    if (item._primaryKey.length > 0) {\r\n                        IdbHelper._activeDb._tables[index]._primaryKey = item._primaryKey;\r\n                        var store = db_connection.createObjectStore(item._name, {\r\n                            keyPath: item._primaryKey\r\n                        });\r\n                        item._columns.forEach((column: Column) => {\r\n                            if (column._enableSearch === true) {\r\n                                var options = column._primaryKey ? { unique: true } : { unique: column._unique };\r\n                                options['multiEntry'] = column._multiEntry;\r\n                                store.createIndex(column._name, column._name, options);\r\n                                if (column._autoIncrement) {\r\n                                    KeyStore.set(`JsStore_${this._dbName}_${item._name}_${column._name}_Value`, 0);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        var store = db_connection.createObjectStore(item._name, {\r\n                            autoIncrement: true\r\n                        });\r\n                        item._columns.forEach((column: Column) => {\r\n                            var options = { unique: column._unique, multiEntry: column._multiEntry };\r\n                            store.createIndex(column._name, column._name, options);\r\n                            if (column._autoIncrement) {\r\n                                KeyStore.set(`JsStore_${this._dbName}_${item._name}_${column._name}_Value`, 0);\r\n                            }\r\n                        });\r\n                    }\r\n                    table_created_list.push(item._name);\r\n                    // setting the table version\r\n                    KeyStore.set(`JsStore_${this._dbName}_${item._name}_Version`, item._version);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            };\r\n            tablesMetaData.forEach((item: TableHelper, index) => {\r\n                if (item._requireDelete) {\r\n                    // Delete the old datastore.    \r\n                    if (db_connection.objectStoreNames.contains(item._name)) {\r\n                        db_connection.deleteObjectStore(item._name);\r\n                    }\r\n                    createObjectStore(item, index);\r\n                }\r\n                else if (item._requireCreation) {\r\n                    createObjectStore(item, index);\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    private saveDbName() {\r\n        IdbHelper.getDbList((result) => {\r\n            if (result.indexOf(this._dbName) < 0) {\r\n                result.push(this._dbName);\r\n                IdbHelper.setDbList(result);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}