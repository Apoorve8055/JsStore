{"version":3,"file":"instance.js","sourceRoot":"","sources":["../../../../web_worker/business/count/instance.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,KAAK,MAAM,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AACzC,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAE1C;IAA8B,4BAAK;IAE/B,kBAAY,KAAa,EAAE,SAAuC,EAAE,OAAgC;QAApG,YACI,iBAAO,SAIV;QAHG,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;IACxB,CAAC;IAED,0BAAO,GAAP;QAAA,iBAkCC;QAjCG,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC;gBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;oBAClC,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC3D,IAAI,aAAa,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAa,EACtD,UAAC,OAAO;4BACJ,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC;4BACnC,KAAI,CAAC,sBAAsB,EAAE,CAAC;wBAClC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACtB,aAAa,CAAC,OAAO,EAAE,CAAC;oBAC5B,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,IAAI,CAAC,eAAe,EAAE,CAAC;wBACvB,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC1B,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,0BAA0B,EAAE,CAAC;gBACtC,CAAC;YACL,CAAC;YACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YACjE,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,cAAc,CACf,IAAI,SAAS,CAAC,UAAU,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,EAC9E,IAAI,CACP,CAAC;QACN,CAAC;IACL,CAAC;IAEO,kCAAe,GAAvB;QACI,SAAS,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;QACpG,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7E,CAAC;IAEO,kCAAe,GAAvB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAClC,CAAC;IACL,CAAC;IAEO,yCAAsB,GAA9B;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC;IACL,CAAC;IACL,eAAC;AAAD,CAAC,AA7DD,CAA8B,KAAK,GA6DlC","sourcesContent":["import { Where } from \"./where\";\nimport { ICount, IError } from \"../../interfaces\";\nimport * as Select from '../select/index';\nimport { LogHelper } from \"../../log_helper\";\nimport { Error_Type } from \"../../enums\";\nimport { IdbHelper } from '../idb_helper';\n\nexport class Instance extends Where {\n\n    constructor(query: ICount, onSuccess: (noOfRecord: number) => void, onError: (error: IError) => void) {\n        super();\n        this._onError = onError;\n        this._onSuccess = onSuccess;\n        this._query = query;\n    }\n\n    execute() {\n        if (this.isTableExist(this._query.from)) {\n            try {\n                if (this._query.where !== undefined) {\n                    this.addGreatAndLessToNotOp();\n                    if (this._query.where.Or || Array.isArray(this._query.where)) {\n                        var select_object = new Select.Instance(this._query as any,\n                            (results) => {\n                                this._resultCount = results.length;\n                                this.onTransactionCompleted();\n                            }, this._onError);\n                        select_object.execute();\n                    }\n                    else {\n                        this.initTransaction();\n                        this.goToWhereLogic();\n                    }\n                }\n                else {\n                    this.initTransaction();\n                    this.executeWhereUndefinedLogic();\n                }\n            }\n            catch (ex) {\n                this.onExceptionOccured(ex, { TableName: this._query.from });\n            }\n        }\n        else {\n            this._errorOccured = true;\n            this.onErrorOccured(\n                new LogHelper(Error_Type.TableNotExist, { TableName: this._query.From }).get(),\n                true\n            );\n        }\n    }\n\n    private initTransaction() {\n        IdbHelper.createTransaction([this._query.From], this.onTransactionCompleted.bind(this), 'readonly');\n        this._objectStore = IdbHelper._transaction.objectStore(this._query.From);\n    }\n\n    private onQueryFinished() {\n        if (this._isTransaction === true) {\n            this.onTransactionCompleted();\n        }\n    }\n\n    private onTransactionCompleted() {\n        if (this._errorOccured === false) {\n            this._onSuccess(this._resultCount);\n        }\n    }\n}"]}