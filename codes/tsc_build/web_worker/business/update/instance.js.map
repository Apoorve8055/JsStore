{"version":3,"file":"instance.js","sourceRoot":"","sources":["../../../../web_worker/business/update/instance.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,KAAK,MAAM,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD;IAA8B,4BAAK;IAC/B,kBAAY,KAAc,EAAE,SAAqB,EAAE,OAA8B;QAAjF,YACI,iBAAO,SAIV;QAHG,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;IACxB,CAAC;IAED,0BAAO,GAAP;QACI,IAAI,CAAC;YACD,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC1D,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACf,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;oBAClC,IAAI,CAAC,sBAAsB,EAAE,CAAC;oBAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAC3D,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBAC/B,CAAC;oBACD,IAAI,CAAC,CAAC;wBACF,IAAI,CAAC,eAAe,EAAE,CAAC;wBACvB,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC1B,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,eAAe,EAAE,CAAC;oBACvB,IAAI,CAAC,0BAA0B,EAAE,CAAC;gBACtC,CAAC;YACL,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC3C,CAAC;QACL,CAAC;QACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACR,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;QAC1E,CAAC;IACL,CAAC;IAEO,sCAAmB,GAA3B;QAAA,iBAkBC;QAjBG,IAAI,aAAa,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC;YACpC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;YACpB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;SAChB,EAAE,UAAC,OAAc;YACzB,IAAI,GAAG,GAAG,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EACxC,QAAQ,GAAG,EAAE,EACb,SAAS,GAAG,EAAE,CAAC;YACnB,OAAO,CAAC,OAAO,CAAC,UAAC,KAAK;gBAClB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YACH,OAAO,GAAG,IAAI,CAAC;YACf,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC;YAClC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC;YACjC,KAAI,CAAC,eAAe,EAAE,CAAC;YACvB,KAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7B,aAAa,CAAC,OAAO,EAAE,CAAC;IAC5B,CAAC;IACL,eAAC;AAAD,CAAC,AA1DD,CAA8B,KAAK,GA0DlC","sourcesContent":["import { Where } from \"./where\";\nimport { IUpdate, IError, ISelect } from \"../../interfaces\";\nimport * as Select from \"../select/index\";\nimport { SchemaChecker } from \"./schema_checker\";\n\nexport class Instance extends Where {\n    constructor(query: IUpdate, onSuccess: () => void, onError: (err: IError) => void) {\n        super();\n        this._onSuccess = onSuccess;\n        this._onError = onError;\n        this._query = query;\n    }\n\n    execute() {\n        try {\n            this._error = new SchemaChecker(this.getTable(this._query.in)).\n                check(this._query.set, this._query.in);\n            if (!this._error) {\n                if (this._query.where !== undefined) {\n                    this.addGreatAndLessToNotOp();\n                    if (this._query.where.or || Array.isArray(this._query.where)) {\n                        this.executeComplexLogic();\n                    }\n                    else {\n                        this.initTransaction();\n                        this.goToWhereLogic();\n                    }\n                }\n                else {\n                    this.initTransaction();\n                    this.executeWhereUndefinedLogic();\n                }\n            }\n            else {\n                this._errorOccured = true;\n                this.onErrorOccured(this._error, true);\n            }\n        }\n        catch (ex) {\n            this._errorOccured = true;\n            this.onExceptionOccured.call(this, ex, { TableName: this._query.in });\n        }\n    }\n\n    private executeComplexLogic() {\n        var select_object = new Select.Instance({\n            from: this._query.in,\n            where: this._query.where\n        } as ISelect, (results: any[]) => {\n            var key = this.getPrimaryKey(this._query.in),\n                in_query = [],\n                where_qry = {};\n            results.forEach((value) => {\n                in_query.push(value[key]);\n            });\n            results = null;\n            where_qry[key] = { In: in_query };\n            this._query['where'] = where_qry;\n            this.initTransaction();\n            this.goToWhereLogic();\n        }, this._onError.bind(this));\n        select_object.execute();\n    }\n}\n"]}