{"version":3,"file":"schema_checker.js","sourceRoot":"","sources":["../../../../web_worker/business/update/schema_checker.ts"],"names":[],"mappings":"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","sourcesContent":["import { Table } from \"../../model/table\";\nimport { IError } from \"../../interfaces\";\nimport { Column } from \"../../model/column\";\nimport { LogHelper } from \"../../log_helper\";\nimport { Error_Type } from \"../../enums\";\nimport { Util } from \"../../util\";\n\nexport class SchemaChecker {\n    _table: Table;\n    constructor(table: Table) {\n        this._table = table;\n    }\n\n    check(setValue, tblName) {\n        var error: IError = null;\n        if (typeof setValue === 'object') {\n            if (this._table) {\n                // loop through table column and find data is valid\n                this._table._columns.every(function (column: Column) {\n                    if (error === null) {\n                        if (column._name in setValue) {\n                            error = this.checkByColumn(column, setValue[column._name]);\n                        }\n                        return true;\n                    }\n                    else {\n                        return false;\n                    }\n                }, this);\n            }\n            else {\n                error = new LogHelper(Error_Type.TableNotExist, { TableName: tblName });\n            }\n        }\n        else {\n            error = new LogHelper(Error_Type.NotObject);\n        }\n        return error;\n    }\n\n    private checkByColumn(column, value) {\n        var error: IError = null;\n        // check not null schema\n        if (column._notNull && Util.isNull(value)) {\n            error = new LogHelper(Error_Type.NullValue, { ColumnName: column._name });\n        }\n\n        // check datatype\n        var type = Util.getType(value);\n        if (column._dataType) {\n            if (type !== column._dataType && type !== 'object') {\n                error = new LogHelper(Error_Type.BadDataType, { ColumnName: column._name });\n            }\n        }\n\n        // check allowed operators\n        if (type === 'object') {\n            var allowed_prop = ['+', '-', '*', '/'];\n            for (var prop in value) {\n                if (allowed_prop.indexOf(prop) < 0 && column._dataType && type !== column._dataType) {\n                    error = new LogHelper(Error_Type.BadDataType, { ColumnName: column._name }).get();\n                }\n                break;\n            }\n        }\n        return error;\n    }\n}"]}