{"version":3,"file":"value_checker.js","sourceRoot":"","sources":["../../../../web_worker/business/insert/value_checker.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AACzC,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C;IAOI,sBAAY,KAAY,EAAE,kBAAkB;QAJ5C,kBAAa,GAAY,KAAK,CAAC;QAE/B,wBAAmB,GAAG,EAAE,CAAC;QAGrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;IAClD,CAAC;IAEM,0CAAmB,GAA1B,UAA2B,KAAK;QAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,MAAM;YACvC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;QAC/B,CAAC,EAAE,IAAI,CAAC,CAAC;QACT,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEO,8CAAuB,GAA/B,UAAgC,MAAc;QAC1C,wBAAwB;QACxB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,SAAS,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAC/E,CAAC;QAED,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAChE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QACjF,CAAC;IACL,CAAC;IAEO,gDAAyB,GAAjC,UAAkC,MAAc;QAC5C,8BAA8B;QAC9B,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChD,CAAC;QACD,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAEO,wCAAiB,GAAzB,UAA0B,KAAiB,EAAE,OAAY;QACrD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;IACtD,CAAC;IACL,mBAAC;AAAD,CAAC,AAjDD,IAiDC","sourcesContent":["import { Table } from \"../../model/table\";\r\nimport { IError } from \"../../interfaces\";\r\nimport { Column } from \"../../model/column\";\r\nimport { Util } from \"../../util\";\r\nimport { Error_Type } from \"../../enums\";\r\nimport { LogHelper } from \"../../log_helper\";\r\n\r\nexport class ValueChecker {\r\n    _table: Table;\r\n    _value: object;\r\n    _errorOccured: boolean = false;\r\n    _error: IError;\r\n    _autoIncrementValue = {};\r\n\r\n    constructor(table: Table, autoIncrementValue) {\r\n        this._table = table;\r\n        this._autoIncrementValue = autoIncrementValue;\r\n    }\r\n\r\n    public checkAndModifyValue(value) {\r\n        this._value = value;\r\n        this._table._columns.every(function (column) {\r\n            this.checkAndModifyColumnValue(column, value);\r\n            return !this._errorOccured;\r\n        }, this);\r\n        return this._errorOccured;\r\n    }\r\n\r\n    private checkNotNullAndDataType(column: Column) {\r\n        // check not null schema\r\n        if (column._notNull && Util.isNull(this._value[column._name])) {\r\n            this.onValidationError(Error_Type.NullValue, { ColumnName: column._name });\r\n        }\r\n        // check datatype\r\n        else if (column._dataType && !Util.isNull(this._value[column._name]) &&\r\n            Util.getType(this._value[column._name]) !== column._dataType) {\r\n            this.onValidationError(Error_Type.BadDataType, { ColumnName: column._name });\r\n        }\r\n    }\r\n\r\n    private checkAndModifyColumnValue(column: Column) {\r\n        // check auto increment scheme\r\n        if (column._autoIncrement) {\r\n            this._value[column._name] = ++this._autoIncrementValue[column._name];\r\n        }\r\n        // check Default Schema\r\n        else if (column._default && Util.isNull(this._value[column._name])) {\r\n            this._value[column._name] = column._default;\r\n        }\r\n        this.checkNotNullAndDataType(column);\r\n    }\r\n\r\n    private onValidationError(error: Error_Type, details: any) {\r\n        this._errorOccured = true;\r\n        this._error = new LogHelper(error, details).get();\r\n    }\r\n}"]}