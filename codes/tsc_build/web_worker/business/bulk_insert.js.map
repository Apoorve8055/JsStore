{"version":3,"file":"bulk_insert.js","sourceRoot":"","sources":["../../../web_worker/business/bulk_insert.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAEzC;IAAgC,8BAAI;IAGhC,oBAAY,KAAc,EAAE,SAAqB,EAAE,OAA8B;QAAjF,YACI,iBAAO,SAIV;QAHG,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;;IAC5B,CAAC;IAED,4BAAO,GAAP;QACI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,cAAc,CACf,IAAI,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,EACxC,IAAI,CACP,CAAC;QACN,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YACpD,IAAI,CAAC;gBACD,IAAI,CAAC,cAAc,EAAE,CAAC;YAC1B,CAAC;YACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACR,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YACjE,CAAC;QACL,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,KAAK,GAAG,IAAI,SAAS,CAAC,UAAU,CAAC,aAAa,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YACrF,KAAK,CAAC,KAAK,EAAE,CAAC;QAClB,CAAC;IACL,CAAC;IAEO,mCAAc,GAAtB;QAAA,iBAQC;QAPG,SAAS,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YAC5C,KAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,KAAK;YACtC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IACL,iBAAC;AAAD,CAAC,AAxCD,CAAgC,IAAI,GAwCnC","sourcesContent":["import { Base } from \"./base\";\nimport { IInsert, IError } from \"../interfaces\";\nimport { Error_Type } from \"../enums\";\nimport { LogHelper } from \"../log_helper\";\nimport { IdbHelper } from './idb_helper';\n\nexport class BulkInsert extends Base {\n    _query: IInsert;\n\n    constructor(query: IInsert, onSuccess: () => void, onError: (err: IError) => void) {\n        super();\n        this._query = query;\n        this._onSuccess = onSuccess;\n        this._onError = onError;\n    }\n\n    execute() {\n        if (!Array.isArray(this._query.values)) {\n            this.onErrorOccured(\n                new LogHelper(Error_Type.NotArray).get(),\n                true\n            );\n        }\n        else if (this.isTableExist(this._query.into) === true) {\n            try {\n                this.bulkinsertData();\n            }\n            catch (ex) {\n                this.onExceptionOccured(ex, { TableName: this._query.into });\n            }\n        }\n        else {\n            var error = new LogHelper(Error_Type.TableNotExist, { TableName: this._query.into });\n            error.throw();\n        }\n    }\n\n    private bulkinsertData() {\n        IdbHelper.createTransaction([this._query.into], () => {\n            this._onSuccess();\n        });\n        this._objectStore = IdbHelper._transaction.objectStore(this._query.into);\n        this._query.values.forEach(function (value) {\n            this._objectStore.add(value);\n        }, this);\n    }\n}\n"]}