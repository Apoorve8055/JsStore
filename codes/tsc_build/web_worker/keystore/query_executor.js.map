{"version":3,"file":"query_executor.js","sourceRoot":"","sources":["../../../web_worker/keystore/query_executor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAE7C;IAAA;IA8CA,CAAC;IApCU,0BAAY,GAAnB,UAAoB,OAAsB;QACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;IACL,CAAC;IAEM,yBAAW,GAAlB;QAAA,iBAWC;QAVG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,OAAO,GAAkB;gBACzB,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI;gBAChC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK;aACpB,CAAC;YACnB,IAAI,IAAI,CAAC,UAAA,OAAO;gBACZ,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC;IACL,CAAC;IAEM,6BAAe,GAAtB,UAAuB,OAAqB;QACxC,IAAI,gBAAgB,GAAkB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QACjE,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,EAAE,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC3B,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACnD,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACxC,CAAC;QACL,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YAClC,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IA5CM,2BAAa,GAAoB,EAAE,CAAC;IACpC,wBAAU,GAAG,YAAY,CAAC;IAC1B,yBAAW,GAAG,KAAK,CAAC;IACpB,8BAAgB,GAAG,KAAK,CAAC;IACzB,uBAAS,GAAc;QAC1B,SAAS,EAAE,iBAAiB,CAAC,UAAU;QACvC,SAAS,EAAE,EAAE;KAChB,CAAC;IAsCN,oBAAC;CAAA,AA9CD,IA8CC;SA9CY,aAAa;AAgD1B,4DAA4D;AAE5D,wCAAwC","sourcesContent":["import { IDbStatus, IQueryResult, IQueryRequest } from \"./interfaces\";\r\nimport { Connection_Status } from \"./enums\";\r\nimport { Main } from \"./business/main_logic\";\r\n\r\nexport class QueryExecutor {\r\n    static _requestQueue: IQueryRequest[] = [];\r\n    static _tableName = \"LocalStore\";\r\n    static _columnName = \"Key\";\r\n    static _isCodeExecuting = false;\r\n    static _dbStatus: IDbStatus = {\r\n        ConStatus: Connection_Status.NotStarted,\r\n        LastError: \"\"\r\n    };\r\n\r\n    static prcoessQuery(request: IQueryRequest) {\r\n        this._requestQueue.push(request);\r\n        if (this._requestQueue.length === 1) {\r\n            this.executeCode();\r\n        }\r\n    }\r\n\r\n    static executeCode() {\r\n        if (!this._isCodeExecuting && this._requestQueue.length > 0) {\r\n            this._isCodeExecuting = true;\r\n            var request: IQueryRequest = {\r\n                Name: this._requestQueue[0].Name,\r\n                Query: this._requestQueue[0].Query\r\n            } as IQueryRequest;\r\n            new Main(results => {\r\n                this.onQueryFinished(results);\r\n            }).checkConnectionAndExecuteLogic(request);\r\n        }\r\n    }\r\n\r\n    static onQueryFinished(message: IQueryResult) {\r\n        var finished_request: IQueryRequest = this._requestQueue.shift();\r\n        this._isCodeExecuting = false;\r\n        if (message.ErrorOccured) {\r\n            if (finished_request.OnError) {\r\n                finished_request.OnError(message.ErrorDetails);\r\n            }\r\n            else {\r\n                console.error(message.ErrorDetails);\r\n            }\r\n        }\r\n        else if (finished_request.OnSuccess) {\r\n            finished_request.OnSuccess(message.ReturnedValue);\r\n        }\r\n        this.executeCode();\r\n    }\r\n}\r\n\r\n// export var query_executor_instance = new QueryExecutor();\r\n\r\n// export default (new QueryExecutor());"]}