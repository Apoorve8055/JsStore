{"version":3,"file":"instance.js","sourceRoot":"","sources":["../../../web_worker/keystore/instance.ts"],"names":[],"mappings":"AAAA,iBA4EA;AA5EA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACtC,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAGjD;;;GAGG;AACH,MAAM,CAAC,IAAI,IAAI,GAAG;IACd,KAAK,CAAC,SAAS,EAAE,CAAC;IAClB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACZ,aAAa,CAAC,YAAY,CAAC;YACvB,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,IAAI;SACG,CAAC,CAAC;IACxB,CAAC;AACL,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,IAAI,GAAG,GAAG,UAAC,GAAW,EAAE,SAA2B,EAAE,OAAqC;IAArC,wBAAA,EAAA,cAAqC;IAC7F,aAAa,CAAC,YAAY,CAAC;QACvB,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,OAAO;QAChB,SAAS,EAAE,SAAS;QACpB,KAAK,EAAE,GAAG;KACb,CAAC,CAAC;IACH,MAAM,CAAC,KAAI,CAAC;AAChB,CAAC,CAAC;AAEF;;;;;;;;GAQG;AACH,MAAM,CAAC,IAAI,GAAG,GAAG,UAAC,GAAG,EAAE,KAAK,EAAE,SAA4B,EAAE,OAA+B;IACvF,IAAI,KAAK,GAAG;QACR,GAAG,EAAE,GAAG;QACR,KAAK,EAAE,KAAK;KACJ,CAAC;IACb,aAAa,CAAC,YAAY,CAAC;QACvB,IAAI,EAAE,KAAK;QACX,OAAO,EAAE,OAAO;QAChB,SAAS,EAAE,SAAS;QACpB,KAAK,EAAE,KAAK;KACE,CAAC,CAAC;IACpB,MAAM,CAAC,KAAI,CAAC;AAChB,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,IAAI,MAAM,GAAG,UAAC,GAAW,EAAE,SAAkC,EAAE,OAAqC;IAAzE,0BAAA,EAAA,gBAAkC;IAAE,wBAAA,EAAA,cAAqC;IACvG,aAAa,CAAC,YAAY,CAAC;QACvB,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,OAAO;QAChB,SAAS,EAAE,SAAS;QACpB,KAAK,EAAE,GAAG;KACI,CAAC,CAAC;IACpB,MAAM,CAAC,KAAI,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { Utils } from \"./utils_logic\";\r\nimport { QueryExecutor } from './query_executor';\r\nimport { IQueryRequest, IError, IInsert } from \"./interfaces\";\r\n\r\n/**\r\n * Initialize KeyStore\r\n * \r\n */\r\nexport var init = () => {\r\n    Utils.setDbType();\r\n    if (indexedDB) {\r\n        QueryExecutor.prcoessQuery({\r\n            Name: 'create_db',\r\n            Query: null\r\n        } as IQueryRequest);\r\n    }\r\n};\r\n\r\n/**\r\n * return the value by key\r\n * \r\n * @param {string} key \r\n * @param {(result) => void} onSuccess \r\n * @param {(err: IError) => void} [onError=null] \r\n * @returns \r\n */\r\nexport var get = (key: string, onSuccess: (result) => void, onError: (err: IError) => void = null) => {\r\n    QueryExecutor.prcoessQuery({\r\n        Name: 'get',\r\n        OnError: onError,\r\n        OnSuccess: onSuccess,\r\n        Query: key\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * insert or update value\r\n * \r\n * @param {any} key \r\n * @param {any} value \r\n * @param {(result) => void} [onSuccess] \r\n * @param {(err: IError) => void} [onError] \r\n * @returns \r\n */\r\nexport var set = (key, value, onSuccess?: (result) => void, onError?: (err: IError) => void) => {\r\n    var query = {\r\n        Key: key,\r\n        Value: value\r\n    } as IInsert;\r\n    QueryExecutor.prcoessQuery({\r\n        Name: 'set',\r\n        OnError: onError,\r\n        OnSuccess: onSuccess,\r\n        Query: query\r\n    } as IQueryRequest);\r\n    return this;\r\n};\r\n\r\n/**\r\n * delete value\r\n * \r\n * @param {string} key \r\n * @param {(result) => void} [onSuccess=null] \r\n * @param {(err: IError) => void} [onError=null] \r\n * @returns \r\n */\r\nexport var remove = (key: string, onSuccess: (result) => void = null, onError: (err: IError) => void = null) => {\r\n    QueryExecutor.prcoessQuery({\r\n        Name: 'remove',\r\n        OnError: onError,\r\n        OnSuccess: onSuccess,\r\n        Query: key\r\n    } as IQueryRequest);\r\n    return this;\r\n};\r\n"]}