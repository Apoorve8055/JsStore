{"version":3,"file":"main_logic.js","sourceRoot":"","sources":["../../../../web_worker/keystore/business/main_logic.ts"],"names":[],"mappings":"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","sourcesContent":["import { QueryExecutor } from '../query_executor';\r\nimport { Connection_Status } from \"../enums\";\r\nimport { IInsert, IError, IQueryRequest, IQueryResult } from \"../interfaces\";\r\nimport { Remove } from \"./remove_logic\";\r\nimport { Set } from \"./set_logic\";\r\nimport { InitDb } from \"./init_db_logic\";\r\nimport { Get } from \"./get_logic\";\r\nimport { IdbHelper } from './idb_helper';\r\n\r\nexport class Main {\r\n    _onSuccess: (result) => void;\r\n    constructor(onSuccess = null) {\r\n        this._onSuccess = onSuccess;\r\n    }\r\n\r\n    public set(query: IInsert, onSuccess: () => void, onError: (err: IError) => void) {\r\n        var obj_insert = new Set(query, onSuccess, onError);\r\n        obj_insert.execute();\r\n    }\r\n\r\n    public remove(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        var obj_delete = new Remove(key, onSuccess, onError);\r\n        obj_delete.execute();\r\n    }\r\n\r\n    public get(key: string, onSuccess: (result) => void, onError: (err: IError) => void) {\r\n        var get_object = new Get(key, onSuccess, onError);\r\n        get_object.execute();\r\n    }\r\n\r\n    public createDb(onSuccess: () => void, onError: (err: IError) => void) {\r\n        var db_name = \"KeyStore\";\r\n        var init_db_object = new InitDb(db_name, onSuccess, onError);\r\n    }\r\n\r\n    public checkConnectionAndExecuteLogic(request: IQueryRequest) {\r\n        if (request.Name === 'create_db' || request.Name === 'open_db') {\r\n            this.executeLogic(request);\r\n        }\r\n        else {\r\n            switch (QueryExecutor._dbStatus.ConStatus) {\r\n                case Connection_Status.Connected: this.executeLogic(request); break;\r\n                case Connection_Status.NotStarted:\r\n                    setTimeout(function () {\r\n                        this.checkConnectionAndExecuteLogic(request);\r\n                    }.bind(this), 100); break;\r\n                case Connection_Status.Closed:\r\n                    if (IdbHelper._isDbDeletedByBrowser) {\r\n                        this.createDb(() => {\r\n                            IdbHelper._isDbDeletedByBrowser = false;\r\n                            this.checkConnectionAndExecuteLogic(request);\r\n                        }, (err) => {\r\n                            console.error(err);\r\n                        });\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n    private returnResult(result) {\r\n        if (this._onSuccess) {\r\n            this._onSuccess(result);\r\n        }\r\n    }\r\n\r\n    private executeLogic(request: IQueryRequest) {\r\n        var onSuccess = function (results) {\r\n            this.returnResult({\r\n                ReturnedValue: results\r\n            } as IQueryResult);\r\n        }.bind(this),\r\n            onError = function (err) {\r\n                this.returnResult({\r\n                    ErrorDetails: err,\r\n                    ErrorOccured: true\r\n                } as IQueryResult);\r\n            }.bind(this);\r\n\r\n        switch (request.Name) {\r\n            case 'get':\r\n                this.get(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'set': this.set(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'remove': this.remove(request.Query, onSuccess, onError);\r\n                break;\r\n            case 'create_db': this.createDb(onSuccess, onError); break;\r\n        }\r\n    }\r\n}"]}