{"version":3,"file":"init_db_logic.js","sourceRoot":"","sources":["../../../../web_worker/keystore/business/init_db_logic.ts"],"names":[],"mappings":"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","sourcesContent":["import { IError } from \"../interfaces\";\r\nimport * as JsStore from '../../index';\r\nimport { Connection_Status } from \"../enums\";\r\nimport { Utils } from \"../utils_logic\";\r\nimport { IdbHelper } from \"./idb_helper\";\r\nimport { QueryExecutor } from \"../query_executor\";\r\n\r\nexport var temp_datas;\r\nexport class InitDb {\r\n    constructor(dbName: string, onSuccess: () => void, onError: (err: IError) => void) {\r\n        var db_request = self.indexedDB.open(dbName, 1);\r\n        IdbHelper._isDbDeletedByBrowser = false;\r\n        db_request.onerror = (event) => {\r\n            if ((event as any).target.error.name === 'InvalidStateError') {\r\n                JsStore.IdbHelper._dbStatus = {\r\n                    ConStatus: JsStore.Connection_Status.UnableToStart,\r\n                    LastError: JsStore.Error_Type.IndexedDbBlocked,\r\n                };\r\n            }\r\n            if (onError != null) {\r\n                onError((event as any).target.error);\r\n            }\r\n        };\r\n\r\n        db_request.onsuccess = (event) => {\r\n            QueryExecutor._dbStatus.ConStatus = Connection_Status.Connected;\r\n            IdbHelper._dbConnection = db_request.result;\r\n            IdbHelper._dbConnection.onclose = () => {\r\n                IdbHelper.callDbDroppedByBrowser();\r\n                Utils.updateDbStatus(Connection_Status.Closed, JsStore.Error_Type.ConnectionClosed);\r\n            };\r\n\r\n            IdbHelper._dbConnection.onversionchange = (e) => {\r\n                if (e.newVersion === null) { // An attempt is made to delete the db\r\n                    e.target.close(); // Manually close our connection to the db\r\n                    IdbHelper.callDbDroppedByBrowser();\r\n                    Utils.updateDbStatus(Connection_Status.Closed, JsStore.Error_Type.ConnectionClosed);\r\n                }\r\n            };\r\n\r\n            IdbHelper._dbConnection.onerror = (e) => {\r\n                QueryExecutor._dbStatus.LastError = \"Error occured in connection :\" + e.target.result;\r\n            };\r\n\r\n            IdbHelper._dbConnection.onabort = (e) => {\r\n                QueryExecutor._dbStatus = {\r\n                    ConStatus: Connection_Status.Closed,\r\n                    LastError: \"Connection aborted\"\r\n                };\r\n            };\r\n\r\n            if (onSuccess != null) {\r\n                onSuccess();\r\n            }\r\n        };\r\n\r\n        db_request.onupgradeneeded = (event: any) => {\r\n            var db = event.target.result,\r\n                column = \"Key\";\r\n            db.createObjectStore(QueryExecutor._tableName, {\r\n                keyPath: column\r\n            }).createIndex(column, column, { unique: true });\r\n        };\r\n    }\r\n}"]}